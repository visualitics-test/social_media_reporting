{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v7.json", "dbt_version": "1.3.0", "generated_at": "2022-12-19T19:12:52.215065Z", "invocation_id": "db0caf6c-c476-4f94-b989-e8ff3b795af9", "env": {}, "project_id": "62df3da8f8309bd457eb5e7c4ba05f3c", "user_id": "8929baf0-9bc1-477e-9a57-eb8b0db4da62", "send_anonymous_usage_stats": true, "adapter_type": "postgres"}, "nodes": {"seed.social_media_rollup_integration_tests.instagram_business_media_insights_data": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"id": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests", "fqn": ["social_media_rollup_integration_tests", "instagram_business_media_insights_data"], "unique_id": "seed.social_media_rollup_integration_tests.instagram_business_media_insights_data", "raw_code": "", "language": "sql", "package_name": "social_media_rollup_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests", "path": "instagram_business_media_insights_data.csv", "original_file_path": "seeds/instagram_business_media_insights_data.csv", "name": "instagram_business_media_insights_data", "alias": "instagram_business_media_insights_data", "checksum": {"name": "sha256", "checksum": "cb692c783c28caab4d938ec7facee576c0d93a1bcb622891c5f0c562c76b8d8c"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}"}}, "created_at": 1671477151.329099, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests\".\"instagram_business_media_insights_data\""}, "seed.social_media_rollup_integration_tests.linkedin_pages_share_statistic_data": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests", "fqn": ["social_media_rollup_integration_tests", "linkedin_pages_share_statistic_data"], "unique_id": "seed.social_media_rollup_integration_tests.linkedin_pages_share_statistic_data", "raw_code": "", "language": "sql", "package_name": "social_media_rollup_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests", "path": "linkedin_pages_share_statistic_data.csv", "original_file_path": "seeds/linkedin_pages_share_statistic_data.csv", "name": "linkedin_pages_share_statistic_data", "alias": "linkedin_pages_share_statistic_data", "checksum": {"name": "sha256", "checksum": "e458c2249643530b6a58f7eeecff5f6055702ac899f7dba091fdb0d66d86d17e"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1671477151.3347719, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests\".\"linkedin_pages_share_statistic_data\""}, "seed.social_media_rollup_integration_tests.linkedin_pages_ugc_post_share_content_media_data": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests", "fqn": ["social_media_rollup_integration_tests", "linkedin_pages_ugc_post_share_content_media_data"], "unique_id": "seed.social_media_rollup_integration_tests.linkedin_pages_ugc_post_share_content_media_data", "raw_code": "", "language": "sql", "package_name": "social_media_rollup_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests", "path": "linkedin_pages_ugc_post_share_content_media_data.csv", "original_file_path": "seeds/linkedin_pages_ugc_post_share_content_media_data.csv", "name": "linkedin_pages_ugc_post_share_content_media_data", "alias": "linkedin_pages_ugc_post_share_content_media_data", "checksum": {"name": "sha256", "checksum": "fe7cfe66de32bb982d5fc117242cbaabad4051e12b9457ad9d98af5172be7a1a"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1671477151.335941, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests\".\"linkedin_pages_ugc_post_share_content_media_data\""}, "seed.social_media_rollup_integration_tests.linkedin_pages_organization_ugc_post_data": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests", "fqn": ["social_media_rollup_integration_tests", "linkedin_pages_organization_ugc_post_data"], "unique_id": "seed.social_media_rollup_integration_tests.linkedin_pages_organization_ugc_post_data", "raw_code": "", "language": "sql", "package_name": "social_media_rollup_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests", "path": "linkedin_pages_organization_ugc_post_data.csv", "original_file_path": "seeds/linkedin_pages_organization_ugc_post_data.csv", "name": "linkedin_pages_organization_ugc_post_data", "alias": "linkedin_pages_organization_ugc_post_data", "checksum": {"name": "sha256", "checksum": "8dc86d3766c26eb107d0f6eb0050b62184d8f68f9b086675b2a21050b428423e"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1671477151.337166, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests\".\"linkedin_pages_organization_ugc_post_data\""}, "seed.social_media_rollup_integration_tests.twitter_organic_tweet_data": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"id": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests", "fqn": ["social_media_rollup_integration_tests", "twitter_organic_tweet_data"], "unique_id": "seed.social_media_rollup_integration_tests.twitter_organic_tweet_data", "raw_code": "", "language": "sql", "package_name": "social_media_rollup_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests", "path": "twitter_organic_tweet_data.csv", "original_file_path": "seeds/twitter_organic_tweet_data.csv", "name": "twitter_organic_tweet_data", "alias": "twitter_organic_tweet_data", "checksum": {"name": "sha256", "checksum": "09012723f6737182a8c7a73676c7b379152e8d261ac669353e6cd9979ab067ad"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1671477151.338303, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests\".\"twitter_organic_tweet_data\""}, "seed.social_media_rollup_integration_tests.instagram_business_user_history_data": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"id": "bigint", "ig_id": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests", "fqn": ["social_media_rollup_integration_tests", "instagram_business_user_history_data"], "unique_id": "seed.social_media_rollup_integration_tests.instagram_business_user_history_data", "raw_code": "", "language": "sql", "package_name": "social_media_rollup_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests", "path": "instagram_business_user_history_data.csv", "original_file_path": "seeds/instagram_business_user_history_data.csv", "name": "instagram_business_user_history_data", "alias": "instagram_business_user_history_data", "checksum": {"name": "sha256", "checksum": "d3dffdf85a9ab9c5b43c9e43ff3cdf74c9e43b575785e4144e462480596ccb4a"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "ig_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}"}}, "created_at": 1671477151.339457, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests\".\"instagram_business_user_history_data\""}, "seed.social_media_rollup_integration_tests.twitter_organic_organic_tweet_report_data": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"organic_tweet_id": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests", "fqn": ["social_media_rollup_integration_tests", "twitter_organic_organic_tweet_report_data"], "unique_id": "seed.social_media_rollup_integration_tests.twitter_organic_organic_tweet_report_data", "raw_code": "", "language": "sql", "package_name": "social_media_rollup_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests", "path": "twitter_organic_organic_tweet_report_data.csv", "original_file_path": "seeds/twitter_organic_organic_tweet_report_data.csv", "name": "twitter_organic_organic_tweet_report_data", "alias": "twitter_organic_organic_tweet_report_data", "checksum": {"name": "sha256", "checksum": "eca4581139336003743efebcf5bbb9e3de7ddfeaf0807f812143a38bde61ec89"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"organic_tweet_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1671477151.340621, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests\".\"twitter_organic_organic_tweet_report_data\""}, "seed.social_media_rollup_integration_tests.linkedin_pages_ugc_post_history_data": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests", "fqn": ["social_media_rollup_integration_tests", "linkedin_pages_ugc_post_history_data"], "unique_id": "seed.social_media_rollup_integration_tests.linkedin_pages_ugc_post_history_data", "raw_code": "", "language": "sql", "package_name": "social_media_rollup_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests", "path": "linkedin_pages_ugc_post_history_data.csv", "original_file_path": "seeds/linkedin_pages_ugc_post_history_data.csv", "name": "linkedin_pages_ugc_post_history_data", "alias": "linkedin_pages_ugc_post_history_data", "checksum": {"name": "sha256", "checksum": "36c1ec413ec0c1921f6a817e8b536b25b2109e1df938be5cacce7b504489b228"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1671477151.341877, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests\".\"linkedin_pages_ugc_post_history_data\""}, "seed.social_media_rollup_integration_tests.facebook_pages_lifetime_post_metrics_total_data": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"post_id": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests", "fqn": ["social_media_rollup_integration_tests", "facebook_pages_lifetime_post_metrics_total_data"], "unique_id": "seed.social_media_rollup_integration_tests.facebook_pages_lifetime_post_metrics_total_data", "raw_code": "", "language": "sql", "package_name": "social_media_rollup_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests", "path": "facebook_pages_lifetime_post_metrics_total_data.csv", "original_file_path": "seeds/facebook_pages_lifetime_post_metrics_total_data.csv", "name": "facebook_pages_lifetime_post_metrics_total_data", "alias": "facebook_pages_lifetime_post_metrics_total_data", "checksum": {"name": "sha256", "checksum": "8a9fcbbaef4adb6c6719fdbc2a39b90c11a8c7df42dd9a13169723c46fe5d8d7"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"post_id": "{{ 'string' if target.type in ['bigquery', 'spark', 'databricks'] else 'varchar' }}"}}, "created_at": 1671477151.342988, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests\".\"facebook_pages_lifetime_post_metrics_total_data\""}, "seed.social_media_rollup_integration_tests.linkedin_pages_organization_data": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests", "fqn": ["social_media_rollup_integration_tests", "linkedin_pages_organization_data"], "unique_id": "seed.social_media_rollup_integration_tests.linkedin_pages_organization_data", "raw_code": "", "language": "sql", "package_name": "social_media_rollup_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests", "path": "linkedin_pages_organization_data.csv", "original_file_path": "seeds/linkedin_pages_organization_data.csv", "name": "linkedin_pages_organization_data", "alias": "linkedin_pages_organization_data", "checksum": {"name": "sha256", "checksum": "bc1a529d9a7ce031f65953eff855e1bb480b6984f693ec29df20f51cdc3a99de"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1671477151.344115, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests\".\"linkedin_pages_organization_data\""}, "seed.social_media_rollup_integration_tests.instagram_business_media_history_data": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"id": "bigint", "ig_id": "bigint", "user_id": "bigint", "carousel_album_id": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests", "fqn": ["social_media_rollup_integration_tests", "instagram_business_media_history_data"], "unique_id": "seed.social_media_rollup_integration_tests.instagram_business_media_history_data", "raw_code": "", "language": "sql", "package_name": "social_media_rollup_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests", "path": "instagram_business_media_history_data.csv", "original_file_path": "seeds/instagram_business_media_history_data.csv", "name": "instagram_business_media_history_data", "alias": "instagram_business_media_history_data", "checksum": {"name": "sha256", "checksum": "d996d6d107988021ddcfc759aeae9ff3fd6015f7e82764493083a11a776b5b2d"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "ig_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "user_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "carousel_album_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}"}}, "created_at": 1671477151.345248, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests\".\"instagram_business_media_history_data\""}, "seed.social_media_rollup_integration_tests.facebook_pages_post_history_data": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"id": "varchar", "promotable_id": "varchar", "page_id": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests", "fqn": ["social_media_rollup_integration_tests", "facebook_pages_post_history_data"], "unique_id": "seed.social_media_rollup_integration_tests.facebook_pages_post_history_data", "raw_code": "", "language": "sql", "package_name": "social_media_rollup_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests", "path": "facebook_pages_post_history_data.csv", "original_file_path": "seeds/facebook_pages_post_history_data.csv", "name": "facebook_pages_post_history_data", "alias": "facebook_pages_post_history_data", "checksum": {"name": "sha256", "checksum": "57986350a754f8e63bccbc791cc0731606c39f42712b77049cffe1fb205827eb"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"id": "{{ 'string' if target.type in ['bigquery', 'spark', 'databricks'] else 'varchar' }}", "promotable_id": "{{ 'string' if target.type in ['bigquery', 'spark', 'databricks'] else 'varchar' }}", "page_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1671477151.346533, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests\".\"facebook_pages_post_history_data\""}, "seed.social_media_rollup_integration_tests.facebook_pages_page_data": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"id": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests", "fqn": ["social_media_rollup_integration_tests", "facebook_pages_page_data"], "unique_id": "seed.social_media_rollup_integration_tests.facebook_pages_page_data", "raw_code": "", "language": "sql", "package_name": "social_media_rollup_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests", "path": "facebook_pages_page_data.csv", "original_file_path": "seeds/facebook_pages_page_data.csv", "name": "facebook_pages_page_data", "alias": "facebook_pages_page_data", "checksum": {"name": "sha256", "checksum": "3dafde942d2d04aee785df26d062f4160bcca40fbfd1103269562acc14db0444"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1671477151.347696, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests\".\"facebook_pages_page_data\""}, "seed.social_media_rollup_integration_tests.twitter_organic_twitter_user_history_data": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests", "fqn": ["social_media_rollup_integration_tests", "twitter_organic_twitter_user_history_data"], "unique_id": "seed.social_media_rollup_integration_tests.twitter_organic_twitter_user_history_data", "raw_code": "", "language": "sql", "package_name": "social_media_rollup_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests", "path": "twitter_organic_twitter_user_history_data.csv", "original_file_path": "seeds/twitter_organic_twitter_user_history_data.csv", "name": "twitter_organic_twitter_user_history_data", "alias": "twitter_organic_twitter_user_history_data", "checksum": {"name": "sha256", "checksum": "c32389157800fc7ca9b7524d7a9e33f6e040ffe3e2ad0028aafd23a2743a6cc2"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1671477151.348809, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests\".\"twitter_organic_twitter_user_history_data\""}, "seed.social_media_rollup_integration_tests.facebook_pages_daily_page_metrics_total_data": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"page_id": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests", "fqn": ["social_media_rollup_integration_tests", "facebook_pages_daily_page_metrics_total_data"], "unique_id": "seed.social_media_rollup_integration_tests.facebook_pages_daily_page_metrics_total_data", "raw_code": "", "language": "sql", "package_name": "social_media_rollup_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests", "path": "facebook_pages_daily_page_metrics_total_data.csv", "original_file_path": "seeds/facebook_pages_daily_page_metrics_total_data.csv", "name": "facebook_pages_daily_page_metrics_total_data", "alias": "facebook_pages_daily_page_metrics_total_data", "checksum": {"name": "sha256", "checksum": "6343a2559cb31a2fda2acbc5f4b5e5459ea08f320bc2e72a6fd19e8bc06949f4"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"page_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1671477151.350006, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests\".\"facebook_pages_daily_page_metrics_total_data\""}, "seed.social_media_rollup_integration_tests.twitter_organic_account_history_data": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests", "fqn": ["social_media_rollup_integration_tests", "twitter_organic_account_history_data"], "unique_id": "seed.social_media_rollup_integration_tests.twitter_organic_account_history_data", "raw_code": "", "language": "sql", "package_name": "social_media_rollup_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests", "path": "twitter_organic_account_history_data.csv", "original_file_path": "seeds/twitter_organic_account_history_data.csv", "name": "twitter_organic_account_history_data", "alias": "twitter_organic_account_history_data", "checksum": {"name": "sha256", "checksum": "296aa06bd4c61881ca43bc796259e4eee115636d69483a30145698daa4cacf08"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1671477151.3515751, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests\".\"twitter_organic_account_history_data\""}, "seed.social_media_rollup_integration_tests.linkedin_pages_ugc_post_share_statistic_data": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ugc_post_id": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests", "fqn": ["social_media_rollup_integration_tests", "linkedin_pages_ugc_post_share_statistic_data"], "unique_id": "seed.social_media_rollup_integration_tests.linkedin_pages_ugc_post_share_statistic_data", "raw_code": "", "language": "sql", "package_name": "social_media_rollup_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests", "path": "linkedin_pages_ugc_post_share_statistic_data.csv", "original_file_path": "seeds/linkedin_pages_ugc_post_share_statistic_data.csv", "name": "linkedin_pages_ugc_post_share_statistic_data", "alias": "linkedin_pages_ugc_post_share_statistic_data", "checksum": {"name": "sha256", "checksum": "0682741d16f4eec07dbe9df6b273ba45b16e03ae31eed0f1fa83ff766d0135e7"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"ugc_post_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}"}}, "created_at": 1671477151.352725, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests\".\"linkedin_pages_ugc_post_share_statistic_data\""}, "model.instagram_business.instagram_business__posts": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.instagram_business_source.stg_instagram_business__media_history", "model.instagram_business_source.stg_instagram_business__media_insights", "model.instagram_business_source.stg_instagram_business__user_history"]}, "config": {"enabled": true, "alias": null, "schema": "instagram_business", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests_instagram_business", "fqn": ["instagram_business", "instagram_business__posts"], "unique_id": "model.instagram_business.instagram_business__posts", "raw_code": "with media_history as (\n\n    select *\n    from {{ var('media_history_staging') }}\n    where is_most_recent_record = true\n\n), media_insights as (\n\n    select *\n    from {{ var('media_insights_staging') }}\n    where is_most_recent_record = true\n\n), user_history as (\n\n    select *\n    from {{ var('user_history_staging') }}\n    where is_most_recent_record = true\n\n), joined as (\n\n    select \n        user_history.account_name,\n        user_history.user_id,\n        media_history.post_caption,\n        media_history.created_timestamp,\n        media_history.post_id,\n        media_history.is_comment_enabled,\n        media_history.is_story,\n        media_history.media_type,\n        media_history.media_url,\n        media_history.post_url,\n        media_history.shortcode,\n        media_history.thumbnail_url,\n        media_history.username,\n        media_insights.carousel_album_engagement,\n        media_insights.carousel_album_impressions,\n        media_insights.carousel_album_reach,\n        media_insights.carousel_album_saved,\n        media_insights.carousel_album_video_views,\n        media_insights.comment_count,\n        media_insights.like_count,\n        media_insights.story_exits,\n        media_insights.story_impressions,\n        media_insights.story_reach,\n        media_insights.story_replies,\n        media_insights.story_taps_back,\n        media_insights.story_taps_forward,\n        media_insights.video_photo_engagement,\n        media_insights.video_photo_impressions,\n        media_insights.video_photo_reach,\n        media_insights.video_photo_saved,\n        media_insights.video_views,\n        media_history.source_relation\n    from media_history\n    left join media_insights\n        on media_history.post_id = media_insights.post_id\n        and media_history.source_relation = media_insights.source_relation\n    left join user_history\n        on media_history.user_id = user_history.user_id\n        and media_history.source_relation = user_history.source_relation\n\n)\n\nselect *\nfrom joined", "language": "sql", "package_name": "instagram_business", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/instagram_business", "path": "instagram_business__posts.sql", "original_file_path": "models/instagram_business__posts.sql", "name": "instagram_business__posts", "alias": "instagram_business__posts", "checksum": {"name": "sha256", "checksum": "5198cc6a2e5d9274149adcbaf281b54776dfb348d2ac2d6d15c63638d96fbf23"}, "tags": [], "refs": [["stg_instagram_business__media_history"], ["stg_instagram_business__media_insights"], ["stg_instagram_business__user_history"]], "sources": [], "metrics": [], "description": "Each record represents the daily performance of a post or story.", "columns": {"account_name": {"name": "account_name", "description": "The name of this user.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "The ID of this user.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_caption": {"name": "post_caption", "description": "The caption of the post or story", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "The timestamp this post or story was created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_id": {"name": "post_id", "description": "The media ID of this post or story", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_comment_enabled": {"name": "is_comment_enabled", "description": "Whether comments are enabled for this post or story", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_story": {"name": "is_story", "description": "Whether this is a story", "meta": {}, "data_type": null, "quote": null, "tags": []}, "media_type": {"name": "media_type", "description": "Media type. Can be CAROUSEL_ALBUM, IMAGE, or VIDEO.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "media_url": {"name": "media_url", "description": "Media URL. Will be omitted from responses if the media contains copyrighted material, or has been flagged for a copyright violation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_url": {"name": "post_url", "description": "Permanent URL to the media.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shortcode": {"name": "shortcode", "description": "Shortcode to the media.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "thumbnail_url": {"name": "thumbnail_url", "description": "Media thumbnail URL. Only available on VIDEO media.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "username": {"name": "username", "description": "Username of user who created the media.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "carousel_album_engagement": {"name": "carousel_album_engagement", "description": "Total number of likes and IG Comments on the album IG Media object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "carousel_album_impressions": {"name": "carousel_album_impressions", "description": "Total number of times the album IG Media object has been seen", "meta": {}, "data_type": null, "quote": null, "tags": []}, "carousel_album_reach": {"name": "carousel_album_reach", "description": "Total number of unique Instagram accounts that have seen the album IG Media object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "carousel_album_saved": {"name": "carousel_album_saved", "description": "Total number of unique Instagram accounts that have saved the album IG Media object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "carousel_album_video_views": {"name": "carousel_album_video_views", "description": "Total number of unique Instagram accounts that have viewed video IG Media within the album.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "comment_count": {"name": "comment_count", "description": "Total number of comments on the IG Media object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "like_count": {"name": "like_count", "description": "Total number of likes on the IG Media object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "story_exits": {"name": "story_exits", "description": "Number of times someone exited the story IG Media object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "story_impressions": {"name": "story_impressions", "description": "Total number of times the story IG Media object has been seen.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "story_reach": {"name": "story_reach", "description": "Total number of unique Instagram accounts that have seen the story IG Media object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "story_replies": {"name": "story_replies", "description": "Total number of replies to the story IG Media object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "story_taps_back": {"name": "story_taps_back", "description": "Total number of taps to see this story IG Media object's next photo or video.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "story_taps_forward": {"name": "story_taps_forward", "description": "Total number of taps to see this story IG Media object's previous photo or video.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_photo_engagement": {"name": "video_photo_engagement", "description": "Total number of likes and IG Comments on the video IG Media object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_photo_impressions": {"name": "video_photo_impressions", "description": "Total number of times the video IG Media object has been seen.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_photo_reach": {"name": "video_photo_reach", "description": "Total number of unique Instagram accounts that have seen the video IG Media object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_photo_saved": {"name": "video_photo_saved", "description": "Total number of unique Instagram accounts that have saved the video IG Media object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views": {"name": "video_views", "description": "Total number of times the video IG Media object has been viewed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record, if the unioning functionality is being used.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "instagram_business://models/instagram_business.yml", "compiled_path": "target/compiled/instagram_business/models/instagram_business__posts.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "instagram_business", "materialized": "table"}, "created_at": 1671477151.8624158, "compiled_code": "with media_history as (\n\n    select *\n    from \"postgres\".\"social_media_rollup_integration_tests_stg_instagram_business\".\"stg_instagram_business__media_history\"\n    where is_most_recent_record = true\n\n), media_insights as (\n\n    select *\n    from \"postgres\".\"social_media_rollup_integration_tests_stg_instagram_business\".\"stg_instagram_business__media_insights\"\n    where is_most_recent_record = true\n\n), user_history as (\n\n    select *\n    from \"postgres\".\"social_media_rollup_integration_tests_stg_instagram_business\".\"stg_instagram_business__user_history\"\n    where is_most_recent_record = true\n\n), joined as (\n\n    select \n        user_history.account_name,\n        user_history.user_id,\n        media_history.post_caption,\n        media_history.created_timestamp,\n        media_history.post_id,\n        media_history.is_comment_enabled,\n        media_history.is_story,\n        media_history.media_type,\n        media_history.media_url,\n        media_history.post_url,\n        media_history.shortcode,\n        media_history.thumbnail_url,\n        media_history.username,\n        media_insights.carousel_album_engagement,\n        media_insights.carousel_album_impressions,\n        media_insights.carousel_album_reach,\n        media_insights.carousel_album_saved,\n        media_insights.carousel_album_video_views,\n        media_insights.comment_count,\n        media_insights.like_count,\n        media_insights.story_exits,\n        media_insights.story_impressions,\n        media_insights.story_reach,\n        media_insights.story_replies,\n        media_insights.story_taps_back,\n        media_insights.story_taps_forward,\n        media_insights.video_photo_engagement,\n        media_insights.video_photo_impressions,\n        media_insights.video_photo_reach,\n        media_insights.video_photo_saved,\n        media_insights.video_views,\n        media_history.source_relation\n    from media_history\n    left join media_insights\n        on media_history.post_id = media_insights.post_id\n        and media_history.source_relation = media_insights.source_relation\n    left join user_history\n        on media_history.user_id = user_history.user_id\n        and media_history.source_relation = user_history.source_relation\n\n)\n\nselect *\nfrom joined", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests_instagram_business\".\"instagram_business__posts\""}, "model.twitter_organic.twitter_organic__tweets": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.twitter_organic.int_twitter_organic__latest_account", "model.twitter_organic_source.stg_twitter_organic__organic_tweet_report", "model.twitter_organic_source.stg_twitter_organic__tweet", "model.twitter_organic.int_twitter_organic__latest_user"]}, "config": {"enabled": true, "alias": null, "schema": "twitter_organic", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests_twitter_organic", "fqn": ["twitter_organic", "twitter_organic__tweets"], "unique_id": "model.twitter_organic.twitter_organic__tweets", "raw_code": "with account_history as (\n\n    select *\n    from {{ ref('int_twitter_organic__latest_account') }}\n    where is_most_recent_record = True\n\n),\n\norganic_tweet_report as (\n\n    select *\n    from {{ var('organic_tweet_report_staging') }}\n\n),\n\ntweet as (\n\n    select *\n    from {{ var('tweet_staging') }}\n\n), \n\nusers as (\n\n    select *\n    from {{ ref('int_twitter_organic__latest_user') }}\n    where is_most_recent_record = True\n\n),\n\njoined as (\n\n    select\n        organic_tweet_report.date_day,\n        tweet.organic_tweet_id,\n        tweet.created_timestamp,\n        tweet.tweet_text,\n        tweet.account_id,\n        tweet.post_url,\n        account_history.account_name,\n        users.user_id,\n        users.user_name,\n        tweet.source_relation,\n        sum(organic_tweet_report.app_clicks) as app_clicks,\n        sum(organic_tweet_report.card_engagements) as card_engagements,\n        sum(organic_tweet_report.carousel_swipes) as carousel_swipes,\n        sum(organic_tweet_report.clicks) as clicks,\n        sum(organic_tweet_report.engagements) as engagements,\n        sum(organic_tweet_report.follows) as follows,\n        sum(organic_tweet_report.impressions) as impressions,\n        sum(organic_tweet_report.likes) as likes,\n        sum(organic_tweet_report.poll_card_vote) as poll_card_vote,\n        sum(organic_tweet_report.qualified_impressions) as qualified_impressions,\n        sum(organic_tweet_report.replies) as replies,\n        sum(organic_tweet_report.retweets) as retweets,\n        sum(organic_tweet_report.unfollows) as unfollows,\n        sum(organic_tweet_report.url_clicks) as url_clicks,\n        sum(organic_tweet_report.video_15_s_views) as video_15_s_views,\n        sum(organic_tweet_report.video_3_s_100_pct_views) as video_3_s_100_pct_views,\n        sum(organic_tweet_report.video_6_s_views) as video_6_s_views,\n        sum(organic_tweet_report.video_content_starts) as video_content_starts,\n        sum(organic_tweet_report.video_cta_clicks) as video_cta_clicks,\n        sum(organic_tweet_report.video_total_views) as video_total_views,\n        sum(organic_tweet_report.video_views_100) as video_views_100,\n        sum(organic_tweet_report.video_views_25) as video_views_25,\n        sum(organic_tweet_report.video_views_50) as video_views_50,\n        sum(organic_tweet_report.video_views_75) as video_views_75\n    from tweet\n    left join account_history\n        on tweet.account_id = account_history.account_id\n        and tweet.source_relation = account_history.source_relation\n    left join organic_tweet_report\n        on tweet.organic_tweet_id = organic_tweet_report.organic_tweet_id\n        and tweet.source_relation = organic_tweet_report.source_relation\n    left join users\n        on tweet.user_id = users.user_id\n        and tweet.source_relation = users.source_relation\n    {{ dbt_utils.group_by(10) }}\n\n)\n\nselect *\nfrom joined", "language": "sql", "package_name": "twitter_organic", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/twitter_organic", "path": "twitter_organic__tweets.sql", "original_file_path": "models/twitter_organic__tweets.sql", "name": "twitter_organic__tweets", "alias": "twitter_organic__tweets", "checksum": {"name": "sha256", "checksum": "5c395728fea02e15bc9920c26d8cc8d0ccb60e08824f89c99c0e1b3e7f9720a5"}, "tags": [], "refs": [["int_twitter_organic__latest_account"], ["stg_twitter_organic__organic_tweet_report"], ["stg_twitter_organic__tweet"], ["int_twitter_organic__latest_user"]], "sources": [], "metrics": [], "description": "Each record represents the daily performance of a tweet.", "columns": {"created_timestamp": {"name": "created_timestamp", "description": "Date and time when the tweet was created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organic_tweet_id": {"name": "organic_tweet_id", "description": "The unique ID of the tweet", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tweet_text": {"name": "tweet_text", "description": "The full text of the tweet", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "ID of the associated account in Twitter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_url": {"name": "post_url", "description": "URL of the tweet", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "Name of the account in Twitter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "The ID of the user in Twitter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_name": {"name": "user_name", "description": "The name of the user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "Date of the report", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record, if the unioning functionality is being used.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "app_clicks": {"name": "app_clicks", "description": "Number of clicks on app install campaigns", "meta": {}, "data_type": null, "quote": null, "tags": []}, "card_engagements": {"name": "card_engagements", "description": "Number of engagements on cards", "meta": {}, "data_type": null, "quote": null, "tags": []}, "carousel_swipes": {"name": "carousel_swipes", "description": "Number of swipes on carousels", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "Number of clicks on tweet", "meta": {}, "data_type": null, "quote": null, "tags": []}, "engagements": {"name": "engagements", "description": "Number of engagements on tweet", "meta": {}, "data_type": null, "quote": null, "tags": []}, "follows": {"name": "follows", "description": "Number of follows as a result of the tweet", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "Number of impressions on tweet", "meta": {}, "data_type": null, "quote": null, "tags": []}, "likes": {"name": "likes", "description": "Number of likes on tweet", "meta": {}, "data_type": null, "quote": null, "tags": []}, "poll_card_vote": {"name": "poll_card_vote", "description": "Number of votes on poll cards", "meta": {}, "data_type": null, "quote": null, "tags": []}, "qualified_impressions": {"name": "qualified_impressions", "description": "Number of qualified impressions on tweet", "meta": {}, "data_type": null, "quote": null, "tags": []}, "replies": {"name": "replies", "description": "Number of replies on tweet", "meta": {}, "data_type": null, "quote": null, "tags": []}, "retweets": {"name": "retweets", "description": "Number of retweets on tweet", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unfollows": {"name": "unfollows", "description": "Number of unfollows as a result of the tweet", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_clicks": {"name": "url_clicks", "description": "Number of clicks on URLs in tweet", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_15_s_views": {"name": "video_15_s_views", "description": "Number of 15-second views on video", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_3_s_100_pct_views": {"name": "video_3_s_100_pct_views", "description": "Total number of views where at least 3 seconds were played while 100% in view.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_6_s_views": {"name": "video_6_s_views", "description": "Number of 6-second views on video", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_content_starts": {"name": "video_content_starts", "description": "Number of times the video content started", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_cta_clicks": {"name": "video_cta_clicks", "description": "Number of clicks on tweet call-to-actions", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_total_views": {"name": "video_total_views", "description": "Total number of views on video", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_100": {"name": "video_views_100", "description": "Total number of views where at least 100% of the video was viewed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_25": {"name": "video_views_25", "description": "Total number of views where at least 25% of the video was viewed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_50": {"name": "video_views_50", "description": "Total number of views where at least 50% of the video was viewed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_75": {"name": "video_views_75", "description": "Total number of views where at least 75% of the video was viewed.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "twitter_organic://models/twitter_organic.yml", "compiled_path": "target/compiled/twitter_organic/models/twitter_organic__tweets.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "twitter_organic", "materialized": "table"}, "created_at": 1671477151.881788, "compiled_code": "with account_history as (\n\n    select *\n    from \"postgres\".\"social_media_rollup_integration_tests_twitter_organic\".\"int_twitter_organic__latest_account\"\n    where is_most_recent_record = True\n\n),\n\norganic_tweet_report as (\n\n    select *\n    from \"postgres\".\"social_media_rollup_integration_tests_stg_twitter_organic\".\"stg_twitter_organic__organic_tweet_report\"\n\n),\n\ntweet as (\n\n    select *\n    from \"postgres\".\"social_media_rollup_integration_tests_stg_twitter_organic\".\"stg_twitter_organic__tweet\"\n\n), \n\nusers as (\n\n    select *\n    from \"postgres\".\"social_media_rollup_integration_tests_twitter_organic\".\"int_twitter_organic__latest_user\"\n    where is_most_recent_record = True\n\n),\n\njoined as (\n\n    select\n        organic_tweet_report.date_day,\n        tweet.organic_tweet_id,\n        tweet.created_timestamp,\n        tweet.tweet_text,\n        tweet.account_id,\n        tweet.post_url,\n        account_history.account_name,\n        users.user_id,\n        users.user_name,\n        tweet.source_relation,\n        sum(organic_tweet_report.app_clicks) as app_clicks,\n        sum(organic_tweet_report.card_engagements) as card_engagements,\n        sum(organic_tweet_report.carousel_swipes) as carousel_swipes,\n        sum(organic_tweet_report.clicks) as clicks,\n        sum(organic_tweet_report.engagements) as engagements,\n        sum(organic_tweet_report.follows) as follows,\n        sum(organic_tweet_report.impressions) as impressions,\n        sum(organic_tweet_report.likes) as likes,\n        sum(organic_tweet_report.poll_card_vote) as poll_card_vote,\n        sum(organic_tweet_report.qualified_impressions) as qualified_impressions,\n        sum(organic_tweet_report.replies) as replies,\n        sum(organic_tweet_report.retweets) as retweets,\n        sum(organic_tweet_report.unfollows) as unfollows,\n        sum(organic_tweet_report.url_clicks) as url_clicks,\n        sum(organic_tweet_report.video_15_s_views) as video_15_s_views,\n        sum(organic_tweet_report.video_3_s_100_pct_views) as video_3_s_100_pct_views,\n        sum(organic_tweet_report.video_6_s_views) as video_6_s_views,\n        sum(organic_tweet_report.video_content_starts) as video_content_starts,\n        sum(organic_tweet_report.video_cta_clicks) as video_cta_clicks,\n        sum(organic_tweet_report.video_total_views) as video_total_views,\n        sum(organic_tweet_report.video_views_100) as video_views_100,\n        sum(organic_tweet_report.video_views_25) as video_views_25,\n        sum(organic_tweet_report.video_views_50) as video_views_50,\n        sum(organic_tweet_report.video_views_75) as video_views_75\n    from tweet\n    left join account_history\n        on tweet.account_id = account_history.account_id\n        and tweet.source_relation = account_history.source_relation\n    left join organic_tweet_report\n        on tweet.organic_tweet_id = organic_tweet_report.organic_tweet_id\n        and tweet.source_relation = organic_tweet_report.source_relation\n    left join users\n        on tweet.user_id = users.user_id\n        and tweet.source_relation = users.source_relation\n    group by 1,2,3,4,5,6,7,8,9,10\n\n)\n\nselect *\nfrom joined", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests_twitter_organic\".\"twitter_organic__tweets\""}, "model.twitter_organic.int_twitter_organic__latest_account": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.twitter_organic_source.stg_twitter_organic__account_history"]}, "config": {"enabled": true, "alias": null, "schema": "twitter_organic", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests_twitter_organic", "fqn": ["twitter_organic", "intermediate", "int_twitter_organic__latest_account"], "unique_id": "model.twitter_organic.int_twitter_organic__latest_account", "raw_code": "with accounts as (\n\n    select *\n    from {{ var('account_history_staging') }}\n\n), is_most_recent as (\n\n    select \n        *,\n        row_number() over (partition by account_id, source_relation order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from accounts\n\n)\n\nselect *\nfrom is_most_recent", "language": "sql", "package_name": "twitter_organic", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/twitter_organic", "path": "intermediate/int_twitter_organic__latest_account.sql", "original_file_path": "models/intermediate/int_twitter_organic__latest_account.sql", "name": "int_twitter_organic__latest_account", "alias": "int_twitter_organic__latest_account", "checksum": {"name": "sha256", "checksum": "bf2aaaac5de067ee1ce0204d96425efd532d1252996d797a1e6e0ac4eef102ad"}, "tags": [], "refs": [["stg_twitter_organic__account_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/twitter_organic/models/intermediate/int_twitter_organic__latest_account.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "twitter_organic", "materialized": "table"}, "created_at": 1671477151.3868601, "compiled_code": "with accounts as (\n\n    select *\n    from \"postgres\".\"social_media_rollup_integration_tests_stg_twitter_organic\".\"stg_twitter_organic__account_history\"\n\n), is_most_recent as (\n\n    select \n        *,\n        row_number() over (partition by account_id, source_relation order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from accounts\n\n)\n\nselect *\nfrom is_most_recent", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests_twitter_organic\".\"int_twitter_organic__latest_account\""}, "model.twitter_organic.int_twitter_organic__latest_user": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.twitter_organic_source.stg_twitter_organic__twitter_user_history"]}, "config": {"enabled": true, "alias": null, "schema": "twitter_organic", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests_twitter_organic", "fqn": ["twitter_organic", "intermediate", "int_twitter_organic__latest_user"], "unique_id": "model.twitter_organic.int_twitter_organic__latest_user", "raw_code": "with users as (\n\n    select *\n    from {{ var('users_staging') }}\n\n), is_most_recent as (\n\n    select \n        *,\n        row_number() over (partition by user_id, source_relation order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from users\n\n)\n\nselect *\nfrom is_most_recent", "language": "sql", "package_name": "twitter_organic", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/twitter_organic", "path": "intermediate/int_twitter_organic__latest_user.sql", "original_file_path": "models/intermediate/int_twitter_organic__latest_user.sql", "name": "int_twitter_organic__latest_user", "alias": "int_twitter_organic__latest_user", "checksum": {"name": "sha256", "checksum": "7386232ade0ac5952f2204aa4313774526fcaf35e9e338e4830a3d327e823828"}, "tags": [], "refs": [["stg_twitter_organic__twitter_user_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/twitter_organic/models/intermediate/int_twitter_organic__latest_user.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "twitter_organic", "materialized": "table"}, "created_at": 1671477151.389908, "compiled_code": "with users as (\n\n    select *\n    from \"postgres\".\"social_media_rollup_integration_tests_stg_twitter_organic\".\"stg_twitter_organic__twitter_user_history\"\n\n), is_most_recent as (\n\n    select \n        *,\n        row_number() over (partition by user_id, source_relation order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from users\n\n)\n\nselect *\nfrom is_most_recent", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests_twitter_organic\".\"int_twitter_organic__latest_user\""}, "model.linkedin_pages_source.stg_linkedin_pages__share_statistic": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.linkedin_pages_source.get_share_statistic_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation"], "nodes": ["model.linkedin_pages_source.stg_linkedin_pages__share_statistic_tmp", "model.linkedin_pages_source.stg_linkedin_pages__share_statistic_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_linkedin_pages", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests_stg_linkedin_pages", "fqn": ["linkedin_pages_source", "stg_linkedin_pages__share_statistic"], "unique_id": "model.linkedin_pages_source.stg_linkedin_pages__share_statistic", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_linkedin_pages__share_statistic_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_linkedin_pages__share_statistic_tmp')),\n                staging_columns=get_share_statistic_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='linkedin_pages_union_schemas', \n            union_database_variable='linkedin_pages_union_databases') \n        }}\n    \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_id as share_statistic_id,\n        _fivetran_synced,\n        _organization_entity_urn as organization_entity_urn,\n        _share_entity_urn as share_entity_urn,\n        click_count,\n        comment_count,\n        engagement,\n        impression_count,\n        like_count,\n        share_count,\n        source_relation\n    from fields\n)\n\nselect * from final", "language": "sql", "package_name": "linkedin_pages_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/linkedin_pages_source", "path": "stg_linkedin_pages__share_statistic.sql", "original_file_path": "models/stg_linkedin_pages__share_statistic.sql", "name": "stg_linkedin_pages__share_statistic", "alias": "stg_linkedin_pages__share_statistic", "checksum": {"name": "sha256", "checksum": "16898a44f4f3f9dc737f9f6d64ef038741703de06f67cf14dc22b8d8ece0cf8d"}, "tags": [], "refs": [["stg_linkedin_pages__share_statistic_tmp"], ["stg_linkedin_pages__share_statistic_tmp"]], "sources": [], "metrics": [], "description": "Each record represents the performance of a Linkedin share.", "columns": {"share_statistic_id": {"name": "share_statistic_id", "description": "The Fivetran ID of the record", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The timestamp of when the record was last synced by Fivetran", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organization_entity_urn": {"name": "organization_entity_urn", "description": "The organizational entity URN for which the statistics represents.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "share_entity_urn": {"name": "share_entity_urn", "description": "The share URN for describing individual share statistics. Is blank for aggregate share statistics.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "click_count": {"name": "click_count", "description": "Number of clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "comment_count": {"name": "comment_count", "description": "Number of comments.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "engagement": {"name": "engagement", "description": "Number of organic clicks, likes, comments, and shares over impressions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impression_count": {"name": "impression_count", "description": "Number of impressions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "like_count": {"name": "like_count", "description": "Number of likes. This field can become negative when members who liked a sponsored share later unlike it. The like is not counted since it is not organic, but the unlike is counted as organic.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "share_count": {"name": "share_count", "description": "Number of shares.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record, if the unioning functionality is being used.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "linkedin_pages_source://models/stg_linkedin_pages.yml", "compiled_path": "target/compiled/linkedin_pages_source/models/stg_linkedin_pages__share_statistic.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_linkedin_pages", "materialized": "table"}, "created_at": 1671477151.912589, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"social_media_rollup_integration_tests_stg_linkedin_pages\".\"stg_linkedin_pages__share_statistic_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_id\n    \n as \n    \n    _fivetran_id\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _organization_entity_urn\n    \n as \n    \n    _organization_entity_urn\n    \n, \n    \n    \n    _share_entity_urn\n    \n as \n    \n    _share_entity_urn\n    \n, \n    \n    \n    click_count\n    \n as \n    \n    click_count\n    \n, \n    \n    \n    comment_count\n    \n as \n    \n    comment_count\n    \n, \n    \n    \n    engagement\n    \n as \n    \n    engagement\n    \n, \n    \n    \n    impression_count\n    \n as \n    \n    impression_count\n    \n, \n    \n    \n    like_count\n    \n as \n    \n    like_count\n    \n, \n    \n    \n    share_count\n    \n as \n    \n    share_count\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n    \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_id as share_statistic_id,\n        _fivetran_synced,\n        _organization_entity_urn as organization_entity_urn,\n        _share_entity_urn as share_entity_urn,\n        click_count,\n        comment_count,\n        engagement,\n        impression_count,\n        like_count,\n        share_count,\n        source_relation\n    from fields\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests_stg_linkedin_pages\".\"stg_linkedin_pages__share_statistic\""}, "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_content_media": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.linkedin_pages_source.get_ugc_post_share_content_media_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation"], "nodes": ["model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_media_tmp", "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_media_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_linkedin_pages", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests_stg_linkedin_pages", "fqn": ["linkedin_pages_source", "stg_linkedin_pages__ugc_post_share_content_media"], "unique_id": "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_content_media", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_linkedin_pages__ugc_post_share_media_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_linkedin_pages__ugc_post_share_media_tmp')),\n                staging_columns=get_ugc_post_share_content_media_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='linkedin_pages_union_schemas', \n            union_database_variable='linkedin_pages_union_databases') \n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        description_attributes,\n        description_inferred_locale,\n        description_text,\n        landing_page_title,\n        landing_page_url,\n        last_modified_time as last_modified_timestamp,\n        media,\n        original_url,\n        status,\n        thumbnails,\n        title_attributes,\n        title_inferred_locale,\n        title_text,\n        ugc_post_id,\n        source_relation\n    from fields\n)\n\nselect * from final", "language": "sql", "package_name": "linkedin_pages_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/linkedin_pages_source", "path": "stg_linkedin_pages__ugc_post_share_content_media.sql", "original_file_path": "models/stg_linkedin_pages__ugc_post_share_content_media.sql", "name": "stg_linkedin_pages__ugc_post_share_content_media", "alias": "stg_linkedin_pages__ugc_post_share_content_media", "checksum": {"name": "sha256", "checksum": "9cb6ba17713dd14430348707a99ea06a3f958cd79c9d799365b170f40949c846"}, "tags": [], "refs": [["stg_linkedin_pages__ugc_post_share_media_tmp"], ["stg_linkedin_pages__ugc_post_share_media_tmp"]], "sources": [], "metrics": [], "description": "Each record represents content media shared as part of a UGC post.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The timestamp of when the record was last synced by Fivetran", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description_attributes": {"name": "description_attributes", "description": "User generated attributes in the text.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description_inferred_locale": {"name": "description_inferred_locale", "description": "The locale that may have be inferred for this text.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description_text": {"name": "description_text", "description": "The text content that may be attributed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "landing_page_title": {"name": "landing_page_title", "description": "If present, this content entity will be rendered as a CTA with landingPageTitle as the CTA text and landingPageUrl as the click through url.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "landing_page_url": {"name": "landing_page_url", "description": "The click through url. Maximum length is 2000 characters.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_modified_timestamp": {"name": "last_modified_timestamp", "description": "The timestamp when the content was last modified.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "media": {"name": "media", "description": "The URN of the media shared.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "original_url": {"name": "original_url", "description": "URL whose content is summarized", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the availability of this media.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "thumbnails": {"name": "thumbnails", "description": "The thumbnail saved from the ingestion of this article.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title_attributes": {"name": "title_attributes", "description": "User generated attributes in the text.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title_inferred_locale": {"name": "title_inferred_locale", "description": "The locale that may have be inferred for this text.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title_text": {"name": "title_text", "description": "The text content that may be attributed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ugc_post_id": {"name": "ugc_post_id", "description": "The ID of the UGC post record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record, if the unioning functionality is being used.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "linkedin_pages_source://models/stg_linkedin_pages.yml", "compiled_path": "target/compiled/linkedin_pages_source/models/stg_linkedin_pages__ugc_post_share_content_media.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_linkedin_pages", "materialized": "table"}, "created_at": 1671477151.918032, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"social_media_rollup_integration_tests_stg_linkedin_pages\".\"stg_linkedin_pages__ugc_post_share_media_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    description_attributes\n    \n as \n    \n    description_attributes\n    \n, \n    \n    \n    description_inferred_locale\n    \n as \n    \n    description_inferred_locale\n    \n, \n    \n    \n    description_text\n    \n as \n    \n    description_text\n    \n, \n    \n    \n    landing_page_title\n    \n as \n    \n    landing_page_title\n    \n, \n    \n    \n    landing_page_url\n    \n as \n    \n    landing_page_url\n    \n, \n    \n    \n    last_modified_time\n    \n as \n    \n    last_modified_time\n    \n, \n    \n    \n    media\n    \n as \n    \n    media\n    \n, \n    \n    \n    original_url\n    \n as \n    \n    original_url\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    thumbnails\n    \n as \n    \n    thumbnails\n    \n, \n    \n    \n    title_attributes\n    \n as \n    \n    title_attributes\n    \n, \n    \n    \n    title_inferred_locale\n    \n as \n    \n    title_inferred_locale\n    \n, \n    \n    \n    title_text\n    \n as \n    \n    title_text\n    \n, \n    \n    \n    ugc_post_id\n    \n as \n    \n    ugc_post_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        description_attributes,\n        description_inferred_locale,\n        description_text,\n        landing_page_title,\n        landing_page_url,\n        last_modified_time as last_modified_timestamp,\n        media,\n        original_url,\n        status,\n        thumbnails,\n        title_attributes,\n        title_inferred_locale,\n        title_text,\n        ugc_post_id,\n        source_relation\n    from fields\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests_stg_linkedin_pages\".\"stg_linkedin_pages__ugc_post_share_content_media\""}, "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_history": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.linkedin_pages_source.get_ugc_post_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.concat"], "nodes": ["model.linkedin_pages_source.stg_linkedin_pages__ugc_post_history_tmp", "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_linkedin_pages", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests_stg_linkedin_pages", "fqn": ["linkedin_pages_source", "stg_linkedin_pages__ugc_post_history"], "unique_id": "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_history", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_linkedin_pages__ugc_post_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_linkedin_pages__ugc_post_history_tmp')),\n                staging_columns=get_ugc_post_history_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='linkedin_pages_union_schemas', \n            union_database_variable='linkedin_pages_union_databases') \n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        author as post_author,\n        created_actor,\n        created_time as created_timestamp,\n        deleted_actor,\n        deleted_time as deleted_timestamp,\n        first_published_at as first_published_timestamp,\n        case when lower(id) like '%urn:li:share:%' \n                then replace(id, 'urn:li:share:', '')\n            when lower(id) like '%urn:li:ugcpost:%'\n                then replace(lower(id), 'urn:li:ugcpost:', '')\n            else id end as ugc_post_id,\n        id as ugc_post_urn,\n        -- This generates an 'embed' URL. I can't get normal URLs working.\n        {{ dbt.concat([\"'https://www.linkedin.com/embed/feed/update/'\", \"id\"]) }} as post_url,\n        last_modified_actor,\n        last_modified_time as last_modified_timestamp,\n        lifecycle_state,\n        specific_content_primary_landing_page_url,\n        specific_content_share_commentary_attributes,\n        specific_content_share_commentary_inferred_locale,\n        specific_content_share_commentary_text,\n        specific_content_share_media_category,\n        target_audience_targeted_entities,\n        version_tag,\n        visibility,\n        source_relation\n    from fields\n)\n\nselect * from final", "language": "sql", "package_name": "linkedin_pages_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/linkedin_pages_source", "path": "stg_linkedin_pages__ugc_post_history.sql", "original_file_path": "models/stg_linkedin_pages__ugc_post_history.sql", "name": "stg_linkedin_pages__ugc_post_history", "alias": "stg_linkedin_pages__ugc_post_history", "checksum": {"name": "sha256", "checksum": "f72c756502a06601c80677e43edc18c138f4f40a79fa4bb5e1b09d53513aa016"}, "tags": [], "refs": [["stg_linkedin_pages__ugc_post_history_tmp"], ["stg_linkedin_pages__ugc_post_history_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a version of a UGC post.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The timestamp of when the record was last synced by Fivetran", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_author": {"name": "post_author", "description": "Urn of the author of this content.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_actor": {"name": "created_actor", "description": "User who created the content.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "Timestamp when the content was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deleted_actor": {"name": "deleted_actor", "description": "User who deleted the content.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deleted_timestamp": {"name": "deleted_timestamp", "description": "Timestamp when the content was deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_published_timestamp": {"name": "first_published_timestamp", "description": "The time at which this content was first published.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ugc_post_id": {"name": "ugc_post_id", "description": "Unique id for this object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_modified_actor": {"name": "last_modified_actor", "description": "User who last modified the content.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_modified_timestamp": {"name": "last_modified_timestamp", "description": "Timestamp when the content was last modified.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_url": {"name": "post_url", "description": "Url of the post.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lifecycle_state": {"name": "lifecycle_state", "description": "The current state of the content.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "specific_content_primary_landing_page_url": {"name": "specific_content_primary_landing_page_url", "description": "The main landing page URL of the share.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "specific_content_share_commentary_attributes": {"name": "specific_content_share_commentary_attributes", "description": "User generated attributes in the text.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "specific_content_share_commentary_inferred_locale": {"name": "specific_content_share_commentary_inferred_locale", "description": "The locale that may have be inferred for this text.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "specific_content_share_commentary_text": {"name": "specific_content_share_commentary_text", "description": "The text content that may be attributed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "specific_content_share_media_category": {"name": "specific_content_share_media_category", "description": "The type of media contained within the media field of this object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target_audience_targeted_entities": {"name": "target_audience_targeted_entities", "description": "Intended audience or best fit audiences for this content as decided by the owner.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "version_tag": {"name": "version_tag", "description": "Version tag of the entity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "visibility": {"name": "visibility", "description": "Visibility restrictions on content.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record, if the unioning functionality is being used.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "linkedin_pages_source://models/stg_linkedin_pages.yml", "compiled_path": "target/compiled/linkedin_pages_source/models/stg_linkedin_pages__ugc_post_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_linkedin_pages", "materialized": "table"}, "created_at": 1671477151.915648, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"social_media_rollup_integration_tests_stg_linkedin_pages\".\"stg_linkedin_pages__ugc_post_history_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    author\n    \n as \n    \n    author\n    \n, \n    \n    \n    client_application\n    \n as \n    \n    client_application\n    \n, \n    \n    \n    container_entity\n    \n as \n    \n    container_entity\n    \n, \n    \n    \n    content_certification_record\n    \n as \n    \n    content_certification_record\n    \n, \n    \n    \n    created_actor\n    \n as \n    \n    created_actor\n    \n, \n    \n    \n    created_time\n    \n as \n    \n    created_time\n    \n, \n    \n    \n    deleted_actor\n    \n as \n    \n    deleted_actor\n    \n, \n    \n    \n    deleted_time\n    \n as \n    \n    deleted_time\n    \n, \n    \n    \n    distribution_distributed_via_follow_feed\n    \n as \n    \n    distribution_distributed_via_follow_feed\n    \n, \n    \n    \n    distribution_external_distribution_channels\n    \n as \n    \n    distribution_external_distribution_channels\n    \n, \n    \n    \n    distribution_feed_distribution\n    \n as \n    \n    distribution_feed_distribution\n    \n, \n    \n    \n    first_published_at\n    \n as \n    \n    first_published_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    last_modified_actor\n    \n as \n    \n    last_modified_actor\n    \n, \n    \n    \n    last_modified_time\n    \n as \n    \n    last_modified_time\n    \n, \n    \n    \n    lifecycle_state\n    \n as \n    \n    lifecycle_state\n    \n, \n    \n    \n    response_context_parent\n    \n as \n    \n    response_context_parent\n    \n, \n    \n    \n    response_context_root\n    \n as \n    \n    response_context_root\n    \n, \n    \n    \n    specific_content_primary_landing_page_url\n    \n as \n    \n    specific_content_primary_landing_page_url\n    \n, \n    \n    \n    specific_content_share_commentary_attributes\n    \n as \n    \n    specific_content_share_commentary_attributes\n    \n, \n    \n    \n    specific_content_share_commentary_inferred_locale\n    \n as \n    \n    specific_content_share_commentary_inferred_locale\n    \n, \n    \n    \n    specific_content_share_commentary_text\n    \n as \n    \n    specific_content_share_commentary_text\n    \n, \n    \n    \n    specific_content_share_media_category\n    \n as \n    \n    specific_content_share_media_category\n    \n, \n    \n    \n    target_audience_targeted_entities\n    \n as \n    \n    target_audience_targeted_entities\n    \n, \n    \n    \n    version_tag\n    \n as \n    \n    version_tag\n    \n, \n    \n    \n    visibility\n    \n as \n    \n    visibility\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        author as post_author,\n        created_actor,\n        created_time as created_timestamp,\n        deleted_actor,\n        deleted_time as deleted_timestamp,\n        first_published_at as first_published_timestamp,\n        case when lower(id) like '%urn:li:share:%' \n                then replace(id, 'urn:li:share:', '')\n            when lower(id) like '%urn:li:ugcpost:%'\n                then replace(lower(id), 'urn:li:ugcpost:', '')\n            else id end as ugc_post_id,\n        id as ugc_post_urn,\n        -- This generates an 'embed' URL. I can't get normal URLs working.\n        'https://www.linkedin.com/embed/feed/update/' || id as post_url,\n        last_modified_actor,\n        last_modified_time as last_modified_timestamp,\n        lifecycle_state,\n        specific_content_primary_landing_page_url,\n        specific_content_share_commentary_attributes,\n        specific_content_share_commentary_inferred_locale,\n        specific_content_share_commentary_text,\n        specific_content_share_media_category,\n        target_audience_targeted_entities,\n        version_tag,\n        visibility,\n        source_relation\n    from fields\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests_stg_linkedin_pages\".\"stg_linkedin_pages__ugc_post_history\""}, "model.linkedin_pages_source.stg_linkedin_pages__organization": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.linkedin_pages_source.get_organization_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation"], "nodes": ["model.linkedin_pages_source.stg_linkedin_pages__organization_tmp", "model.linkedin_pages_source.stg_linkedin_pages__organization_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_linkedin_pages", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests_stg_linkedin_pages", "fqn": ["linkedin_pages_source", "stg_linkedin_pages__organization"], "unique_id": "model.linkedin_pages_source.stg_linkedin_pages__organization", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_linkedin_pages__organization_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_linkedin_pages__organization_tmp')),\n                staging_columns=get_organization_columns()\n            )\n        }}\n        \n        {{ fivetran_utils.source_relation(\n            union_schema_variable='linkedin_pages_union_schemas', \n            union_database_variable='linkedin_pages_union_databases') \n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as organization_id,\n        localized_name as organization_name,\n        source_relation\n    from fields\n)\n\nselect * from final", "language": "sql", "package_name": "linkedin_pages_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/linkedin_pages_source", "path": "stg_linkedin_pages__organization.sql", "original_file_path": "models/stg_linkedin_pages__organization.sql", "name": "stg_linkedin_pages__organization", "alias": "stg_linkedin_pages__organization", "checksum": {"name": "sha256", "checksum": "3b6ee9e35cd1f43fe9b6cc47b4ec25a758bcdfbdb6513f6cac2f80bd20e8e3b2"}, "tags": [], "refs": [["stg_linkedin_pages__organization_tmp"], ["stg_linkedin_pages__organization_tmp"]], "sources": [], "metrics": [], "description": "Each record represents an organization.", "columns": {"organization_id": {"name": "organization_id", "description": "Unique id for the organization", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name_localized": {"name": "name_localized", "description": "The localized name of the organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name_preferred_locale_country": {"name": "name_preferred_locale_country", "description": "The preferred country of the organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name_preferred_locale_language": {"name": "name_preferred_locale_language", "description": "The preferred language of the organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record, if the unioning functionality is being used.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "linkedin_pages_source://models/stg_linkedin_pages.yml", "compiled_path": "target/compiled/linkedin_pages_source/models/stg_linkedin_pages__organization.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_linkedin_pages", "materialized": "table"}, "created_at": 1671477151.910767, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"social_media_rollup_integration_tests_stg_linkedin_pages\".\"stg_linkedin_pages__organization_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    cover_photo_v_2_crop_info_height\n    \n as \n    \n    cover_photo_v_2_crop_info_height\n    \n, \n    \n    \n    cover_photo_v_2_crop_info_width\n    \n as \n    \n    cover_photo_v_2_crop_info_width\n    \n, \n    \n    \n    cover_photo_v_2_crop_info_x\n    \n as \n    \n    cover_photo_v_2_crop_info_x\n    \n, \n    \n    \n    cover_photo_v_2_crop_info_y\n    \n as \n    \n    cover_photo_v_2_crop_info_y\n    \n, \n    \n    \n    cover_photo_v_2_cropped\n    \n as \n    \n    cover_photo_v_2_cropped\n    \n, \n    \n    \n    cover_photo_v_2_original\n    \n as \n    \n    cover_photo_v_2_original\n    \n, \n    \n    \n    default_locale_country\n    \n as \n    \n    default_locale_country\n    \n, \n    \n    \n    default_locale_language\n    \n as \n    \n    default_locale_language\n    \n, \n    \n    \n    description_localized\n    \n as \n    \n    description_localized\n    \n, \n    \n    \n    description_preferred_locale_country\n    \n as \n    \n    description_preferred_locale_country\n    \n, \n    \n    \n    description_preferred_locale_language\n    \n as \n    \n    description_preferred_locale_language\n    \n, \n    \n    \n    founded_on_day\n    \n as \n    \n    founded_on_day\n    \n, \n    \n    \n    founded_on_month\n    \n as \n    \n    founded_on_month\n    \n, \n    \n    \n    founded_on_year\n    \n as \n    \n    founded_on_year\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    localized_description\n    \n as \n    \n    localized_description\n    \n, \n    \n    \n    localized_name\n    \n as \n    \n    localized_name\n    \n, \n    \n    \n    localized_website\n    \n as \n    \n    localized_website\n    \n, \n    \n    \n    logo_v_2_crop_info_height\n    \n as \n    \n    logo_v_2_crop_info_height\n    \n, \n    \n    \n    logo_v_2_crop_info_width\n    \n as \n    \n    logo_v_2_crop_info_width\n    \n, \n    \n    \n    logo_v_2_crop_info_x\n    \n as \n    \n    logo_v_2_crop_info_x\n    \n, \n    \n    \n    logo_v_2_crop_info_y\n    \n as \n    \n    logo_v_2_crop_info_y\n    \n, \n    \n    \n    logo_v_2_cropped\n    \n as \n    \n    logo_v_2_cropped\n    \n, \n    \n    \n    logo_v_2_original\n    \n as \n    \n    logo_v_2_original\n    \n, \n    \n    \n    name_localized\n    \n as \n    \n    name_localized\n    \n, \n    \n    \n    name_preferred_locale_country\n    \n as \n    \n    name_preferred_locale_country\n    \n, \n    \n    \n    name_preferred_locale_language\n    \n as \n    \n    name_preferred_locale_language\n    \n, \n    \n    \n    organization_status\n    \n as \n    \n    organization_status\n    \n, \n    \n    \n    organization_type\n    \n as \n    \n    organization_type\n    \n, \n    \n    \n    overview_photo_v_2_crop_info_height\n    \n as \n    \n    overview_photo_v_2_crop_info_height\n    \n, \n    \n    \n    overview_photo_v_2_crop_info_width\n    \n as \n    \n    overview_photo_v_2_crop_info_width\n    \n, \n    \n    \n    overview_photo_v_2_crop_info_x\n    \n as \n    \n    overview_photo_v_2_crop_info_x\n    \n, \n    \n    \n    overview_photo_v_2_crop_info_y\n    \n as \n    \n    overview_photo_v_2_crop_info_y\n    \n, \n    \n    \n    overview_photo_v_2_cropped\n    \n as \n    \n    overview_photo_v_2_cropped\n    \n, \n    \n    \n    overview_photo_v_2_original\n    \n as \n    \n    overview_photo_v_2_original\n    \n, \n    \n    \n    parent_relationship_parent_id\n    \n as \n    \n    parent_relationship_parent_id\n    \n, \n    \n    \n    parent_relationship_status\n    \n as \n    \n    parent_relationship_status\n    \n, \n    \n    \n    parent_relationship_type\n    \n as \n    \n    parent_relationship_type\n    \n, \n    \n    \n    primary_organization_type\n    \n as \n    \n    primary_organization_type\n    \n, \n    \n    \n    school_attributes_hierarchy_classification\n    \n as \n    \n    school_attributes_hierarchy_classification\n    \n, \n    \n    \n    school_attributes_legacy_school\n    \n as \n    \n    school_attributes_legacy_school\n    \n, \n    \n    \n    school_attributes_type\n    \n as \n    \n    school_attributes_type\n    \n, \n    \n    \n    school_attributes_year_level\n    \n as \n    \n    school_attributes_year_level\n    \n, \n    \n    \n    staff_count_range\n    \n as \n    \n    staff_count_range\n    \n, \n    \n    \n    vanity_name\n    \n as \n    \n    vanity_name\n    \n, \n    \n    \n    version_tag\n    \n as \n    \n    version_tag\n    \n, \n    \n    \n    website_localized\n    \n as \n    \n    website_localized\n    \n, \n    \n    \n    website_preferred_locale_country\n    \n as \n    \n    website_preferred_locale_country\n    \n, \n    \n    \n    website_preferred_locale_language\n    \n as \n    \n    website_preferred_locale_language\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as organization_id,\n        localized_name as organization_name,\n        source_relation\n    from fields\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests_stg_linkedin_pages\".\"stg_linkedin_pages__organization\""}, "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_statistic": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.linkedin_pages_source.get_ugc_post_share_statistic_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation"], "nodes": ["model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_statistic_tmp", "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_statistic_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_linkedin_pages", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests_stg_linkedin_pages", "fqn": ["linkedin_pages_source", "stg_linkedin_pages__ugc_post_share_statistic"], "unique_id": "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_statistic", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_linkedin_pages__ugc_post_share_statistic_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_linkedin_pages__ugc_post_share_statistic_tmp')),\n                staging_columns=get_ugc_post_share_statistic_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='linkedin_pages_union_schemas', \n            union_database_variable='linkedin_pages_union_databases') \n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        share_statistic_id,\n        ugc_post_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "package_name": "linkedin_pages_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/linkedin_pages_source", "path": "stg_linkedin_pages__ugc_post_share_statistic.sql", "original_file_path": "models/stg_linkedin_pages__ugc_post_share_statistic.sql", "name": "stg_linkedin_pages__ugc_post_share_statistic", "alias": "stg_linkedin_pages__ugc_post_share_statistic", "checksum": {"name": "sha256", "checksum": "1477a90d38f616b119caf0a3d4c6c6a67d60b6b27d8501ce5da0dd3bf317986f"}, "tags": [], "refs": [["stg_linkedin_pages__ugc_post_share_statistic_tmp"], ["stg_linkedin_pages__ugc_post_share_statistic_tmp"]], "sources": [], "metrics": [], "description": "Mapping table for organizations and UGC posts.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The timestamp of when the record was last synced by Fivetran", "meta": {}, "data_type": null, "quote": null, "tags": []}, "share_statistic_id": {"name": "share_statistic_id", "description": "Unique id for the organization", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ugc_post_id": {"name": "ugc_post_id", "description": "Unique id for the UGC post", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "linkedin_pages_source://models/stg_linkedin_pages.yml", "compiled_path": "target/compiled/linkedin_pages_source/models/stg_linkedin_pages__ugc_post_share_statistic.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_linkedin_pages", "materialized": "table"}, "created_at": 1671477151.91868, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"social_media_rollup_integration_tests_stg_linkedin_pages\".\"stg_linkedin_pages__ugc_post_share_statistic_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    share_statistic_id\n    \n as \n    \n    share_statistic_id\n    \n, \n    \n    \n    ugc_post_id\n    \n as \n    \n    ugc_post_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        share_statistic_id,\n        ugc_post_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests_stg_linkedin_pages\".\"stg_linkedin_pages__ugc_post_share_statistic\""}, "model.linkedin_pages_source.stg_linkedin_pages__organization_ugc_post": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.linkedin_pages_source.get_organization_ugc_post_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation"], "nodes": ["model.linkedin_pages_source.stg_linkedin_pages__organization_ugc_post_tmp", "model.linkedin_pages_source.stg_linkedin_pages__organization_ugc_post_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_linkedin_pages", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests_stg_linkedin_pages", "fqn": ["linkedin_pages_source", "stg_linkedin_pages__organization_ugc_post"], "unique_id": "model.linkedin_pages_source.stg_linkedin_pages__organization_ugc_post", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_linkedin_pages__organization_ugc_post_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_linkedin_pages__organization_ugc_post_tmp')),\n                staging_columns=get_organization_ugc_post_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='linkedin_pages_union_schemas', \n            union_database_variable='linkedin_pages_union_databases') \n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        organization_id,\n\n        case\n            when lower(ugc_post_id) like '%urn:li:share:%' \n                then replace(ugc_post_id, 'urn:li:share:', '')\n            when lower(ugc_post_id) like '%urn:li:ugcpost:%'\n                then replace(lower(ugc_post_id), 'urn:li:ugcpost:', '')\n            else ugc_post_id\n        end as ugc_post_id,\n\n        source_relation\n    from fields\n)\n\nselect * from final", "language": "sql", "package_name": "linkedin_pages_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/linkedin_pages_source", "path": "stg_linkedin_pages__organization_ugc_post.sql", "original_file_path": "models/stg_linkedin_pages__organization_ugc_post.sql", "name": "stg_linkedin_pages__organization_ugc_post", "alias": "stg_linkedin_pages__organization_ugc_post", "checksum": {"name": "sha256", "checksum": "99da53159dd8e3ab00e934637a30021dd1583a149ab608ed11ba1debab1e2475"}, "tags": [], "refs": [["stg_linkedin_pages__organization_ugc_post_tmp"], ["stg_linkedin_pages__organization_ugc_post_tmp"]], "sources": [], "metrics": [], "description": "Mapping table for organizations and UGC posts.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The timestamp of when the record was last synced by Fivetran", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organization_id": {"name": "organization_id", "description": "Unique id for the organization", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ugc_post_id": {"name": "ugc_post_id", "description": "Unique id for the UGC post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record, if the unioning functionality is being used.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "linkedin_pages_source://models/stg_linkedin_pages.yml", "compiled_path": "target/compiled/linkedin_pages_source/models/stg_linkedin_pages__organization_ugc_post.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_linkedin_pages", "materialized": "table"}, "created_at": 1671477151.909683, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"social_media_rollup_integration_tests_stg_linkedin_pages\".\"stg_linkedin_pages__organization_ugc_post_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    cast(null as INT) as \n    \n    organization_id\n    \n , \n    \n    \n    ugc_post_id\n    \n as \n    \n    ugc_post_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        organization_id,\n\n        case\n            when lower(ugc_post_id) like '%urn:li:share:%' \n                then replace(ugc_post_id, 'urn:li:share:', '')\n            when lower(ugc_post_id) like '%urn:li:ugcpost:%'\n                then replace(lower(ugc_post_id), 'urn:li:ugcpost:', '')\n            else ugc_post_id\n        end as ugc_post_id,\n\n        source_relation\n    from fields\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests_stg_linkedin_pages\".\"stg_linkedin_pages__organization_ugc_post\""}, "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_history_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["seed.social_media_rollup_integration_tests.linkedin_pages_ugc_post_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_linkedin_pages", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests_stg_linkedin_pages", "fqn": ["linkedin_pages_source", "tmp", "stg_linkedin_pages__ugc_post_history_tmp"], "unique_id": "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_history_tmp", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='ugc_post_history', \n        database_variable='linkedin_pages_database', \n        schema_variable='linkedin_pages_schema', \n        default_database=target.database,\n        default_schema='linkedin_company_pages',\n        default_variable='ugc_post_history',\n        union_schema_variable='linkedin_pages_union_schemas',\n        union_database_variable='linkedin_pages_union_databases'\n    )\n}}", "language": "sql", "package_name": "linkedin_pages_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/linkedin_pages_source", "path": "tmp/stg_linkedin_pages__ugc_post_history_tmp.sql", "original_file_path": "models/tmp/stg_linkedin_pages__ugc_post_history_tmp.sql", "name": "stg_linkedin_pages__ugc_post_history_tmp", "alias": "stg_linkedin_pages__ugc_post_history_tmp", "checksum": {"name": "sha256", "checksum": "7050e46a4798532c118ce6151540bd5cc9093af74271754e58239789ddb56d16"}, "tags": [], "refs": [["linkedin_pages_ugc_post_history_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/linkedin_pages_source/models/tmp/stg_linkedin_pages__ugc_post_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_linkedin_pages", "materialized": "table"}, "created_at": 1671477151.495138, "compiled_code": "\n\n\n\n    select * \n    from \"postgres\".\"social_media_rollup_integration_tests\".\"linkedin_pages_ugc_post_history_data\"\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests_stg_linkedin_pages\".\"stg_linkedin_pages__ugc_post_history_tmp\""}, "model.linkedin_pages_source.stg_linkedin_pages__organization_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["seed.social_media_rollup_integration_tests.linkedin_pages_organization_data", "seed.social_media_rollup_integration_tests.linkedin_pages_organization_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_linkedin_pages", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests_stg_linkedin_pages", "fqn": ["linkedin_pages_source", "tmp", "stg_linkedin_pages__organization_tmp"], "unique_id": "model.linkedin_pages_source.stg_linkedin_pages__organization_tmp", "raw_code": "--depends_on: {{ var('organization') }}\n{{\n    fivetran_utils.union_data(\n        table_identifier='organization', \n        database_variable='linkedin_pages_database', \n        schema_variable='linkedin_pages_schema', \n        default_database=target.database,\n        default_schema='linkedin_company_pages',\n        default_variable='organization',\n        union_schema_variable='linkedin_pages_union_schemas',\n        union_database_variable='linkedin_pages_union_databases'\n    )\n}}", "language": "sql", "package_name": "linkedin_pages_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/linkedin_pages_source", "path": "tmp/stg_linkedin_pages__organization_tmp.sql", "original_file_path": "models/tmp/stg_linkedin_pages__organization_tmp.sql", "name": "stg_linkedin_pages__organization_tmp", "alias": "stg_linkedin_pages__organization_tmp", "checksum": {"name": "sha256", "checksum": "e150cf17bdf32e1523759ed80388defe131799c84c56e657db89fb137fc9f38a"}, "tags": [], "refs": [["linkedin_pages_organization_data"], ["linkedin_pages_organization_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/linkedin_pages_source/models/tmp/stg_linkedin_pages__organization_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_linkedin_pages", "materialized": "table"}, "created_at": 1671477151.506411, "compiled_code": "--depends_on: \"postgres\".\"social_media_rollup_integration_tests\".\"linkedin_pages_organization_data\"\n\n\n\n\n    select * \n    from \"postgres\".\"social_media_rollup_integration_tests\".\"linkedin_pages_organization_data\"\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests_stg_linkedin_pages\".\"stg_linkedin_pages__organization_tmp\""}, "model.linkedin_pages_source.stg_linkedin_pages__organization_ugc_post_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["seed.social_media_rollup_integration_tests.linkedin_pages_organization_ugc_post_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_linkedin_pages", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests_stg_linkedin_pages", "fqn": ["linkedin_pages_source", "tmp", "stg_linkedin_pages__organization_ugc_post_tmp"], "unique_id": "model.linkedin_pages_source.stg_linkedin_pages__organization_ugc_post_tmp", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='organization_ugc_post', \n        database_variable='linkedin_pages_database', \n        schema_variable='linkedin_pages_schema', \n        default_database=target.database,\n        default_schema='linkedin_company_pages',\n        default_variable='organization_ugc_post',\n        union_schema_variable='linkedin_pages_union_schemas',\n        union_database_variable='linkedin_pages_union_databases'\n    )\n}}", "language": "sql", "package_name": "linkedin_pages_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/linkedin_pages_source", "path": "tmp/stg_linkedin_pages__organization_ugc_post_tmp.sql", "original_file_path": "models/tmp/stg_linkedin_pages__organization_ugc_post_tmp.sql", "name": "stg_linkedin_pages__organization_ugc_post_tmp", "alias": "stg_linkedin_pages__organization_ugc_post_tmp", "checksum": {"name": "sha256", "checksum": "16e21ad17d2e72f810a6fbd540ccd4615721a999f505b6f3186e6c69049131c8"}, "tags": [], "refs": [["linkedin_pages_organization_ugc_post_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/linkedin_pages_source/models/tmp/stg_linkedin_pages__organization_ugc_post_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_linkedin_pages", "materialized": "table"}, "created_at": 1671477151.510999, "compiled_code": "\n\n\n\n    select * \n    from \"postgres\".\"social_media_rollup_integration_tests\".\"linkedin_pages_organization_ugc_post_data\"\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests_stg_linkedin_pages\".\"stg_linkedin_pages__organization_ugc_post_tmp\""}, "model.linkedin_pages_source.stg_linkedin_pages__share_statistic_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["seed.social_media_rollup_integration_tests.linkedin_pages_share_statistic_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_linkedin_pages", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests_stg_linkedin_pages", "fqn": ["linkedin_pages_source", "tmp", "stg_linkedin_pages__share_statistic_tmp"], "unique_id": "model.linkedin_pages_source.stg_linkedin_pages__share_statistic_tmp", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='share_statistic', \n        database_variable='linkedin_pages_database', \n        schema_variable='linkedin_pages_schema', \n        default_database=target.database,\n        default_schema='linkedin_company_pages',\n        default_variable='share_statistic',\n        union_schema_variable='linkedin_pages_union_schemas',\n        union_database_variable='linkedin_pages_union_databases'\n    )\n}}", "language": "sql", "package_name": "linkedin_pages_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/linkedin_pages_source", "path": "tmp/stg_linkedin_pages__share_statistic_tmp.sql", "original_file_path": "models/tmp/stg_linkedin_pages__share_statistic_tmp.sql", "name": "stg_linkedin_pages__share_statistic_tmp", "alias": "stg_linkedin_pages__share_statistic_tmp", "checksum": {"name": "sha256", "checksum": "1090aa79a374d4b15d3bfeec72981e8e2e3ec22413f427afc9a97b785c505bec"}, "tags": [], "refs": [["linkedin_pages_share_statistic_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/linkedin_pages_source/models/tmp/stg_linkedin_pages__share_statistic_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_linkedin_pages", "materialized": "table"}, "created_at": 1671477151.514657, "compiled_code": "\n\n\n\n    select * \n    from \"postgres\".\"social_media_rollup_integration_tests\".\"linkedin_pages_share_statistic_data\"\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests_stg_linkedin_pages\".\"stg_linkedin_pages__share_statistic_tmp\""}, "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_statistic_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["seed.social_media_rollup_integration_tests.linkedin_pages_ugc_post_share_statistic_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_linkedin_pages", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests_stg_linkedin_pages", "fqn": ["linkedin_pages_source", "tmp", "stg_linkedin_pages__ugc_post_share_statistic_tmp"], "unique_id": "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_statistic_tmp", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='ugc_post_share_statistic', \n        database_variable='linkedin_pages_database', \n        schema_variable='linkedin_pages_schema', \n        default_database=target.database,\n        default_schema='linkedin_company_pages',\n        default_variable='ugc_post_share_statistic',\n        union_schema_variable='linkedin_pages_union_schemas',\n        union_database_variable='linkedin_pages_union_databases'\n    )\n}}", "language": "sql", "package_name": "linkedin_pages_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/linkedin_pages_source", "path": "tmp/stg_linkedin_pages__ugc_post_share_statistic_tmp.sql", "original_file_path": "models/tmp/stg_linkedin_pages__ugc_post_share_statistic_tmp.sql", "name": "stg_linkedin_pages__ugc_post_share_statistic_tmp", "alias": "stg_linkedin_pages__ugc_post_share_statistic_tmp", "checksum": {"name": "sha256", "checksum": "98f47502b2bfd24414afae9150a8f0d937ff179b5e006e1e5805853a75d44bbe"}, "tags": [], "refs": [["linkedin_pages_ugc_post_share_statistic_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/linkedin_pages_source/models/tmp/stg_linkedin_pages__ugc_post_share_statistic_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_linkedin_pages", "materialized": "table"}, "created_at": 1671477151.518261, "compiled_code": "\n\n\n\n    select * \n    from \"postgres\".\"social_media_rollup_integration_tests\".\"linkedin_pages_ugc_post_share_statistic_data\"\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests_stg_linkedin_pages\".\"stg_linkedin_pages__ugc_post_share_statistic_tmp\""}, "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_media_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["seed.social_media_rollup_integration_tests.linkedin_pages_ugc_post_share_content_media_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_linkedin_pages", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests_stg_linkedin_pages", "fqn": ["linkedin_pages_source", "tmp", "stg_linkedin_pages__ugc_post_share_media_tmp"], "unique_id": "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_media_tmp", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='ugc_post_share_content_media', \n        database_variable='linkedin_pages_database', \n        schema_variable='linkedin_pages_schema', \n        default_database=target.database,\n        default_schema='linkedin_company_pages',\n        default_variable='ugc_post_share_content_media',\n        union_schema_variable='linkedin_pages_union_schemas',\n        union_database_variable='linkedin_pages_union_databases'\n    )\n}}", "language": "sql", "package_name": "linkedin_pages_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/linkedin_pages_source", "path": "tmp/stg_linkedin_pages__ugc_post_share_media_tmp.sql", "original_file_path": "models/tmp/stg_linkedin_pages__ugc_post_share_media_tmp.sql", "name": "stg_linkedin_pages__ugc_post_share_media_tmp", "alias": "stg_linkedin_pages__ugc_post_share_media_tmp", "checksum": {"name": "sha256", "checksum": "6fed93fde067df2d4641d4cc2c4c42592e986f02458486c2ab17fc0176dae127"}, "tags": [], "refs": [["linkedin_pages_ugc_post_share_content_media_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/linkedin_pages_source/models/tmp/stg_linkedin_pages__ugc_post_share_media_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_linkedin_pages", "materialized": "table"}, "created_at": 1671477151.521896, "compiled_code": "\n\n\n\n    select * \n    from \"postgres\".\"social_media_rollup_integration_tests\".\"linkedin_pages_ugc_post_share_content_media_data\"\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests_stg_linkedin_pages\".\"stg_linkedin_pages__ugc_post_share_media_tmp\""}, "model.facebook_pages.facebook_pages__pages_report": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.facebook_pages_source.stg_facebook_pages__page", "model.facebook_pages_source.stg_facebook_pages__daily_page_metrics_total"]}, "config": {"enabled": true, "alias": null, "schema": "facebook_pages", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests_facebook_pages", "fqn": ["facebook_pages", "facebook_pages__pages_report"], "unique_id": "model.facebook_pages.facebook_pages__pages_report", "raw_code": "with pages as (\n\n    select *\n    from {{ var('pages') }}\n\n), page_metrics as (\n\n    select *\n    from {{ var('page_metrics') }}\n\n), joined as (\n\n    select \n        page_metrics.date_day,\n        pages.page_id,\n        pages.page_name,\n        page_metrics.actions_post_reactions_total,\n        page_metrics.fan_adds,\n        page_metrics.fan_removes,\n        page_metrics.impressions,\n        page_metrics.post_engagements,\n        page_metrics.posts_impressions,\n        page_metrics.video_complete_views_30s,\n        page_metrics.video_views,\n        page_metrics.video_views_10s,\n        page_metrics.views_total,    \n        page_metrics.source_relation\n    from page_metrics\n    left join pages\n        on page_metrics.page_id = pages.page_id\n        and page_metrics.source_relation = pages.source_relation\n\n)\n\nselect *\nfrom joined", "language": "sql", "package_name": "facebook_pages", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/facebook_pages", "path": "facebook_pages__pages_report.sql", "original_file_path": "models/facebook_pages__pages_report.sql", "name": "facebook_pages__pages_report", "alias": "facebook_pages__pages_report", "checksum": {"name": "sha256", "checksum": "6cadc72e139259e85441a283fc67a277fd0ecc0c60508bea463cfeaf3074ab2d"}, "tags": [], "refs": [["stg_facebook_pages__page"], ["stg_facebook_pages__daily_page_metrics_total"]], "sources": [], "metrics": [], "description": "Each record represents the daily performance of a Facebook Page.", "columns": {"page_id": {"name": "page_id", "description": "The ID of the Page.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_name": {"name": "page_name", "description": "The name of the Page.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date of the metric performance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "actions_post_reactions_total": {"name": "actions_post_reactions_total", "description": "The total number of reactions on posts.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fan_adds": {"name": "fan_adds", "description": "The number of new fans added to the Page.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fan_removes": {"name": "fan_removes", "description": "The number of fans removed from the Page.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of times any content from your Page or about your Page entered a person's screen.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_engagements": {"name": "post_engagements", "description": "The number of times people have engaged with your posts through reactions, comments, shares and more.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "posts_impressions": {"name": "posts_impressions", "description": "The number of times your Page's posts entered a person's screen. Posts include statuses, photos, links, videos and more.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_complete_views_30s": {"name": "video_complete_views_30s", "description": "The number of times your Page's videos played for at least 30 seconds, or for nearly their total length if they're shorter than 30 seconds. During a single instance of a video playing, we'll exclude any time spent replaying the video.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views": {"name": "video_views", "description": "The number of times your Page's videos played for at least 3 seconds, or for nearly their total length if they're shorter than 3 seconds. During a single instance of a video playing, we'll exclude any time spent replaying the video.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_10s": {"name": "video_views_10s", "description": "The number of times your Page's videos played for at least 10 seconds, or for nearly their total length if they're shorter than 10 seconds. During a single instance of a video playing, we'll exclude any time spent replaying the video.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "views_total": {"name": "views_total", "description": "The number of times a Page's profile has been viewed by people not logged in to Facebook.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record, if the unioning functionality is being used.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "facebook_pages://models/facebook_pages.yml", "compiled_path": "target/compiled/facebook_pages/models/facebook_pages__pages_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "facebook_pages", "materialized": "table"}, "created_at": 1671477151.967627, "compiled_code": "with pages as (\n\n    select *\n    from \"postgres\".\"social_media_rollup_integration_tests_stg_facebook_pages\".\"stg_facebook_pages__page\"\n\n), page_metrics as (\n\n    select *\n    from \"postgres\".\"social_media_rollup_integration_tests_stg_facebook_pages\".\"stg_facebook_pages__daily_page_metrics_total\"\n\n), joined as (\n\n    select \n        page_metrics.date_day,\n        pages.page_id,\n        pages.page_name,\n        page_metrics.actions_post_reactions_total,\n        page_metrics.fan_adds,\n        page_metrics.fan_removes,\n        page_metrics.impressions,\n        page_metrics.post_engagements,\n        page_metrics.posts_impressions,\n        page_metrics.video_complete_views_30s,\n        page_metrics.video_views,\n        page_metrics.video_views_10s,\n        page_metrics.views_total,    \n        page_metrics.source_relation\n    from page_metrics\n    left join pages\n        on page_metrics.page_id = pages.page_id\n        and page_metrics.source_relation = pages.source_relation\n\n)\n\nselect *\nfrom joined", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests_facebook_pages\".\"facebook_pages__pages_report\""}, "model.facebook_pages.facebook_pages__posts_report": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.facebook_pages.int_facebook_pages__lastest_post", "model.facebook_pages_source.stg_facebook_pages__page", "model.facebook_pages_source.stg_facebook_pages__lifetime_post_metrics_total"]}, "config": {"enabled": true, "alias": null, "schema": "facebook_pages", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests_facebook_pages", "fqn": ["facebook_pages", "facebook_pages__posts_report"], "unique_id": "model.facebook_pages.facebook_pages__posts_report", "raw_code": "with posts as (\n\n    select *\n    from {{ ref('int_facebook_pages__lastest_post') }}\n    where is_most_recent_record = True\n\n), pages as (\n\n    select *\n    from {{ var('pages') }}\n\n), post_metrics as (\n\n    select *\n    from {{ var('post_metrics') }}\n\n), joined as (\n\n    select \n        posts.created_timestamp,\n        posts.post_id,\n        posts.post_message,\n        posts.post_url,\n        posts.page_id,\n        pages.page_name,\n        post_metrics.date_day,\n        post_metrics.clicks,\n        post_metrics.impressions,\n        post_metrics.video_avg_time_watched,\n        post_metrics.video_view_time,\n        post_metrics.video_views,\n        post_metrics.video_views_10s,\n        post_metrics.video_views_15s,\n        post_metrics.reactions_like_total as likes,\n        post_metrics.source_relation,\n        post_metrics.is_most_recent_record\n    from post_metrics\n    left join posts\n        on post_metrics.post_id = posts.post_id\n        and post_metrics.source_relation = posts.source_relation\n    left join pages\n        on posts.page_id = pages.page_id\n        and posts.source_relation = pages.source_relation\n\n)\n\nselect *\nfrom joined", "language": "sql", "package_name": "facebook_pages", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/facebook_pages", "path": "facebook_pages__posts_report.sql", "original_file_path": "models/facebook_pages__posts_report.sql", "name": "facebook_pages__posts_report", "alias": "facebook_pages__posts_report", "checksum": {"name": "sha256", "checksum": "1b13634be9eaf6bbf8ab5038935f521c279da1e4aa3233fa24144deec8c69b62"}, "tags": [], "refs": [["int_facebook_pages__lastest_post"], ["stg_facebook_pages__page"], ["stg_facebook_pages__lifetime_post_metrics_total"]], "sources": [], "metrics": [], "description": "Each record represents the daily performance of a Facebook post.", "columns": {"created_timestamp": {"name": "created_timestamp", "description": "The time the post was initially published. For a post about a life event, this is the date and time of the life event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_id": {"name": "post_id", "description": "The ID of the post.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_message": {"name": "post_message", "description": "The status message in the post.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_url": {"name": "post_url", "description": "The URL of the post.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_id": {"name": "page_id", "description": "The ID of the page that posted the post.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_name": {"name": "page_name", "description": "The name of the page that posted the post.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date of the metric performance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of times the post was clicked.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of times the post was shown to users.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_avg_time_watched": {"name": "video_avg_time_watched", "description": "The average amount of time users watched the video.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_view_time": {"name": "video_view_time", "description": "The total amount of time users watched the video.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views": {"name": "video_views", "description": "The number of times users watched the video.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_10s": {"name": "video_views_10s", "description": "The number of times your Page's videos played for at least 10 seconds, or for nearly their total length if they're shorter than 10 seconds. During a single instance of a video playing, we'll exclude any time spent replaying the video.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_15s": {"name": "video_views_15s", "description": "The total number of views on the post longer than 15 seconds", "meta": {}, "data_type": null, "quote": null, "tags": []}, "likes": {"name": "likes", "description": "The total amount of reactions with type 'like' on the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record, if the unioning functionality is being used.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Boolean indicating if the record is the most recent record of the post.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "facebook_pages://models/facebook_pages.yml", "compiled_path": "target/compiled/facebook_pages/models/facebook_pages__posts_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "facebook_pages", "materialized": "table"}, "created_at": 1671477151.9654558, "compiled_code": "with posts as (\n\n    select *\n    from \"postgres\".\"social_media_rollup_integration_tests_facebook_pages\".\"int_facebook_pages__lastest_post\"\n    where is_most_recent_record = True\n\n), pages as (\n\n    select *\n    from \"postgres\".\"social_media_rollup_integration_tests_stg_facebook_pages\".\"stg_facebook_pages__page\"\n\n), post_metrics as (\n\n    select *\n    from \"postgres\".\"social_media_rollup_integration_tests_stg_facebook_pages\".\"stg_facebook_pages__lifetime_post_metrics_total\"\n\n), joined as (\n\n    select \n        posts.created_timestamp,\n        posts.post_id,\n        posts.post_message,\n        posts.post_url,\n        posts.page_id,\n        pages.page_name,\n        post_metrics.date_day,\n        post_metrics.clicks,\n        post_metrics.impressions,\n        post_metrics.video_avg_time_watched,\n        post_metrics.video_view_time,\n        post_metrics.video_views,\n        post_metrics.video_views_10s,\n        post_metrics.video_views_15s,\n        post_metrics.reactions_like_total as likes,\n        post_metrics.source_relation,\n        post_metrics.is_most_recent_record\n    from post_metrics\n    left join posts\n        on post_metrics.post_id = posts.post_id\n        and post_metrics.source_relation = posts.source_relation\n    left join pages\n        on posts.page_id = pages.page_id\n        and posts.source_relation = pages.source_relation\n\n)\n\nselect *\nfrom joined", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests_facebook_pages\".\"facebook_pages__posts_report\""}, "model.facebook_pages.int_facebook_pages__lastest_post": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.facebook_pages_source.stg_facebook_pages__post_history"]}, "config": {"enabled": true, "alias": null, "schema": "facebook_pages", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests_facebook_pages", "fqn": ["facebook_pages", "intermediate", "int_facebook_pages__lastest_post"], "unique_id": "model.facebook_pages.int_facebook_pages__lastest_post", "raw_code": "with posts as (\n    \n    select *\n    from {{ var('posts') }}\n\n), most_recent_posts as (\n\n    select\n        *,\n        row_number() over (partition by post_id, source_relation order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from posts\n)\n\nselect *\nfrom most_recent_posts", "language": "sql", "package_name": "facebook_pages", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/facebook_pages", "path": "intermediate/int_facebook_pages__lastest_post.sql", "original_file_path": "models/intermediate/int_facebook_pages__lastest_post.sql", "name": "int_facebook_pages__lastest_post", "alias": "int_facebook_pages__lastest_post", "checksum": {"name": "sha256", "checksum": "a05bd2ae0792eee8fa89d629f25bdef1034cf4dc004e8b44e99b76f466d10165"}, "tags": [], "refs": [["stg_facebook_pages__post_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/facebook_pages/models/intermediate/int_facebook_pages__lastest_post.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "facebook_pages", "materialized": "table"}, "created_at": 1671477151.540523, "compiled_code": "with posts as (\n    \n    select *\n    from \"postgres\".\"social_media_rollup_integration_tests_stg_facebook_pages\".\"stg_facebook_pages__post_history\"\n\n), most_recent_posts as (\n\n    select\n        *,\n        row_number() over (partition by post_id, source_relation order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from posts\n)\n\nselect *\nfrom most_recent_posts", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests_facebook_pages\".\"int_facebook_pages__lastest_post\""}, "model.twitter_organic_source.stg_twitter_organic__twitter_user_history": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.twitter_organic_source.get_twitter_user_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_bigint"], "nodes": ["model.twitter_organic_source.stg_twitter_organic__twitter_user_history_tmp", "model.twitter_organic_source.stg_twitter_organic__twitter_user_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_twitter_organic", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests_stg_twitter_organic", "fqn": ["twitter_organic_source", "stg_twitter_organic__twitter_user_history"], "unique_id": "model.twitter_organic_source.stg_twitter_organic__twitter_user_history", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_twitter_organic__twitter_user_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_twitter_organic__twitter_user_history_tmp')),\n                staging_columns=get_twitter_user_history_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='twitter_organic_union_schemas', \n            union_database_variable='twitter_organic_union_databases') \n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        created_at as created_timestamp,\n        description as user_description,\n        followers_count,\n        cast(id as {{ dbt.type_bigint() }}) as user_id,\n        location as user_location,\n        name as user_name,\n        screen_name as user_screen_name,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "package_name": "twitter_organic_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/twitter_organic_source", "path": "stg_twitter_organic__twitter_user_history.sql", "original_file_path": "models/stg_twitter_organic__twitter_user_history.sql", "name": "stg_twitter_organic__twitter_user_history", "alias": "stg_twitter_organic__twitter_user_history", "checksum": {"name": "sha256", "checksum": "56f936a07ffcb786b1ce17334cac38ec0a0e4226dc0e0eeaa48bdc8eaa02dff6"}, "tags": [], "refs": [["stg_twitter_organic__twitter_user_history_tmp"], ["stg_twitter_organic__twitter_user_history_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a version of a Twitter user.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "Date and time when the user was created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_description": {"name": "user_description", "description": "The description on the user's profile", "meta": {}, "data_type": null, "quote": null, "tags": []}, "followers_count": {"name": "followers_count", "description": "Number of followers the user has", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "The ID of the user in Twitter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_location": {"name": "user_location", "description": "The location of the user's account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_name": {"name": "user_name", "description": "The name of the user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_screen_name": {"name": "user_screen_name", "description": "The screen name of the user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record, if the unioning functionality is being used.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "twitter_organic_source://models/stg_twitter_organic.yml", "compiled_path": "target/compiled/twitter_organic_source/models/stg_twitter_organic__twitter_user_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_twitter_organic", "materialized": "table"}, "created_at": 1671477151.990578, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"social_media_rollup_integration_tests_stg_twitter_organic\".\"stg_twitter_organic__twitter_user_history_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    contributors_enabled\n    \n as \n    \n    contributors_enabled\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    default_profile\n    \n as \n    \n    default_profile\n    \n, \n    \n    \n    default_profile_image\n    \n as \n    \n    default_profile_image\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    favourites_count\n    \n as \n    \n    favourites_count\n    \n, \n    \n    \n    followers_count\n    \n as \n    \n    followers_count\n    \n, \n    \n    \n    friends_count\n    \n as \n    \n    friends_count\n    \n, \n    \n    \n    geo_enabled\n    \n as \n    \n    geo_enabled\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    is_translation_enabled\n    \n as \n    \n    is_translation_enabled\n    \n, \n    \n    \n    is_translator\n    \n as \n    \n    is_translator\n    \n, \n    \n    \n    lang\n    \n as \n    \n    lang\n    \n, \n    \n    \n    listed_count\n    \n as \n    \n    listed_count\n    \n, \n    \n    \n    location\n    \n as \n    \n    location\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    profile_background_image_url\n    \n as \n    \n    profile_background_image_url\n    \n, \n    \n    \n    profile_background_image_url_https\n    \n as \n    \n    profile_background_image_url_https\n    \n, \n    \n    \n    profile_background_tile\n    \n as \n    \n    profile_background_tile\n    \n, \n    \n    \n    profile_banner_url\n    \n as \n    \n    profile_banner_url\n    \n, \n    \n    \n    profile_image_url\n    \n as \n    \n    profile_image_url\n    \n, \n    \n    \n    profile_image_url_https\n    \n as \n    \n    profile_image_url_https\n    \n, \n    \n    \n    profile_use_background_image\n    \n as \n    \n    profile_use_background_image\n    \n, \n    \n    \n    protected_user\n    \n as \n    \n    protected_user\n    \n, \n    \n    \n    screen_name\n    \n as \n    \n    screen_name\n    \n, \n    \n    \n    statuses_count\n    \n as \n    \n    statuses_count\n    \n, \n    \n    \n    time_zone\n    \n as \n    \n    time_zone\n    \n, \n    \n    \n    url\n    \n as \n    \n    url\n    \n, \n    \n    \n    utc_offset\n    \n as \n    \n    utc_offset\n    \n, \n    \n    \n    verified\n    \n as \n    \n    verified\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        created_at as created_timestamp,\n        description as user_description,\n        followers_count,\n        cast(id as bigint) as user_id,\n        location as user_location,\n        name as user_name,\n        screen_name as user_screen_name,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests_stg_twitter_organic\".\"stg_twitter_organic__twitter_user_history\""}, "model.twitter_organic_source.stg_twitter_organic__tweet": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.twitter_organic_source.get_tweet_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.concat", "macro.dbt.type_bigint"], "nodes": ["model.twitter_organic_source.stg_twitter_organic__tweet_tmp", "model.twitter_organic_source.stg_twitter_organic__tweet_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_twitter_organic", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests_stg_twitter_organic", "fqn": ["twitter_organic_source", "stg_twitter_organic__tweet"], "unique_id": "model.twitter_organic_source.stg_twitter_organic__tweet", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_twitter_organic__tweet_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_twitter_organic__tweet_tmp')),\n                staging_columns=get_tweet_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='twitter_organic_union_schemas', \n            union_database_variable='twitter_organic_union_databases') \n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        account_id,\n        card_uri,\n        coordinates_coordinates,\n        coordinates_type,\n        created_at as created_timestamp,\n        favorite_count,\n        favorited,\n        followers,\n        full_text as tweet_text,\n        geo_coordinates,\n        geo_type,\n        id as organic_tweet_id,\n        {{ dbt.concat([\"'https://twitter.com/p/status/'\", 'id']) }} as post_url,\n        in_reply_to_screen_name,\n        in_reply_to_status_id,\n        in_reply_to_user_id,\n        lang as language,\n        media_key,\n        retweet_count,\n        retweeted,\n        source,\n        truncated,\n        tweet_type,\n        cast(user_id as {{ dbt.type_bigint() }}) as user_id,\n        source_relation\n    from fields\n)\n\nselect * from final", "language": "sql", "package_name": "twitter_organic_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/twitter_organic_source", "path": "stg_twitter_organic__tweet.sql", "original_file_path": "models/stg_twitter_organic__tweet.sql", "name": "stg_twitter_organic__tweet", "alias": "stg_twitter_organic__tweet", "checksum": {"name": "sha256", "checksum": "7ffdeb49d33c5e7a14ddbd5b2c018da309702c823550efe9386291689fb1d6a4"}, "tags": [], "refs": [["stg_twitter_organic__tweet_tmp"], ["stg_twitter_organic__tweet_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a tweet in Twitter", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "ID of the associated account in Twitter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "card_uri": {"name": "card_uri", "description": "URI of the associated card in Twitter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "Date and time when the tweet was created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "favorite_count": {"name": "favorite_count", "description": "Number of times the tweet has been favorited", "meta": {}, "data_type": null, "quote": null, "tags": []}, "favorited": {"name": "favorited", "description": "Whether the tweet has been favorited", "meta": {}, "data_type": null, "quote": null, "tags": []}, "followers": {"name": "followers", "description": "Number of followers the tweet generated", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tweet_text": {"name": "tweet_text", "description": "The full text of the tweet", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organic_tweet_id": {"name": "organic_tweet_id", "description": "The ID of the tweet in Twitter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_url": {"name": "post_url", "description": "URL of the tweet", "meta": {}, "data_type": null, "quote": null, "tags": []}, "in_reply_to_screen_name": {"name": "in_reply_to_screen_name", "description": "Screen name the tweet is in reply to", "meta": {}, "data_type": null, "quote": null, "tags": []}, "in_reply_to_status_id": {"name": "in_reply_to_status_id", "description": "Status ID the tweet is in reply to", "meta": {}, "data_type": null, "quote": null, "tags": []}, "in_reply_to_user_id": {"name": "in_reply_to_user_id", "description": "User ID the tweet is in reply to", "meta": {}, "data_type": null, "quote": null, "tags": []}, "language": {"name": "language", "description": "Language of the tweet", "meta": {}, "data_type": null, "quote": null, "tags": []}, "media_key": {"name": "media_key", "description": "Key of associated media in media library table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "retweet_count": {"name": "retweet_count", "description": "Number of times the tweet has been retweeted", "meta": {}, "data_type": null, "quote": null, "tags": []}, "retweeted": {"name": "retweeted", "description": "Whether the tweet has been retweeted", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source": {"name": "source", "description": "The source of the tweet", "meta": {}, "data_type": null, "quote": null, "tags": []}, "truncated": {"name": "truncated", "description": "Whether the tweet has been truncated", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tweet_type": {"name": "tweet_type", "description": "The type of the tweet", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "The ID of the user who tweeted the tweet", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record, if the unioning functionality is being used.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "twitter_organic_source://models/stg_twitter_organic.yml", "compiled_path": "target/compiled/twitter_organic_source/models/stg_twitter_organic__tweet.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_twitter_organic", "materialized": "table"}, "created_at": 1671477151.988929, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"social_media_rollup_integration_tests_stg_twitter_organic\".\"stg_twitter_organic__tweet_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    card_uri\n    \n as \n    \n    card_uri\n    \n, \n    \n    \n    coordinates_coordinates\n    \n as \n    \n    coordinates_coordinates\n    \n, \n    \n    \n    coordinates_type\n    \n as \n    \n    coordinates_type\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    favorite_count\n    \n as \n    \n    favorite_count\n    \n, \n    \n    \n    favorited\n    \n as \n    \n    favorited\n    \n, \n    \n    \n    followers\n    \n as \n    \n    followers\n    \n, \n    cast(null as TEXT) as \n    \n    full_text\n    \n , \n    \n    \n    geo_coordinates\n    \n as \n    \n    geo_coordinates\n    \n, \n    \n    \n    geo_type\n    \n as \n    \n    geo_type\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    in_reply_to_screen_name\n    \n as \n    \n    in_reply_to_screen_name\n    \n, \n    \n    \n    in_reply_to_status_id\n    \n as \n    \n    in_reply_to_status_id\n    \n, \n    \n    \n    in_reply_to_user_id\n    \n as \n    \n    in_reply_to_user_id\n    \n, \n    \n    \n    lang\n    \n as \n    \n    lang\n    \n, \n    \n    \n    media_key\n    \n as \n    \n    media_key\n    \n, \n    \n    \n    retweet_count\n    \n as \n    \n    retweet_count\n    \n, \n    \n    \n    retweeted\n    \n as \n    \n    retweeted\n    \n, \n    \n    \n    source\n    \n as \n    \n    source\n    \n, \n    \n    \n    truncated\n    \n as \n    \n    truncated\n    \n, \n    \n    \n    tweet_type\n    \n as \n    \n    tweet_type\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        account_id,\n        card_uri,\n        coordinates_coordinates,\n        coordinates_type,\n        created_at as created_timestamp,\n        favorite_count,\n        favorited,\n        followers,\n        full_text as tweet_text,\n        geo_coordinates,\n        geo_type,\n        id as organic_tweet_id,\n        'https://twitter.com/p/status/' || id as post_url,\n        in_reply_to_screen_name,\n        in_reply_to_status_id,\n        in_reply_to_user_id,\n        lang as language,\n        media_key,\n        retweet_count,\n        retweeted,\n        source,\n        truncated,\n        tweet_type,\n        cast(user_id as bigint) as user_id,\n        source_relation\n    from fields\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests_stg_twitter_organic\".\"stg_twitter_organic__tweet\""}, "model.twitter_organic_source.stg_twitter_organic__account_history": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.twitter_organic_source.get_account_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation"], "nodes": ["model.twitter_organic_source.stg_twitter_organic__account_history_tmp", "model.twitter_organic_source.stg_twitter_organic__account_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_twitter_organic", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests_stg_twitter_organic", "fqn": ["twitter_organic_source", "stg_twitter_organic__account_history"], "unique_id": "model.twitter_organic_source.stg_twitter_organic__account_history", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_twitter_organic__account_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_twitter_organic__account_history_tmp')),\n                staging_columns=get_account_history_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='twitter_organic_union_schemas', \n            union_database_variable='twitter_organic_union_databases') \n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        business_id,\n        business_name,\n        created_at as created_timestamp,\n        deleted as is_deleted,\n        id as account_id,\n        industry_type,\n        name as account_name,\n        timezone,\n        updated_at as updated_timestamp,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "package_name": "twitter_organic_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/twitter_organic_source", "path": "stg_twitter_organic__account_history.sql", "original_file_path": "models/stg_twitter_organic__account_history.sql", "name": "stg_twitter_organic__account_history", "alias": "stg_twitter_organic__account_history", "checksum": {"name": "sha256", "checksum": "db568fc86719076a1c133a724c93346fcd9435f187bfff2bfa22ecd446466187"}, "tags": [], "refs": [["stg_twitter_organic__account_history_tmp"], ["stg_twitter_organic__account_history_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a version of a Twitter ad account.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "approval_status": {"name": "approval_status", "description": "Approval status of the account in Twitter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "business_id": {"name": "business_id", "description": "ID of the associated business in Twitter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "business_name": {"name": "business_name", "description": "Name of the associated business in Twitter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "Date and time when the account was created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_deleted": {"name": "is_deleted", "description": "Whether the account has been deleted", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "ID of the account in Twitter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "industry_type": {"name": "industry_type", "description": "Industry type of the account in Twitter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "Name of the account in Twitter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "salt": {"name": "salt", "description": "Salt used to generate the account's unique ID", "meta": {}, "data_type": null, "quote": null, "tags": []}, "timezone": {"name": "timezone", "description": "Timezone of the account in Twitter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_timestamp": {"name": "updated_timestamp", "description": "Date and time when the account was last updated", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record, if the unioning functionality is being used.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "twitter_organic_source://models/stg_twitter_organic.yml", "compiled_path": "target/compiled/twitter_organic_source/models/stg_twitter_organic__account_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_twitter_organic", "materialized": "table"}, "created_at": 1671477151.9814231, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"social_media_rollup_integration_tests_stg_twitter_organic\".\"stg_twitter_organic__account_history_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    approval_status\n    \n as \n    \n    approval_status\n    \n, \n    \n    \n    business_id\n    \n as \n    \n    business_id\n    \n, \n    \n    \n    business_name\n    \n as \n    \n    business_name\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    deleted\n    \n as \n    \n    deleted\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    industry_type\n    \n as \n    \n    industry_type\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    salt\n    \n as \n    \n    salt\n    \n, \n    \n    \n    timezone\n    \n as \n    \n    timezone\n    \n, \n    \n    \n    timezone_switch_at\n    \n as \n    \n    timezone_switch_at\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        business_id,\n        business_name,\n        created_at as created_timestamp,\n        deleted as is_deleted,\n        id as account_id,\n        industry_type,\n        name as account_name,\n        timezone,\n        updated_at as updated_timestamp,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests_stg_twitter_organic\".\"stg_twitter_organic__account_history\""}, "model.twitter_organic_source.stg_twitter_organic__organic_tweet_report": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.twitter_organic_source.get_organic_tweet_report_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation"], "nodes": ["model.twitter_organic_source.stg_twitter_organic__organic_tweet_report_tmp", "model.twitter_organic_source.stg_twitter_organic__organic_tweet_report_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_twitter_organic", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests_stg_twitter_organic", "fqn": ["twitter_organic_source", "stg_twitter_organic__organic_tweet_report"], "unique_id": "model.twitter_organic_source.stg_twitter_organic__organic_tweet_report", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_twitter_organic__organic_tweet_report_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_twitter_organic__organic_tweet_report_tmp')),\n                staging_columns=get_organic_tweet_report_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='twitter_organic_union_schemas', \n            union_database_variable='twitter_organic_union_databases') \n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        account_id,\n        app_clicks,\n        card_engagements,\n        carousel_swipes,\n        clicks,\n        date as date_day,\n        engagements,\n        follows,\n        impressions,\n        likes,\n        organic_tweet_id,\n        placement,\n        poll_card_vote,\n        qualified_impressions,\n        replies,\n        retweets,\n        tweets_send,\n        unfollows,\n        url_clicks,\n        video_15_s_views,\n        video_3_s_100_pct_views,\n        video_6_s_views,\n        video_content_starts,\n        video_cta_clicks,\n        video_total_views,\n        video_views_100,\n        video_views_25,\n        video_views_50,\n        video_views_75,\n        source_relation\n    from fields\n)\n\nselect * from final", "language": "sql", "package_name": "twitter_organic_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/twitter_organic_source", "path": "stg_twitter_organic__organic_tweet_report.sql", "original_file_path": "models/stg_twitter_organic__organic_tweet_report.sql", "name": "stg_twitter_organic__organic_tweet_report", "alias": "stg_twitter_organic__organic_tweet_report", "checksum": {"name": "sha256", "checksum": "af28c34f111a4ee012775b08501f2a7e92faf2816df56e5e0ae343756de66a52"}, "tags": [], "refs": [["stg_twitter_organic__organic_tweet_report_tmp"], ["stg_twitter_organic__organic_tweet_report_tmp"]], "sources": [], "metrics": [], "description": "Each record represents metrics about a tweet on a specific date.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "ID of the associated account in Twitter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "app_clicks": {"name": "app_clicks", "description": "Number of clicks on app install campaigns", "meta": {}, "data_type": null, "quote": null, "tags": []}, "card_engagements": {"name": "card_engagements", "description": "Number of engagements on cards", "meta": {}, "data_type": null, "quote": null, "tags": []}, "carousel_swipes": {"name": "carousel_swipes", "description": "Number of swipes on carousels", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "Number of clicks on tweet", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "Date of the report", "meta": {}, "data_type": null, "quote": null, "tags": []}, "engagements": {"name": "engagements", "description": "Number of engagements on tweet", "meta": {}, "data_type": null, "quote": null, "tags": []}, "follows": {"name": "follows", "description": "Number of follows as a result of the tweet", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "Number of impressions on tweet", "meta": {}, "data_type": null, "quote": null, "tags": []}, "likes": {"name": "likes", "description": "Number of likes on tweet", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organic_tweet_id": {"name": "organic_tweet_id", "description": "ID of the tweet in Twitter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "poll_card_vote": {"name": "poll_card_vote", "description": "Number of votes on poll cards", "meta": {}, "data_type": null, "quote": null, "tags": []}, "qualified_impressions": {"name": "qualified_impressions", "description": "Number of qualified impressions on tweet", "meta": {}, "data_type": null, "quote": null, "tags": []}, "replies": {"name": "replies", "description": "Number of replies on tweet", "meta": {}, "data_type": null, "quote": null, "tags": []}, "retweets": {"name": "retweets", "description": "Number of retweets on tweet", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unfollows": {"name": "unfollows", "description": "Number of unfollows as a result of the tweet", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_clicks": {"name": "url_clicks", "description": "Number of clicks on URLs in tweet", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_15_s_views": {"name": "video_15_s_views", "description": "Number of 15-second views on video", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_3_s_100_pct_views": {"name": "video_3_s_100_pct_views", "description": "Total number of views where at least 3 seconds were played while 100% in view.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_6_s_views": {"name": "video_6_s_views", "description": "Number of 6-second views on video", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_content_starts": {"name": "video_content_starts", "description": "Number of times the video content started", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_cta_clicks": {"name": "video_cta_clicks", "description": "Number of clicks on tweet call-to-actions", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_total_views": {"name": "video_total_views", "description": "Total number of views on video", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_100": {"name": "video_views_100", "description": "Total number of views where at least 100% of the video was viewed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_25": {"name": "video_views_25", "description": "Total number of views where at least 25% of the video was viewed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_50": {"name": "video_views_50", "description": "Total number of views where at least 50% of the video was viewed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_75": {"name": "video_views_75", "description": "Total number of views where at least 75% of the video was viewed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record, if the unioning functionality is being used.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "twitter_organic_source://models/stg_twitter_organic.yml", "compiled_path": "target/compiled/twitter_organic_source/models/stg_twitter_organic__organic_tweet_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_twitter_organic", "materialized": "table"}, "created_at": 1671477151.985635, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"social_media_rollup_integration_tests_stg_twitter_organic\".\"stg_twitter_organic__organic_tweet_report_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    app_clicks\n    \n as \n    \n    app_clicks\n    \n, \n    \n    \n    card_engagements\n    \n as \n    \n    card_engagements\n    \n, \n    \n    \n    carousel_swipes\n    \n as \n    \n    carousel_swipes\n    \n, \n    \n    \n    clicks\n    \n as \n    \n    clicks\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    \n    \n    engagements\n    \n as \n    \n    engagements\n    \n, \n    \n    \n    follows\n    \n as \n    \n    follows\n    \n, \n    \n    \n    impressions\n    \n as \n    \n    impressions\n    \n, \n    \n    \n    likes\n    \n as \n    \n    likes\n    \n, \n    \n    \n    organic_tweet_id\n    \n as \n    \n    organic_tweet_id\n    \n, \n    \n    \n    placement\n    \n as \n    \n    placement\n    \n, \n    \n    \n    poll_card_vote\n    \n as \n    \n    poll_card_vote\n    \n, \n    \n    \n    qualified_impressions\n    \n as \n    \n    qualified_impressions\n    \n, \n    \n    \n    replies\n    \n as \n    \n    replies\n    \n, \n    \n    \n    retweets\n    \n as \n    \n    retweets\n    \n, \n    \n    \n    tweets_send\n    \n as \n    \n    tweets_send\n    \n, \n    \n    \n    unfollows\n    \n as \n    \n    unfollows\n    \n, \n    \n    \n    url_clicks\n    \n as \n    \n    url_clicks\n    \n, \n    \n    \n    video_15_s_views\n    \n as \n    \n    video_15_s_views\n    \n, \n    \n    \n    video_3_s_100_pct_views\n    \n as \n    \n    video_3_s_100_pct_views\n    \n, \n    \n    \n    video_6_s_views\n    \n as \n    \n    video_6_s_views\n    \n, \n    \n    \n    video_content_starts\n    \n as \n    \n    video_content_starts\n    \n, \n    \n    \n    video_cta_clicks\n    \n as \n    \n    video_cta_clicks\n    \n, \n    \n    \n    video_total_views\n    \n as \n    \n    video_total_views\n    \n, \n    \n    \n    video_views_100\n    \n as \n    \n    video_views_100\n    \n, \n    \n    \n    video_views_25\n    \n as \n    \n    video_views_25\n    \n, \n    \n    \n    video_views_50\n    \n as \n    \n    video_views_50\n    \n, \n    \n    \n    video_views_75\n    \n as \n    \n    video_views_75\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        account_id,\n        app_clicks,\n        card_engagements,\n        carousel_swipes,\n        clicks,\n        date as date_day,\n        engagements,\n        follows,\n        impressions,\n        likes,\n        organic_tweet_id,\n        placement,\n        poll_card_vote,\n        qualified_impressions,\n        replies,\n        retweets,\n        tweets_send,\n        unfollows,\n        url_clicks,\n        video_15_s_views,\n        video_3_s_100_pct_views,\n        video_6_s_views,\n        video_content_starts,\n        video_cta_clicks,\n        video_total_views,\n        video_views_100,\n        video_views_25,\n        video_views_50,\n        video_views_75,\n        source_relation\n    from fields\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests_stg_twitter_organic\".\"stg_twitter_organic__organic_tweet_report\""}, "model.twitter_organic_source.stg_twitter_organic__tweet_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["seed.social_media_rollup_integration_tests.twitter_organic_tweet_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_twitter_organic", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests_stg_twitter_organic", "fqn": ["twitter_organic_source", "tmp", "stg_twitter_organic__tweet_tmp"], "unique_id": "model.twitter_organic_source.stg_twitter_organic__tweet_tmp", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='tweet', \n        database_variable='twitter_organic_database', \n        schema_variable='twitter_organic_schema', \n        default_database=target.database,\n        default_schema='twitter_organic',\n        default_variable='tweet',\n        union_schema_variable='twitter_organic_union_schemas',\n        union_database_variable='twitter_organic_union_databases'\n    )\n}}", "language": "sql", "package_name": "twitter_organic_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/twitter_organic_source", "path": "tmp/stg_twitter_organic__tweet_tmp.sql", "original_file_path": "models/tmp/stg_twitter_organic__tweet_tmp.sql", "name": "stg_twitter_organic__tweet_tmp", "alias": "stg_twitter_organic__tweet_tmp", "checksum": {"name": "sha256", "checksum": "f9be2c3d97d7d0c50b0ae398f78d259d2f45de4bf11ed8a50b85aa8ce4ac32c3"}, "tags": [], "refs": [["twitter_organic_tweet_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/twitter_organic_source/models/tmp/stg_twitter_organic__tweet_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_twitter_organic", "materialized": "table"}, "created_at": 1671477151.602093, "compiled_code": "\n\n\n\n    select * \n    from \"postgres\".\"social_media_rollup_integration_tests\".\"twitter_organic_tweet_data\"\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests_stg_twitter_organic\".\"stg_twitter_organic__tweet_tmp\""}, "model.twitter_organic_source.stg_twitter_organic__twitter_user_history_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["seed.social_media_rollup_integration_tests.twitter_organic_twitter_user_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_twitter_organic", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests_stg_twitter_organic", "fqn": ["twitter_organic_source", "tmp", "stg_twitter_organic__twitter_user_history_tmp"], "unique_id": "model.twitter_organic_source.stg_twitter_organic__twitter_user_history_tmp", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='twitter_user_history', \n        database_variable='twitter_organic_database', \n        schema_variable='twitter_organic_schema', \n        default_database=target.database,\n        default_schema='twitter_organic',\n        default_variable='twitter_user_history',\n        union_schema_variable='twitter_organic_union_schemas',\n        union_database_variable='twitter_organic_union_databases'\n    )\n}}", "language": "sql", "package_name": "twitter_organic_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/twitter_organic_source", "path": "tmp/stg_twitter_organic__twitter_user_history_tmp.sql", "original_file_path": "models/tmp/stg_twitter_organic__twitter_user_history_tmp.sql", "name": "stg_twitter_organic__twitter_user_history_tmp", "alias": "stg_twitter_organic__twitter_user_history_tmp", "checksum": {"name": "sha256", "checksum": "b1af89cc8857a41fc9f31488575ac6897af0c2f8fea71fa2fa343a9e037279df"}, "tags": [], "refs": [["twitter_organic_twitter_user_history_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/twitter_organic_source/models/tmp/stg_twitter_organic__twitter_user_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_twitter_organic", "materialized": "table"}, "created_at": 1671477151.6057642, "compiled_code": "\n\n\n\n    select * \n    from \"postgres\".\"social_media_rollup_integration_tests\".\"twitter_organic_twitter_user_history_data\"\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests_stg_twitter_organic\".\"stg_twitter_organic__twitter_user_history_tmp\""}, "model.twitter_organic_source.stg_twitter_organic__account_history_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["seed.social_media_rollup_integration_tests.twitter_organic_account_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_twitter_organic", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests_stg_twitter_organic", "fqn": ["twitter_organic_source", "tmp", "stg_twitter_organic__account_history_tmp"], "unique_id": "model.twitter_organic_source.stg_twitter_organic__account_history_tmp", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='account_history', \n        database_variable='twitter_organic_database', \n        schema_variable='twitter_organic_schema', \n        default_database=target.database,\n        default_schema='twitter_organic',\n        default_variable='account_history',\n        union_schema_variable='twitter_organic_union_schemas',\n        union_database_variable='twitter_organic_union_databases'\n    )\n}}", "language": "sql", "package_name": "twitter_organic_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/twitter_organic_source", "path": "tmp/stg_twitter_organic__account_history_tmp.sql", "original_file_path": "models/tmp/stg_twitter_organic__account_history_tmp.sql", "name": "stg_twitter_organic__account_history_tmp", "alias": "stg_twitter_organic__account_history_tmp", "checksum": {"name": "sha256", "checksum": "79b199d5c9d4d0a5f1c4b58985df01cd59e975a06dc759722a37fb8f033ab045"}, "tags": [], "refs": [["twitter_organic_account_history_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/twitter_organic_source/models/tmp/stg_twitter_organic__account_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_twitter_organic", "materialized": "table"}, "created_at": 1671477151.60936, "compiled_code": "\n\n\n\n    select * \n    from \"postgres\".\"social_media_rollup_integration_tests\".\"twitter_organic_account_history_data\"\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests_stg_twitter_organic\".\"stg_twitter_organic__account_history_tmp\""}, "model.twitter_organic_source.stg_twitter_organic__organic_tweet_report_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["seed.social_media_rollup_integration_tests.twitter_organic_organic_tweet_report_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_twitter_organic", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests_stg_twitter_organic", "fqn": ["twitter_organic_source", "tmp", "stg_twitter_organic__organic_tweet_report_tmp"], "unique_id": "model.twitter_organic_source.stg_twitter_organic__organic_tweet_report_tmp", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='organic_tweet_report', \n        database_variable='twitter_organic_database', \n        schema_variable='twitter_organic_schema', \n        default_database=target.database,\n        default_schema='twitter_organic',\n        default_variable='organic_tweet_report',\n        union_schema_variable='twitter_organic_union_schemas',\n        union_database_variable='twitter_organic_union_databases'\n    )\n}}", "language": "sql", "package_name": "twitter_organic_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/twitter_organic_source", "path": "tmp/stg_twitter_organic__organic_tweet_report_tmp.sql", "original_file_path": "models/tmp/stg_twitter_organic__organic_tweet_report_tmp.sql", "name": "stg_twitter_organic__organic_tweet_report_tmp", "alias": "stg_twitter_organic__organic_tweet_report_tmp", "checksum": {"name": "sha256", "checksum": "a2cb129c3f23367ddf08e8097e7f3d9bd6baf126027bd575fe6e9b5be95c7f50"}, "tags": [], "refs": [["twitter_organic_organic_tweet_report_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/twitter_organic_source/models/tmp/stg_twitter_organic__organic_tweet_report_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_twitter_organic", "materialized": "table"}, "created_at": 1671477151.613006, "compiled_code": "\n\n\n\n    select * \n    from \"postgres\".\"social_media_rollup_integration_tests\".\"twitter_organic_organic_tweet_report_data\"\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests_stg_twitter_organic\".\"stg_twitter_organic__organic_tweet_report_tmp\""}, "model.facebook_pages_source.stg_facebook_pages__post_history": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.facebook_pages_source.get_post_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.split_part", "macro.dbt.concat"], "nodes": ["model.facebook_pages_source.stg_facebook_pages__post_history_tmp", "model.facebook_pages_source.stg_facebook_pages__post_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_facebook_pages", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests_stg_facebook_pages", "fqn": ["facebook_pages_source", "stg_facebook_pages__post_history"], "unique_id": "model.facebook_pages_source.stg_facebook_pages__post_history", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_facebook_pages__post_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_facebook_pages__post_history_tmp')),\n                staging_columns=get_post_history_columns()\n            )\n        }}\n                \n        {{ fivetran_utils.source_relation(\n            union_schema_variable='facebook_pages_union_schemas', \n            union_database_variable='facebook_pages_union_databases') \n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        allowed_advertising_objects,\n        created_time as created_timestamp,\n        id as post_id,\n        is_eligible_for_promotion,\n        is_hidden,\n        is_instagram_eligible,\n        is_published,\n        message as post_message,\n        page_id,\n        parent_id,\n        privacy_allow,\n        privacy_deny,\n        privacy_description,\n        privacy_friends,\n        privacy_value,\n        promotable_id,\n        share_count,\n        status_type,\n        updated_time as updated_timestamp,\n        {{ dbt.concat([\n            \"'https://facebook.com/'\", \n            dbt.split_part('id',\"'_'\", 1), \n            \"'/posts/'\", \n            dbt.split_part('id',\"'_'\", 2)\n            ]) }} as post_url,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "package_name": "facebook_pages_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/facebook_pages_source", "path": "stg_facebook_pages__post_history.sql", "original_file_path": "models/stg_facebook_pages__post_history.sql", "name": "stg_facebook_pages__post_history", "alias": "stg_facebook_pages__post_history", "checksum": {"name": "sha256", "checksum": "2b8da390764ac6be486ac3440ea8556ef5d56e211a6c2ab165420ced55e34344"}, "tags": [], "refs": [["stg_facebook_pages__post_history_tmp"], ["stg_facebook_pages__post_history_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a version of a post in Facebook.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The timestamp of when the data was last synced by Fivetran", "meta": {}, "data_type": null, "quote": null, "tags": []}, "allowed_advertising_objects": {"name": "allowed_advertising_objects", "description": "The only objectives under which this post can be advertised.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "The time the post was initially published. For a post about a life event, this is the date and time of the life event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_id": {"name": "post_id", "description": "The ID of the post.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_eligible_for_promotion": {"name": "is_eligible_for_promotion", "description": "Whether this post is eligible to be promoted on Facebook.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_hidden": {"name": "is_hidden", "description": "Whether this post is hidden.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_instagram_eligible": {"name": "is_instagram_eligible", "description": "Whether this post can be promoted in Instagram.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_published": {"name": "is_published", "description": "Indicates whether a scheduled post was published (applies to scheduled Page Post only, for users post and instantly published posts this value is always true). Note that this value is always false for page posts created as part of the Ad Creation process.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_message": {"name": "post_message", "description": "The status message in the post.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_id": {"name": "page_id", "description": "The ID of the page on which the post was published.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_id": {"name": "parent_id", "description": "The ID of a parent post for this post, if it exists. For example, if this story is a 'Your Page was mentioned in a post' story, the parent_id is the original post where the mention happened.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "privacy_allow": {"name": "privacy_allow", "description": "If value is CUSTOM, this is a comma-separated ID list of Users and friend lists (if any) that can see the post.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "privacy_deny": {"name": "privacy_deny", "description": "If value is CUSTOM, this is a comma-separated ID list of Users and friend lists (if any) that cannot see the post.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "privacy_description": {"name": "privacy_description", "description": "Text that describes the privacy settings, as they would appear on Facebook.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "privacy_friends": {"name": "privacy_friends", "description": "If value is CUSTOM, this indicates which group of friends can see the post.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "privacy_value": {"name": "privacy_value", "description": "The actual privacy setting.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "promotable_id": {"name": "promotable_id", "description": "ID of post to use for promotion for stories that cannot be promoted directly.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "share_count": {"name": "share_count", "description": "The share count of this post. The share count may include deleted posts and posts you cannot see for privacy reasons", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status_type": {"name": "status_type", "description": "The type of a status update.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_timestamp": {"name": "updated_timestamp", "description": "The time the post was last updated, which occurs when the post was created, edited, or a User comments on a post.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record, if the unioning functionality is being used.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_url": {"name": "post_url", "description": "The URL of the post.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "facebook_pages_source://models/stg_facebook_pages.yml", "compiled_path": "target/compiled/facebook_pages_source/models/stg_facebook_pages__post_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_facebook_pages", "materialized": "table"}, "created_at": 1671477152.0560918, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"social_media_rollup_integration_tests_stg_facebook_pages\".\"stg_facebook_pages__post_history_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    allowed_advertising_objects\n    \n as \n    \n    allowed_advertising_objects\n    \n, \n    \n    \n    created_time\n    \n as \n    \n    created_time\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    is_eligible_for_promotion\n    \n as \n    \n    is_eligible_for_promotion\n    \n, \n    \n    \n    is_hidden\n    \n as \n    \n    is_hidden\n    \n, \n    \n    \n    is_instagram_eligible\n    \n as \n    \n    is_instagram_eligible\n    \n, \n    \n    \n    is_published\n    \n as \n    \n    is_published\n    \n, \n    \n    \n    message\n    \n as \n    \n    message\n    \n, \n    \n    \n    page_id\n    \n as \n    \n    page_id\n    \n, \n    \n    \n    parent_id\n    \n as \n    \n    parent_id\n    \n, \n    \n    \n    privacy_allow\n    \n as \n    \n    privacy_allow\n    \n, \n    \n    \n    privacy_deny\n    \n as \n    \n    privacy_deny\n    \n, \n    \n    \n    privacy_description\n    \n as \n    \n    privacy_description\n    \n, \n    \n    \n    privacy_friends\n    \n as \n    \n    privacy_friends\n    \n, \n    \n    \n    privacy_value\n    \n as \n    \n    privacy_value\n    \n, \n    \n    \n    promotable_id\n    \n as \n    \n    promotable_id\n    \n, \n    \n    \n    share_count\n    \n as \n    \n    share_count\n    \n, \n    \n    \n    status_type\n    \n as \n    \n    status_type\n    \n, \n    \n    \n    updated_time\n    \n as \n    \n    updated_time\n    \n\n\n\n                \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        allowed_advertising_objects,\n        created_time as created_timestamp,\n        id as post_id,\n        is_eligible_for_promotion,\n        is_hidden,\n        is_instagram_eligible,\n        is_published,\n        message as post_message,\n        page_id,\n        parent_id,\n        privacy_allow,\n        privacy_deny,\n        privacy_description,\n        privacy_friends,\n        privacy_value,\n        promotable_id,\n        share_count,\n        status_type,\n        updated_time as updated_timestamp,\n        'https://facebook.com/' || \n\n  \n    \n\n    split_part(\n        id,\n        '_',\n        1\n        )\n\n\n  \n\n || '/posts/' || \n\n  \n    \n\n    split_part(\n        id,\n        '_',\n        2\n        )\n\n\n  \n\n as post_url,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests_stg_facebook_pages\".\"stg_facebook_pages__post_history\""}, "model.facebook_pages_source.stg_facebook_pages__page": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.facebook_pages_source.get_page_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation"], "nodes": ["model.facebook_pages_source.stg_facebook_pages__page_tmp", "model.facebook_pages_source.stg_facebook_pages__page_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_facebook_pages", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests_stg_facebook_pages", "fqn": ["facebook_pages_source", "stg_facebook_pages__page"], "unique_id": "model.facebook_pages_source.stg_facebook_pages__page", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_facebook_pages__page_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_facebook_pages__page_tmp')),\n                staging_columns=get_page_columns()\n            )\n        }}\n                \n        {{ fivetran_utils.source_relation(\n            union_schema_variable='facebook_pages_union_schemas', \n            union_database_variable='facebook_pages_union_databases') \n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_deleted,\n        _fivetran_synced,\n        affiliation,\n        app_id,\n        artists_we_like,\n        attire,\n        awards,\n        band_interests,\n        band_members,\n        bio,\n        birthday,\n        booking_agent,\n        built,\n        can_checkin,\n        can_post,\n        category,\n        category_list,\n        checkins,\n        company_overview,\n        culinary_team,\n        current_location,\n        description as page_description,\n        directed_by,\n        display_subtext,\n        emails,\n        fan_count,\n        features,\n        food_styles,\n        founded,\n        general_info,\n        general_manager,\n        genre,\n        global_brand_page_name,\n        has_added_app,\n        has_transitioned_to_new_page_experience,\n        has_whatsapp_number,\n        hometown,\n        id as page_id,\n        impressum,\n        influences,\n        is_always_open,\n        is_chain,\n        is_community_page,\n        is_eligible_for_branded_content,\n        is_messenger_bot_get_started_enabled,\n        is_messenger_platform_bot,\n        is_owned,\n        is_permanently_closed,\n        is_published,\n        is_unclaimed,\n        members,\n        mission,\n        mpg,\n        name as page_name,\n        network,\n        new_like_count,\n        overall_star_rating,\n        personal_info,\n        personal_interests,\n        pharma_safety_info,\n        phone,\n        place_type,\n        plot_outline,\n        press_contact,\n        price_range,\n        produced_by,\n        products,\n        promotion_eligible,\n        promotion_ineligible_reason,\n        public_transit,\n        rating_count,\n        record_label,\n        release_date,\n        schedule,\n        screenplay_by,\n        season,\n        single_line_address,\n        starring,\n        store_number,\n        studio,\n        talking_about_count,\n        username,\n        website,\n        were_here_count,\n        whatsapp_number,\n        written_by,\n        source_relation\n    from fields\n)\n\nselect * from final", "language": "sql", "package_name": "facebook_pages_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/facebook_pages_source", "path": "stg_facebook_pages__page.sql", "original_file_path": "models/stg_facebook_pages__page.sql", "name": "stg_facebook_pages__page", "alias": "stg_facebook_pages__page", "checksum": {"name": "sha256", "checksum": "e740e66ecb4043b54e9d64da5187eb6f079178e53c8f0b51fee6c3fa4c1f9833"}, "tags": [], "refs": [["stg_facebook_pages__page_tmp"], ["stg_facebook_pages__page_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a Facebook page.", "columns": {"_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Whether the record has been deleted", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The timestamp of when the data was last synced by Fivetran", "meta": {}, "data_type": null, "quote": null, "tags": []}, "affiliation": {"name": "affiliation", "description": "Affiliation of this person. Applicable to Pages representing people.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "app_id": {"name": "app_id", "description": "App ID for app-owned Pages and app Pages", "meta": {}, "data_type": null, "quote": null, "tags": []}, "artists_we_like": {"name": "artists_we_like", "description": "Artists the band likes. Applicable to Bands.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attire": {"name": "attire", "description": "Dress code of the business. Applicable to Restaurants or Nightlife. Can be one of Casual, Dressy or Unspecified.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "awards": {"name": "awards", "description": "The awards information of the film. Applicable to Films.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "band_interests": {"name": "band_interests", "description": "Band interests. Applicable to Bands.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "band_members": {"name": "band_members", "description": "Members of the band. Applicable to Bands.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bio": {"name": "bio", "description": "Biography of the band. Applicable to Bands.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "birthday": {"name": "birthday", "description": "Birthday of this person. Applicable to Pages representing people.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "booking_agent": {"name": "booking_agent", "description": "Booking agent of the band. Applicable to Bands.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "built": {"name": "built", "description": "Year vehicle was built. Applicable to Vehicles.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "can_checkin": {"name": "can_checkin", "description": "Whether the Page has checkin functionality enabled.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "can_post": {"name": "can_post", "description": "Indicates whether the current app user can post on this Page.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "category": {"name": "category", "description": "The Page's category. e.g. Product/Service, Computers/Technology.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "category_list": {"name": "category_list", "description": "The Page's sub-categories.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "checkins": {"name": "checkins", "description": "Number of checkins at a place represented by a Page", "meta": {}, "data_type": null, "quote": null, "tags": []}, "company_overview": {"name": "company_overview", "description": "The company overview. Applicable to Companies.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "culinary_team": {"name": "culinary_team", "description": "Culinary team of the business. Applicable to Restaurants or Nightlife.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "current_location": {"name": "current_location", "description": "Current location of the Page.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_description": {"name": "page_description", "description": "The description of the Page.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "directed_by": {"name": "directed_by", "description": "The director of the film. Applicable to Films.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "display_subtext": {"name": "display_subtext", "description": "Subtext about the Page being viewed. C", "meta": {}, "data_type": null, "quote": null, "tags": []}, "emails": {"name": "emails", "description": "The emails listed in the About section of a Page.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fan_count": {"name": "fan_count", "description": "The number of users who like the Page. For Global Pages this is the count for all Pages across the brand.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "features": {"name": "features", "description": "Features of the vehicle. Applicable to Vehicles.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "food_styles": {"name": "food_styles", "description": "The restaurant's food styles. Applicable to Restaurants", "meta": {}, "data_type": null, "quote": null, "tags": []}, "founded": {"name": "founded", "description": "When the company was founded. Applicable to Pages in the Company category.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "general_info": {"name": "general_info", "description": "General information provided by the Page.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "general_manager": {"name": "general_manager", "description": "General manager of the business. Applicable to Restaurants or Nightlife.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "genre": {"name": "genre", "description": "The genre of the film. Applicable to Films.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "global_brand_page_name": {"name": "global_brand_page_name", "description": "The name of the Page with country codes appended for Global Pages.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "has_added_app": {"name": "has_added_app", "description": "Indicates whether this Page has added the app making the query in a Page tab.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "has_transitioned_to_new_page_experience": {"name": "has_transitioned_to_new_page_experience", "description": "indicates whether a page has transitioned to new page experience or not", "meta": {}, "data_type": null, "quote": null, "tags": []}, "has_whatsapp_number": {"name": "has_whatsapp_number", "description": "Indicates whether WhatsApp number connected to this page is a WhatsApp business number. C", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hometown": {"name": "hometown", "description": "Hometown of the band. Applicable to Bands", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_id": {"name": "page_id", "description": "The ID of the Page.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressum": {"name": "impressum", "description": "Legal information about the Page publishers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "influences": {"name": "influences", "description": "Influences on the band. Applicable to Bands.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_always_open": {"name": "is_always_open", "description": "Indicates whether this location is always open.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_chain": {"name": "is_chain", "description": "Indicates whether location is part of a chain.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_community_page": {"name": "is_community_page", "description": "Indicates whether the Page is a community Page.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_eligible_for_branded_content": {"name": "is_eligible_for_branded_content", "description": "Indicates whether the page is eligible for the branded content tool", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_messenger_bot_get_started_enabled": {"name": "is_messenger_bot_get_started_enabled", "description": "Indicates whether the page is a Messenger Platform Bot with Get Started button enabled", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_messenger_platform_bot": {"name": "is_messenger_platform_bot", "description": "Indicates whether the page is a Messenger Platform Bot.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_owned": {"name": "is_owned", "description": "Indicates whether Page is owned.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_permanently_closed": {"name": "is_permanently_closed", "description": "Whether the business corresponding to this Page is permanently closed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_published": {"name": "is_published", "description": "Indicates whether the Page is published and visible to non-admins", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_unclaimed": {"name": "is_unclaimed", "description": "Indicates whether the Page is unclaimed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "members": {"name": "members", "description": "Members of this org. Applicable to Pages representing Team Orgs.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "mission": {"name": "mission", "description": "The company mission. Applicable to Companies", "meta": {}, "data_type": null, "quote": null, "tags": []}, "mpg": {"name": "mpg", "description": "MPG of the vehicle. Applicable to Vehicles.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_name": {"name": "page_name", "description": "The name of the Page", "meta": {}, "data_type": null, "quote": null, "tags": []}, "network": {"name": "network", "description": "The TV network for the TV show. Applicable to TV Shows.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "new_like_count": {"name": "new_like_count", "description": "The number of people who have liked the Page, since the last login.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "overall_star_rating": {"name": "overall_star_rating", "description": "Overall page rating based on rating survey from users on a scale of 1-5. This value is normalized and is not guaranteed to be a strict average of user ratings. If there are 0 or a small number of ratings, this field will not be returned.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "personal_info": {"name": "personal_info", "description": "Personal information. Applicable to Pages representing People.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "personal_interests": {"name": "personal_interests", "description": "Personal interests. Applicable to Pages representing People.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pharma_safety_info": {"name": "pharma_safety_info", "description": "Pharmacy safety information. Applicable to Pharmaceutical companies.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "phone": {"name": "phone", "description": "Phone number provided by a Page.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "place_type": {"name": "place_type", "description": "For places, the category of the place. Value can be CITY, COUNTRY, EVENT, GEO_ENTITY, PLACE, RESIDENCE, STATE_PROVINCE, or TEXT.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "plot_outline": {"name": "plot_outline", "description": "The plot outline of the film. Applicable to Films.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "press_contact": {"name": "press_contact", "description": "Press contact information of the band. Applicable to Bands", "meta": {}, "data_type": null, "quote": null, "tags": []}, "price_range": {"name": "price_range", "description": "Price range of the business, such as a restaurant or salon. Values can be one of $, $$, $$$, $$$$, Not Applicable, or null if no value is set.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "produced_by": {"name": "produced_by", "description": "The productor of the film. Applicable to Films.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "products": {"name": "products", "description": "The products of this company. Applicable to Companies", "meta": {}, "data_type": null, "quote": null, "tags": []}, "promotion_eligible": {"name": "promotion_eligible", "description": "Boosted posts eligibility status. Only visible to a page admin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "promotion_ineligible_reason": {"name": "promotion_ineligible_reason", "description": "Reason for which boosted posts are not eligible.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "public_transit": {"name": "public_transit", "description": "Public transit to the business. Applicable to Restaurants or Nightlife.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rating_count": {"name": "rating_count", "description": "Number of ratings for the Page (limited to ratings that are publicly accessible).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "record_label": {"name": "record_label", "description": "Record label of the band. Applicable to Bands.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "release_date": {"name": "release_date", "description": "The film's release date. Applicable to Films.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schedule": {"name": "schedule", "description": "The air schedule of the TV show. Applicable to TV Shows.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "screenplay_by": {"name": "screenplay_by", "description": "The screenwriter of the film. Applicable to Films.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "season": {"name": "season", "description": "The season information of the TV Show. Applicable to TV Shows.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "single_line_address": {"name": "single_line_address", "description": "The Page address, if any, in a simple single line format.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "starring": {"name": "starring", "description": "The cast of the film. Applicable to Films.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "store_number": {"name": "store_number", "description": "Unique store number for this location Page", "meta": {}, "data_type": null, "quote": null, "tags": []}, "studio": {"name": "studio", "description": "The studio for the film production. Applicable to Films", "meta": {}, "data_type": null, "quote": null, "tags": []}, "talking_about_count": {"name": "talking_about_count", "description": "The number of people talking about this Page", "meta": {}, "data_type": null, "quote": null, "tags": []}, "username": {"name": "username", "description": "The alias of the Page. For example, for www.facebook.com/platform the username is 'platform'", "meta": {}, "data_type": null, "quote": null, "tags": []}, "website": {"name": "website", "description": "The URL of the Page's website.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "were_here_count": {"name": "were_here_count", "description": "The number of visits to this Page's location. If the Page setting Show map, check-ins and star ratings on the Page (under Page Settings > Page Info > Address) is disabled, then this value will also be disabled.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "whatsapp_number": {"name": "whatsapp_number", "description": "The Page's WhatsApp number.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "written_by": {"name": "written_by", "description": "The writer of the TV show. Applicable to TV Shows.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record, if the unioning functionality is being used.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "facebook_pages_source://models/stg_facebook_pages.yml", "compiled_path": "target/compiled/facebook_pages_source/models/stg_facebook_pages__page.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_facebook_pages", "materialized": "table"}, "created_at": 1671477152.052795, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"social_media_rollup_integration_tests_stg_facebook_pages\".\"stg_facebook_pages__page_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    affiliation\n    \n as \n    \n    affiliation\n    \n, \n    \n    \n    app_id\n    \n as \n    \n    app_id\n    \n, \n    \n    \n    artists_we_like\n    \n as \n    \n    artists_we_like\n    \n, \n    \n    \n    attire\n    \n as \n    \n    attire\n    \n, \n    \n    \n    awards\n    \n as \n    \n    awards\n    \n, \n    \n    \n    band_interests\n    \n as \n    \n    band_interests\n    \n, \n    \n    \n    band_members\n    \n as \n    \n    band_members\n    \n, \n    \n    \n    bio\n    \n as \n    \n    bio\n    \n, \n    \n    \n    birthday\n    \n as \n    \n    birthday\n    \n, \n    \n    \n    booking_agent\n    \n as \n    \n    booking_agent\n    \n, \n    \n    \n    built\n    \n as \n    \n    built\n    \n, \n    \n    \n    can_checkin\n    \n as \n    \n    can_checkin\n    \n, \n    \n    \n    can_post\n    \n as \n    \n    can_post\n    \n, \n    \n    \n    category\n    \n as \n    \n    category\n    \n, \n    \n    \n    category_list\n    \n as \n    \n    category_list\n    \n, \n    \n    \n    checkins\n    \n as \n    \n    checkins\n    \n, \n    \n    \n    company_overview\n    \n as \n    \n    company_overview\n    \n, \n    \n    \n    culinary_team\n    \n as \n    \n    culinary_team\n    \n, \n    \n    \n    current_location\n    \n as \n    \n    current_location\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    directed_by\n    \n as \n    \n    directed_by\n    \n, \n    \n    \n    display_subtext\n    \n as \n    \n    display_subtext\n    \n, \n    \n    \n    emails\n    \n as \n    \n    emails\n    \n, \n    \n    \n    fan_count\n    \n as \n    \n    fan_count\n    \n, \n    \n    \n    features\n    \n as \n    \n    features\n    \n, \n    \n    \n    food_styles\n    \n as \n    \n    food_styles\n    \n, \n    \n    \n    founded\n    \n as \n    \n    founded\n    \n, \n    \n    \n    general_info\n    \n as \n    \n    general_info\n    \n, \n    \n    \n    general_manager\n    \n as \n    \n    general_manager\n    \n, \n    \n    \n    genre\n    \n as \n    \n    genre\n    \n, \n    \n    \n    global_brand_page_name\n    \n as \n    \n    global_brand_page_name\n    \n, \n    \n    \n    has_added_app\n    \n as \n    \n    has_added_app\n    \n, \n    \n    \n    has_transitioned_to_new_page_experience\n    \n as \n    \n    has_transitioned_to_new_page_experience\n    \n, \n    \n    \n    has_whatsapp_number\n    \n as \n    \n    has_whatsapp_number\n    \n, \n    \n    \n    hometown\n    \n as \n    \n    hometown\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    impressum\n    \n as \n    \n    impressum\n    \n, \n    \n    \n    influences\n    \n as \n    \n    influences\n    \n, \n    \n    \n    is_always_open\n    \n as \n    \n    is_always_open\n    \n, \n    \n    \n    is_chain\n    \n as \n    \n    is_chain\n    \n, \n    \n    \n    is_community_page\n    \n as \n    \n    is_community_page\n    \n, \n    \n    \n    is_eligible_for_branded_content\n    \n as \n    \n    is_eligible_for_branded_content\n    \n, \n    \n    \n    is_messenger_bot_get_started_enabled\n    \n as \n    \n    is_messenger_bot_get_started_enabled\n    \n, \n    \n    \n    is_messenger_platform_bot\n    \n as \n    \n    is_messenger_platform_bot\n    \n, \n    \n    \n    is_owned\n    \n as \n    \n    is_owned\n    \n, \n    \n    \n    is_permanently_closed\n    \n as \n    \n    is_permanently_closed\n    \n, \n    \n    \n    is_published\n    \n as \n    \n    is_published\n    \n, \n    \n    \n    is_unclaimed\n    \n as \n    \n    is_unclaimed\n    \n, \n    \n    \n    members\n    \n as \n    \n    members\n    \n, \n    \n    \n    mission\n    \n as \n    \n    mission\n    \n, \n    \n    \n    mpg\n    \n as \n    \n    mpg\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    network\n    \n as \n    \n    network\n    \n, \n    \n    \n    new_like_count\n    \n as \n    \n    new_like_count\n    \n, \n    \n    \n    overall_star_rating\n    \n as \n    \n    overall_star_rating\n    \n, \n    \n    \n    personal_info\n    \n as \n    \n    personal_info\n    \n, \n    \n    \n    personal_interests\n    \n as \n    \n    personal_interests\n    \n, \n    \n    \n    pharma_safety_info\n    \n as \n    \n    pharma_safety_info\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    place_type\n    \n as \n    \n    place_type\n    \n, \n    \n    \n    plot_outline\n    \n as \n    \n    plot_outline\n    \n, \n    \n    \n    press_contact\n    \n as \n    \n    press_contact\n    \n, \n    \n    \n    price_range\n    \n as \n    \n    price_range\n    \n, \n    \n    \n    produced_by\n    \n as \n    \n    produced_by\n    \n, \n    \n    \n    products\n    \n as \n    \n    products\n    \n, \n    \n    \n    promotion_eligible\n    \n as \n    \n    promotion_eligible\n    \n, \n    \n    \n    promotion_ineligible_reason\n    \n as \n    \n    promotion_ineligible_reason\n    \n, \n    \n    \n    public_transit\n    \n as \n    \n    public_transit\n    \n, \n    \n    \n    rating_count\n    \n as \n    \n    rating_count\n    \n, \n    \n    \n    record_label\n    \n as \n    \n    record_label\n    \n, \n    \n    \n    release_date\n    \n as \n    \n    release_date\n    \n, \n    \n    \n    schedule\n    \n as \n    \n    schedule\n    \n, \n    \n    \n    screenplay_by\n    \n as \n    \n    screenplay_by\n    \n, \n    \n    \n    season\n    \n as \n    \n    season\n    \n, \n    \n    \n    single_line_address\n    \n as \n    \n    single_line_address\n    \n, \n    \n    \n    starring\n    \n as \n    \n    starring\n    \n, \n    \n    \n    store_number\n    \n as \n    \n    store_number\n    \n, \n    \n    \n    studio\n    \n as \n    \n    studio\n    \n, \n    \n    \n    talking_about_count\n    \n as \n    \n    talking_about_count\n    \n, \n    \n    \n    username\n    \n as \n    \n    username\n    \n, \n    \n    \n    website\n    \n as \n    \n    website\n    \n, \n    \n    \n    were_here_count\n    \n as \n    \n    were_here_count\n    \n, \n    \n    \n    whatsapp_number\n    \n as \n    \n    whatsapp_number\n    \n, \n    \n    \n    written_by\n    \n as \n    \n    written_by\n    \n\n\n\n                \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_deleted,\n        _fivetran_synced,\n        affiliation,\n        app_id,\n        artists_we_like,\n        attire,\n        awards,\n        band_interests,\n        band_members,\n        bio,\n        birthday,\n        booking_agent,\n        built,\n        can_checkin,\n        can_post,\n        category,\n        category_list,\n        checkins,\n        company_overview,\n        culinary_team,\n        current_location,\n        description as page_description,\n        directed_by,\n        display_subtext,\n        emails,\n        fan_count,\n        features,\n        food_styles,\n        founded,\n        general_info,\n        general_manager,\n        genre,\n        global_brand_page_name,\n        has_added_app,\n        has_transitioned_to_new_page_experience,\n        has_whatsapp_number,\n        hometown,\n        id as page_id,\n        impressum,\n        influences,\n        is_always_open,\n        is_chain,\n        is_community_page,\n        is_eligible_for_branded_content,\n        is_messenger_bot_get_started_enabled,\n        is_messenger_platform_bot,\n        is_owned,\n        is_permanently_closed,\n        is_published,\n        is_unclaimed,\n        members,\n        mission,\n        mpg,\n        name as page_name,\n        network,\n        new_like_count,\n        overall_star_rating,\n        personal_info,\n        personal_interests,\n        pharma_safety_info,\n        phone,\n        place_type,\n        plot_outline,\n        press_contact,\n        price_range,\n        produced_by,\n        products,\n        promotion_eligible,\n        promotion_ineligible_reason,\n        public_transit,\n        rating_count,\n        record_label,\n        release_date,\n        schedule,\n        screenplay_by,\n        season,\n        single_line_address,\n        starring,\n        store_number,\n        studio,\n        talking_about_count,\n        username,\n        website,\n        were_here_count,\n        whatsapp_number,\n        written_by,\n        source_relation\n    from fields\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests_stg_facebook_pages\".\"stg_facebook_pages__page\""}, "model.facebook_pages_source.stg_facebook_pages__daily_page_metrics_total": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.facebook_pages_source.get_daily_page_metrics_total_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation"], "nodes": ["model.facebook_pages_source.stg_facebook_pages__daily_page_metrics_total_tmp", "model.facebook_pages_source.stg_facebook_pages__daily_page_metrics_total_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_facebook_pages", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests_stg_facebook_pages", "fqn": ["facebook_pages_source", "stg_facebook_pages__daily_page_metrics_total"], "unique_id": "model.facebook_pages_source.stg_facebook_pages__daily_page_metrics_total", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_facebook_pages__daily_page_metrics_total_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_facebook_pages__daily_page_metrics_total_tmp')),\n                staging_columns=get_daily_page_metrics_total_columns()\n            )\n        }}        \n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='facebook_pages_union_schemas', \n            union_database_variable='facebook_pages_union_databases') \n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        date as date_day,\n        page_id,\n        page_actions_post_reactions_anger_total as actions_post_reactions_anger_total,\n        page_actions_post_reactions_haha_total as actions_post_reactions_haha_total,\n        page_actions_post_reactions_like_total as actions_post_reactions_like_total,\n        page_actions_post_reactions_love_total as actions_post_reactions_love_total,\n        page_actions_post_reactions_sorry_total as actions_post_reactions_sorry_total,\n        page_actions_post_reactions_total as actions_post_reactions_total,\n        page_actions_post_reactions_wow_total as actions_post_reactions_wow_total,\n        page_consumptions as consumptions,\n        page_content_activity as content_activity,\n        page_engaged_users as engaged_users,\n        page_fan_adds as fan_adds,\n        page_fan_removes as fan_removes,\n        page_fans as fans,\n        page_fans_online_per_day as fans_online_per_day,\n        page_impressions as impressions,\n        page_impressions_nonviral as impressions_nonviral,\n        page_impressions_organic as impressions_organic,\n        page_impressions_paid as impressions_paid,\n        page_impressions_viral as impressions_viral,\n        page_negative_feedback as negative_feedback,\n        page_places_checkin_mobile as places_checkin_mobile,\n        page_places_checkin_total as places_checkin_total,\n        page_post_engagements as post_engagements,\n        page_posts_impressions as posts_impressions,\n        page_posts_impressions_nonviral as posts_impressions_nonviral,\n        page_posts_impressions_organic as posts_impressions_organic,\n        page_posts_impressions_paid as posts_impressions_paid,\n        page_posts_impressions_viral as posts_impressions_viral,\n        page_total_actions as total_actions,\n        page_video_complete_views_30_s as video_complete_views_30s,\n        page_video_complete_views_30_s_autoplayed as video_complete_views_30s_autoplayed,\n        page_video_complete_views_30_s_click_to_play as video_complete_views_30s_click_to_play,\n        page_video_complete_views_30_s_organic as video_complete_views_30s_organic,\n        page_video_complete_views_30_s_paid as video_complete_views_30s_paid,\n        page_video_complete_views_30_s_repeat_views as video_complete_views_30s_repeat_views,\n        page_video_repeat_views as video_repeat_views,\n        page_video_view_time / 1000.0 as video_view_time,\n        page_video_views as video_views,\n        page_video_views_10_s as video_views_10s,\n        page_video_views_10_s_autoplayed as video_views_10s_autoplayed,\n        page_video_views_10_s_click_to_play as video_views_10s_click_to_play,\n        page_video_views_10_s_organic as video_views_10s_organic,\n        page_video_views_10_s_paid as video_views_10s_paid,\n        page_video_views_10_s_repeat as video_views_10s_repeat,\n        page_video_views_autoplayed as video_views_autoplayed,\n        page_video_views_click_to_play as video_views_click_to_play,\n        page_video_views_organic as video_views_organic,\n        page_video_views_paid as video_views_paid,\n        page_views_external_referrals as views_external_referrals,\n        page_views_logged_in_total as views_logged_in_total,\n        page_views_logout as views_logout,\n        page_views_total as views_total,\n        source_relation\n    from fields\n)\n\nselect * from final", "language": "sql", "package_name": "facebook_pages_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/facebook_pages_source", "path": "stg_facebook_pages__daily_page_metrics_total.sql", "original_file_path": "models/stg_facebook_pages__daily_page_metrics_total.sql", "name": "stg_facebook_pages__daily_page_metrics_total", "alias": "stg_facebook_pages__daily_page_metrics_total", "checksum": {"name": "sha256", "checksum": "04ed46b5bbd76b2b0ebc26c05d4a27bc0e78a7ff3d6a3fc2458b0c1eaa02a6d5"}, "tags": [], "refs": [["stg_facebook_pages__daily_page_metrics_total_tmp"], ["stg_facebook_pages__daily_page_metrics_total_tmp"]], "sources": [], "metrics": [], "description": "Each record reporesents the lifetime post metrics for a Page as of a date.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The timestamp of when the data was last synced with Fivetran", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date of the metric", "meta": {}, "data_type": null, "quote": null, "tags": []}, "actions_post_reactions_anger_total": {"name": "actions_post_reactions_anger_total", "description": "The total amount of reactions with type 'anger' on posts from the Page", "meta": {}, "data_type": null, "quote": null, "tags": []}, "actions_post_reactions_haha_total": {"name": "actions_post_reactions_haha_total", "description": "The total amount of reactions with type 'haha' on posts from the Page", "meta": {}, "data_type": null, "quote": null, "tags": []}, "actions_post_reactions_like_total": {"name": "actions_post_reactions_like_total", "description": "The total amount of reactions with type 'like' on posts from the Page", "meta": {}, "data_type": null, "quote": null, "tags": []}, "actions_post_reactions_love_total": {"name": "actions_post_reactions_love_total", "description": "The total amount of reactions with type 'love' on posts from the Page", "meta": {}, "data_type": null, "quote": null, "tags": []}, "actions_post_reactions_sorry_total": {"name": "actions_post_reactions_sorry_total", "description": "The total amount of reactions with type 'sorry' on posts from the Page", "meta": {}, "data_type": null, "quote": null, "tags": []}, "actions_post_reactions_total": {"name": "actions_post_reactions_total", "description": "The total amount of reactions on posts from the Page", "meta": {}, "data_type": null, "quote": null, "tags": []}, "actions_post_reactions_wow_total": {"name": "actions_post_reactions_wow_total", "description": "The total amount of reactions with type 'wow' on posts from the Page", "meta": {}, "data_type": null, "quote": null, "tags": []}, "consumptions": {"name": "consumptions", "description": "The number of times people clicked on any Page content.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "content_activity": {"name": "content_activity", "description": "The number of people talking about the Page's stories.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "engaged_users": {"name": "engaged_users", "description": "The number of people who engaged with your Page. Engagement includes any click.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fan_adds": {"name": "fan_adds", "description": "The number of fans added to the Page.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fan_removes": {"name": "fan_removes", "description": "The number of fans removed from the Page.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fans": {"name": "fans", "description": "The number of fans the page has.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fans_online_per_day": {"name": "fans_online_per_day", "description": "The number of fans who are online per day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_id": {"name": "page_id", "description": "The ID of the Page", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of times any content from your Page or about your Page entered a person's screen.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions_nonviral": {"name": "impressions_nonviral", "description": "The number of times any content from your Page entered a person's screen. This does not include content created about your Page with social information attached. Social information displays when a person's friend interacted with your Page, post or story. This includes when someone's friend likes or follows your Page, engages with a post, shares a photo of your Page and checks into your Page.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions_organic": {"name": "impressions_organic", "description": "The number of times any post or story content from your Page or about your Page entered a person's screen through unpaid distribution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions_paid": {"name": "impressions_paid", "description": "The number of times any post or story content from your Page or about your Page entered a person's screen through paid distribution such as an ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions_viral": {"name": "impressions_viral", "description": "The number of times any content from your Page or about your Page entered a person's screen with social information attached. Social information displays when a person's friend interacted with your Page, post or story. This includes when someone's friend likes or follows your Page, engages with a post, shares a photo of your Page and checks into your Page.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "negative_feedback": {"name": "negative_feedback", "description": "The number of times people took a negative action (e.g., un-liked or hid a post).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "places_checkin_mobile": {"name": "places_checkin_mobile", "description": "The number of times people checked into a place using mobile phones.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "places_checkin_total": {"name": "places_checkin_total", "description": "The number of times people checked into a place.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_engagements": {"name": "post_engagements", "description": "The number of times people have engaged with your posts through reactions, comments, shares and more.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "posts_impressions": {"name": "posts_impressions", "description": "The number of times your Page's posts entered a person's screen. Posts include statuses, photos, links, videos and more.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "posts_impressions_nonviral": {"name": "posts_impressions_nonviral", "description": "The number of times your Page's posts entered a person's screen. This does not include content created about your Page with social information attached. Social information displays when a person's friend interacted with you Page or post. This includes when someone's friend likes or follows your Page, engages with a post, shares a photo of your Page and checks into your Page.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "posts_impressions_organic": {"name": "posts_impressions_organic", "description": "The number of times your Page's posts entered a person's screen through unpaid distribution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "posts_impressions_paid": {"name": "posts_impressions_paid", "description": "The number of times your Page's posts entered a person's screen through paid distribution such as an ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "posts_impressions_viral": {"name": "posts_impressions_viral", "description": "The number of times your Page's posts entered a person's screen with social information attached. Social information displays when a person's friend interacted with you Page or post. This includes when someone's friend likes or follows your Page, engages with a post, shares a photo of your Page and checks into your Page.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_actions": {"name": "total_actions", "description": "The number of clicks on your Page's contact info and call-to-action button.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_complete_views_30s": {"name": "video_complete_views_30s", "description": "The number of times your Page's videos played for at least 30 seconds, or for nearly their total length if they're shorter than 30 seconds. During a single instance of a video playing, we'll exclude any time spent replaying the video.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_complete_views_30s_autoplayed": {"name": "video_complete_views_30s_autoplayed", "description": "The number of times your Page's automatically played videos played for at least 30 seconds, or for nearly their total length if they're shorter than 30 seconds. During a single instance of a video playing, we'll exclude any time spent replaying the video.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_complete_views_30s_click_to_play": {"name": "video_complete_views_30s_click_to_play", "description": "The number of times your Page's videos played for at least 30 seconds, or for nearly their total length if they're shorter than 30 seconds, after people clicked play. During a single instance of a video playing, we'll exclude any time spent replaying the video.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_complete_views_30s_organic": {"name": "video_complete_views_30s_organic", "description": "The number of times your Page's videos played for at least 30 seconds, or for nearly their total length if they're shorter than 30 seconds, by organic reach. During a single instance of a video playing, we'll exclude any time spent replaying the video.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_complete_views_30s_paid": {"name": "video_complete_views_30s_paid", "description": "The number of times your Page's promoted videos played for at least 30 seconds, or for nearly their total length if they're shorter than 30 seconds. For each impression of a video, we'll count video views separately and exclude any time spent replaying the video.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_complete_views_30s_repeat_views": {"name": "video_complete_views_30s_repeat_views", "description": "The number of times your Page's videos replayed for at least 30 seconds, or for nearly their total length if they're shorter than 30 seconds.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_repeat_views": {"name": "video_repeat_views", "description": "The number of times your Page's videos were replayed for at least 3 seconds, or for nearly their total length if they're shorter than 3 seconds.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_view_time": {"name": "video_view_time", "description": "The total time, in milliseconds, people viewed your Page's video.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views": {"name": "video_views", "description": "The number of times your Page's videos played for at least 3 seconds, or for nearly their total length if they're shorter than 3 seconds. During a single instance of a video playing, we'll exclude any time spent replaying the video.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_10s": {"name": "video_views_10s", "description": "The number of times your Page's videos played for at least 10 seconds, or for nearly their total length if they're shorter than 10 seconds. During a single instance of a video playing, we'll exclude any time spent replaying the video.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_10s_autoplayed": {"name": "video_views_10s_autoplayed", "description": "The number of times your Page's automatically played videos played for at least 10 seconds, or for nearly their total length if they're shorter than 10 seconds. During a single instance of a video playing, we'll exclude any time spent replaying the video.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_10s_click_to_play": {"name": "video_views_10s_click_to_play", "description": "The number of times your Page's videos played for at least 10 seconds, or for nearly their total length if they're shorter than 10 seconds, after people clicked play. During a single instance of a video playing, we'll exclude any time spent replaying the video.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_10s_organic": {"name": "video_views_10s_organic", "description": "The number of times your Page's videos played for at least 10 seconds, or for nearly their total length if they're shorter than 10 seconds, by organic reach. During a single instance of a video playing, we'll exclude any time spent replaying the video.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_10s_paid": {"name": "video_views_10s_paid", "description": "The number of times your Page's promoted videos played for at least 10 seconds, or for nearly their total length if they're shorter than 10 seconds. For each impression of a video, we'll count video views separately and exclude any time spent replaying the video.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_10s_repeat": {"name": "video_views_10s_repeat", "description": "The number of times your Page's videos were replayed for at least 10 seconds, or for nearly their total length if they're shorter than 10 seconds.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_autoplayed": {"name": "video_views_autoplayed", "description": "The number of times your Page's automatically played videos played for at least 3 seconds, or for nearly their total length if they're shorter than 3 seconds. During a single instance of a video playing, we'll exclude any time spent replaying the video.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_click_to_play": {"name": "video_views_click_to_play", "description": "The number of times your Page's videos played for at least 3 seconds, or for nearly their total length if they're shorter than 3 seconds, after people clicked play. During a single instance of a video playing, we'll exclude any time spent replaying the video.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_organic": {"name": "video_views_organic", "description": "The number of times your Page's videos played for at least 3 seconds, or for nearly their total length if they're shorter than 3 seconds, by organic reach. During a single instance of a video playing, we'll exclude any time spent replaying the video.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_paid": {"name": "video_views_paid", "description": "The number of times your Page's promoted videos played for at least 3 seconds, or for nearly their total length if they're shorter than 3 seconds. For each impression of a video, we'll count video views separately and exclude any time spent replaying the video.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "views_external_referrals": {"name": "views_external_referrals", "description": "Top referrering external domains sending traffic to your Page.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "views_logged_in_total": {"name": "views_logged_in_total", "description": "The number of times a Page's profile has been viewed by people logged in to Facebook.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "views_logout": {"name": "views_logout", "description": "The number of times a Page's profile has been viewed by people not logged in to Facebook.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "views_total": {"name": "views_total", "description": "The number of times a Page's profile has been viewed by people not logged in to Facebook.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record, if the unioning functionality is being used.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "facebook_pages_source://models/stg_facebook_pages.yml", "compiled_path": "target/compiled/facebook_pages_source/models/stg_facebook_pages__daily_page_metrics_total.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_facebook_pages", "materialized": "table"}, "created_at": 1671477152.034019, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"social_media_rollup_integration_tests_stg_facebook_pages\".\"stg_facebook_pages__daily_page_metrics_total_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    \n    \n    page_actions_post_reactions_anger_total\n    \n as \n    \n    page_actions_post_reactions_anger_total\n    \n, \n    \n    \n    page_actions_post_reactions_haha_total\n    \n as \n    \n    page_actions_post_reactions_haha_total\n    \n, \n    \n    \n    page_actions_post_reactions_like_total\n    \n as \n    \n    page_actions_post_reactions_like_total\n    \n, \n    \n    \n    page_actions_post_reactions_love_total\n    \n as \n    \n    page_actions_post_reactions_love_total\n    \n, \n    \n    \n    page_actions_post_reactions_sorry_total\n    \n as \n    \n    page_actions_post_reactions_sorry_total\n    \n, \n    \n    \n    page_actions_post_reactions_total\n    \n as \n    \n    page_actions_post_reactions_total\n    \n, \n    \n    \n    page_actions_post_reactions_wow_total\n    \n as \n    \n    page_actions_post_reactions_wow_total\n    \n, \n    \n    \n    page_consumptions\n    \n as \n    \n    page_consumptions\n    \n, \n    \n    \n    page_content_activity\n    \n as \n    \n    page_content_activity\n    \n, \n    \n    \n    page_engaged_users\n    \n as \n    \n    page_engaged_users\n    \n, \n    \n    \n    page_fan_adds\n    \n as \n    \n    page_fan_adds\n    \n, \n    \n    \n    page_fan_removes\n    \n as \n    \n    page_fan_removes\n    \n, \n    \n    \n    page_fans\n    \n as \n    \n    page_fans\n    \n, \n    \n    \n    page_fans_online_per_day\n    \n as \n    \n    page_fans_online_per_day\n    \n, \n    \n    \n    page_id\n    \n as \n    \n    page_id\n    \n, \n    \n    \n    page_impressions\n    \n as \n    \n    page_impressions\n    \n, \n    \n    \n    page_impressions_nonviral\n    \n as \n    \n    page_impressions_nonviral\n    \n, \n    \n    \n    page_impressions_organic\n    \n as \n    \n    page_impressions_organic\n    \n, \n    \n    \n    page_impressions_paid\n    \n as \n    \n    page_impressions_paid\n    \n, \n    \n    \n    page_impressions_viral\n    \n as \n    \n    page_impressions_viral\n    \n, \n    \n    \n    page_negative_feedback\n    \n as \n    \n    page_negative_feedback\n    \n, \n    \n    \n    page_places_checkin_mobile\n    \n as \n    \n    page_places_checkin_mobile\n    \n, \n    \n    \n    page_places_checkin_total\n    \n as \n    \n    page_places_checkin_total\n    \n, \n    \n    \n    page_post_engagements\n    \n as \n    \n    page_post_engagements\n    \n, \n    \n    \n    page_posts_impressions\n    \n as \n    \n    page_posts_impressions\n    \n, \n    \n    \n    page_posts_impressions_nonviral\n    \n as \n    \n    page_posts_impressions_nonviral\n    \n, \n    \n    \n    page_posts_impressions_organic\n    \n as \n    \n    page_posts_impressions_organic\n    \n, \n    \n    \n    page_posts_impressions_paid\n    \n as \n    \n    page_posts_impressions_paid\n    \n, \n    \n    \n    page_posts_impressions_viral\n    \n as \n    \n    page_posts_impressions_viral\n    \n, \n    \n    \n    page_total_actions\n    \n as \n    \n    page_total_actions\n    \n, \n    \n    \n    page_video_complete_views_30_s\n    \n as \n    \n    page_video_complete_views_30_s\n    \n, \n    \n    \n    page_video_complete_views_30_s_autoplayed\n    \n as \n    \n    page_video_complete_views_30_s_autoplayed\n    \n, \n    \n    \n    page_video_complete_views_30_s_click_to_play\n    \n as \n    \n    page_video_complete_views_30_s_click_to_play\n    \n, \n    \n    \n    page_video_complete_views_30_s_organic\n    \n as \n    \n    page_video_complete_views_30_s_organic\n    \n, \n    \n    \n    page_video_complete_views_30_s_paid\n    \n as \n    \n    page_video_complete_views_30_s_paid\n    \n, \n    \n    \n    page_video_complete_views_30_s_repeat_views\n    \n as \n    \n    page_video_complete_views_30_s_repeat_views\n    \n, \n    \n    \n    page_video_repeat_views\n    \n as \n    \n    page_video_repeat_views\n    \n, \n    \n    \n    page_video_view_time\n    \n as \n    \n    page_video_view_time\n    \n, \n    \n    \n    page_video_views\n    \n as \n    \n    page_video_views\n    \n, \n    \n    \n    page_video_views_10_s\n    \n as \n    \n    page_video_views_10_s\n    \n, \n    \n    \n    page_video_views_10_s_autoplayed\n    \n as \n    \n    page_video_views_10_s_autoplayed\n    \n, \n    \n    \n    page_video_views_10_s_click_to_play\n    \n as \n    \n    page_video_views_10_s_click_to_play\n    \n, \n    \n    \n    page_video_views_10_s_organic\n    \n as \n    \n    page_video_views_10_s_organic\n    \n, \n    \n    \n    page_video_views_10_s_paid\n    \n as \n    \n    page_video_views_10_s_paid\n    \n, \n    \n    \n    page_video_views_10_s_repeat\n    \n as \n    \n    page_video_views_10_s_repeat\n    \n, \n    \n    \n    page_video_views_autoplayed\n    \n as \n    \n    page_video_views_autoplayed\n    \n, \n    \n    \n    page_video_views_click_to_play\n    \n as \n    \n    page_video_views_click_to_play\n    \n, \n    \n    \n    page_video_views_organic\n    \n as \n    \n    page_video_views_organic\n    \n, \n    \n    \n    page_video_views_paid\n    \n as \n    \n    page_video_views_paid\n    \n, \n    \n    \n    page_views_external_referrals\n    \n as \n    \n    page_views_external_referrals\n    \n, \n    \n    \n    page_views_logged_in_total\n    \n as \n    \n    page_views_logged_in_total\n    \n, \n    \n    \n    page_views_logout\n    \n as \n    \n    page_views_logout\n    \n, \n    \n    \n    page_views_total\n    \n as \n    \n    page_views_total\n    \n\n\n        \n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        date as date_day,\n        page_id,\n        page_actions_post_reactions_anger_total as actions_post_reactions_anger_total,\n        page_actions_post_reactions_haha_total as actions_post_reactions_haha_total,\n        page_actions_post_reactions_like_total as actions_post_reactions_like_total,\n        page_actions_post_reactions_love_total as actions_post_reactions_love_total,\n        page_actions_post_reactions_sorry_total as actions_post_reactions_sorry_total,\n        page_actions_post_reactions_total as actions_post_reactions_total,\n        page_actions_post_reactions_wow_total as actions_post_reactions_wow_total,\n        page_consumptions as consumptions,\n        page_content_activity as content_activity,\n        page_engaged_users as engaged_users,\n        page_fan_adds as fan_adds,\n        page_fan_removes as fan_removes,\n        page_fans as fans,\n        page_fans_online_per_day as fans_online_per_day,\n        page_impressions as impressions,\n        page_impressions_nonviral as impressions_nonviral,\n        page_impressions_organic as impressions_organic,\n        page_impressions_paid as impressions_paid,\n        page_impressions_viral as impressions_viral,\n        page_negative_feedback as negative_feedback,\n        page_places_checkin_mobile as places_checkin_mobile,\n        page_places_checkin_total as places_checkin_total,\n        page_post_engagements as post_engagements,\n        page_posts_impressions as posts_impressions,\n        page_posts_impressions_nonviral as posts_impressions_nonviral,\n        page_posts_impressions_organic as posts_impressions_organic,\n        page_posts_impressions_paid as posts_impressions_paid,\n        page_posts_impressions_viral as posts_impressions_viral,\n        page_total_actions as total_actions,\n        page_video_complete_views_30_s as video_complete_views_30s,\n        page_video_complete_views_30_s_autoplayed as video_complete_views_30s_autoplayed,\n        page_video_complete_views_30_s_click_to_play as video_complete_views_30s_click_to_play,\n        page_video_complete_views_30_s_organic as video_complete_views_30s_organic,\n        page_video_complete_views_30_s_paid as video_complete_views_30s_paid,\n        page_video_complete_views_30_s_repeat_views as video_complete_views_30s_repeat_views,\n        page_video_repeat_views as video_repeat_views,\n        page_video_view_time / 1000.0 as video_view_time,\n        page_video_views as video_views,\n        page_video_views_10_s as video_views_10s,\n        page_video_views_10_s_autoplayed as video_views_10s_autoplayed,\n        page_video_views_10_s_click_to_play as video_views_10s_click_to_play,\n        page_video_views_10_s_organic as video_views_10s_organic,\n        page_video_views_10_s_paid as video_views_10s_paid,\n        page_video_views_10_s_repeat as video_views_10s_repeat,\n        page_video_views_autoplayed as video_views_autoplayed,\n        page_video_views_click_to_play as video_views_click_to_play,\n        page_video_views_organic as video_views_organic,\n        page_video_views_paid as video_views_paid,\n        page_views_external_referrals as views_external_referrals,\n        page_views_logged_in_total as views_logged_in_total,\n        page_views_logout as views_logout,\n        page_views_total as views_total,\n        source_relation\n    from fields\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests_stg_facebook_pages\".\"stg_facebook_pages__daily_page_metrics_total\""}, "model.facebook_pages_source.stg_facebook_pages__lifetime_post_metrics_total": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.facebook_pages_source.get_lifetime_post_metrics_total_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation"], "nodes": ["model.facebook_pages_source.stg_facebook_pages__lifetime_post_metrics_total_tmp", "model.facebook_pages_source.stg_facebook_pages__lifetime_post_metrics_total_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_facebook_pages", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests_stg_facebook_pages", "fqn": ["facebook_pages_source", "stg_facebook_pages__lifetime_post_metrics_total"], "unique_id": "model.facebook_pages_source.stg_facebook_pages__lifetime_post_metrics_total", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_facebook_pages__lifetime_post_metrics_total_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_facebook_pages__lifetime_post_metrics_total_tmp')),\n                staging_columns=get_lifetime_post_metrics_total_columns()\n            )\n        }}\n                \n        {{ fivetran_utils.source_relation(\n            union_schema_variable='facebook_pages_union_schemas', \n            union_database_variable='facebook_pages_union_databases') \n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        date as date_day,\n        post_id,\n        post_clicks as clicks,\n        post_impressions as impressions,\n        post_impressions_fan as impressions_fan,\n        post_impressions_fan_paid as impressions_fan_paid,\n        post_impressions_nonviral as impressions_nonviral,\n        post_impressions_organic as impressions_organic,\n        post_impressions_paid as impressions_paid,\n        post_impressions_viral as impressions_viral,\n        post_negative_feedback as negative_feedback,\n        post_reactions_anger_total as reactions_anger_total,\n        post_reactions_haha_total as reactions_haha_total,\n        post_reactions_like_total as reactions_like_total,\n        post_reactions_love_total as reactions_love_total,\n        post_reactions_sorry_total as reactions_sorry_total,\n        post_reactions_wow_total as reactions_wow_total,\n        post_video_avg_time_watched / 1000.0 as video_avg_time_watched,\n        post_video_complete_views_30_s_autoplayed as video_complete_views_30s_autoplayed,\n        post_video_complete_views_30_s_clicked_to_play as video_complete_views_30s_clicked_to_play,\n        post_video_complete_views_30_s_organic as video_complete_views_30s_organic,\n        post_video_complete_views_30_s_paid as video_complete_views_30s_paid,\n        post_video_complete_views_organic as video_complete_views_organic,\n        post_video_complete_views_paid as video_complete_views_paid,\n        post_video_length / 1000.0  as video_length,\n        post_video_view_time / 1000.0 as video_view_time,\n        post_video_view_time_organic / 1000.0 as video_view_time_organic,\n        post_video_views as video_views,\n        post_video_views_10_s as video_views_10s,\n        post_video_views_10_s_autoplayed as video_views_10s_autoplayed,\n        post_video_views_10_s_clicked_to_play as video_views_10s_clicked_to_play,\n        post_video_views_10_s_organic as video_views_10s_organic,\n        post_video_views_10_s_paid as video_views_10_s_paid,\n        post_video_views_10_s_sound_on as video_views_10s_sound_on,\n        post_video_views_15_s as video_views_15s,\n        post_video_views_autoplayed as video_views_autoplayed,\n        post_video_views_clicked_to_play as video_views_clicked_to_play,\n        post_video_views_organic as video_views_organic,\n        post_video_views_paid as video_views_paid,\n        post_video_views_sound_on as video_views_sound_on,\n        source_relation\n    from fields\n),\n\nis_most_recent as (\n\n    select \n        *,\n        row_number() over (partition by post_id, source_relation order by date_day desc) = 1 as is_most_recent_record\n    from final\n\n)\n\nselect * from is_most_recent", "language": "sql", "package_name": "facebook_pages_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/facebook_pages_source", "path": "stg_facebook_pages__lifetime_post_metrics_total.sql", "original_file_path": "models/stg_facebook_pages__lifetime_post_metrics_total.sql", "name": "stg_facebook_pages__lifetime_post_metrics_total", "alias": "stg_facebook_pages__lifetime_post_metrics_total", "checksum": {"name": "sha256", "checksum": "573fac6d960d0b27d63e87780e73f1fe29d79f2af77c355983cff78f6ee2dc9f"}, "tags": [], "refs": [["stg_facebook_pages__lifetime_post_metrics_total_tmp"], ["stg_facebook_pages__lifetime_post_metrics_total_tmp"]], "sources": [], "metrics": [], "description": "Each record represents the lifetime post metrics for a Page as of a date.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The timestamp of when the data was last synced with Fivetran", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date of the metric", "meta": {}, "data_type": null, "quote": null, "tags": []}, "activity": {"name": "activity", "description": "The total amount of activity on the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The total amount of clicks on the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "engaged_fan": {"name": "engaged_fan", "description": "The total amount of engaged fans on the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "engaged_users": {"name": "engaged_users", "description": "The total amount of engaged users on the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_id": {"name": "post_id", "description": "The ID of the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The total amount of impressions on the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions_fan": {"name": "impressions_fan", "description": "The total amount of impressions on the post by fans", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions_fan_paid": {"name": "impressions_fan_paid", "description": "The total amount of impressions on the post by paid fans", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions_nonviral": {"name": "impressions_nonviral", "description": "The total amount of non-viral impressions on the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions_organic": {"name": "impressions_organic", "description": "The total amount of organic impressions on the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions_paid": {"name": "impressions_paid", "description": "The total amount of paid impressions on the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions_viral": {"name": "impressions_viral", "description": "The total amount of viral impressions on the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "negative_feedback": {"name": "negative_feedback", "description": "The total amount of negative feedback on the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reactions_anger_total": {"name": "reactions_anger_total", "description": "The total amount of reactions with type 'anger' on the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reactions_haha_total": {"name": "reactions_haha_total", "description": "The total amount of reactions with type 'haha' on the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reactions_like_total": {"name": "reactions_like_total", "description": "The total amount of reactions with type 'like' on the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reactions_love_total": {"name": "reactions_love_total", "description": "The total amount of reactions with type 'love' on the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reactions_sorry_total": {"name": "reactions_sorry_total", "description": "The total amount of reactions with type 'sorry' on the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reactions_wow_total": {"name": "reactions_wow_total", "description": "The total amount of reactions with type 'wow' on the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_avg_time_watched": {"name": "video_avg_time_watched", "description": "The average amount of time watched on the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_complete_views_30s_autoplayed": {"name": "video_complete_views_30s_autoplayed", "description": "The total number of views longer than 30 seconds when the post was played automatically", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_complete_views_30s_clicked_to_play": {"name": "video_complete_views_30s_clicked_to_play", "description": "The total number of views longer than 30 seconds when the post was clicked to play", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_complete_views_30s_organic": {"name": "video_complete_views_30s_organic", "description": "The total number of organic views longer than 30 seconds", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_complete_views_30s_paid": {"name": "video_complete_views_30s_paid", "description": "The total number of paid views longer than 30 seconds", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_complete_views_organic": {"name": "video_complete_views_organic", "description": "The total number of organic views when the video was completed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_complete_views_paid": {"name": "video_complete_views_paid", "description": "The total number of paid views when the video was completed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_length": {"name": "video_length", "description": "The length of the video in seconds", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_view_time": {"name": "video_view_time", "description": "The total amount of time watched on the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_view_time_organic": {"name": "video_view_time_organic", "description": "The total amount of time watched on the post by organic users", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views": {"name": "video_views", "description": "The total number of views on the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_10s": {"name": "video_views_10s", "description": "The total number of views on the post longer than 10 seconds", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_10s_autoplayed": {"name": "video_views_10s_autoplayed", "description": "The total number of views on the post longer than 10 seconds when the post was played automatically", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_10s_clicked_to_play": {"name": "video_views_10s_clicked_to_play", "description": "The total number of views on the post longer than 10 seconds when the post was clicked to play", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_10s_organic": {"name": "video_views_10s_organic", "description": "The total number of organic views on the post longer than 10 seconds", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_10s_paid": {"name": "video_views_10s_paid", "description": "The total number of paid views on the post longer than 10 seconds", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_10s_sound_on": {"name": "video_views_10s_sound_on", "description": "The total number of views on the post longer than 10 seconds when the sound was on", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_15s": {"name": "video_views_15s", "description": "The total number of views on the post longer than 15 seconds", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_autoplayed": {"name": "video_views_autoplayed", "description": "The total number of views on the post when the post was played automatically", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_clicked_to_play": {"name": "video_views_clicked_to_play", "description": "The total number of views on the post when the post was clicked to play", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_organic": {"name": "video_views_organic", "description": "The total number of organic views on the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_paid": {"name": "video_views_paid", "description": "The total number of paid views on the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_sound_on": {"name": "video_views_sound_on", "description": "The total number of views on the post when the sound was on", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record, if the unioning functionality is being used.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "facebook_pages_source://models/stg_facebook_pages.yml", "compiled_path": "target/compiled/facebook_pages_source/models/stg_facebook_pages__lifetime_post_metrics_total.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_facebook_pages", "materialized": "table"}, "created_at": 1671477152.040718, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"social_media_rollup_integration_tests_stg_facebook_pages\".\"stg_facebook_pages__lifetime_post_metrics_total_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    \n    \n    post_activity\n    \n as \n    \n    post_activity\n    \n, \n    \n    \n    post_clicks\n    \n as \n    \n    post_clicks\n    \n, \n    \n    \n    post_engaged_fan\n    \n as \n    \n    post_engaged_fan\n    \n, \n    \n    \n    post_engaged_users\n    \n as \n    \n    post_engaged_users\n    \n, \n    \n    \n    post_id\n    \n as \n    \n    post_id\n    \n, \n    \n    \n    post_impressions\n    \n as \n    \n    post_impressions\n    \n, \n    \n    \n    post_impressions_fan\n    \n as \n    \n    post_impressions_fan\n    \n, \n    \n    \n    post_impressions_fan_paid\n    \n as \n    \n    post_impressions_fan_paid\n    \n, \n    \n    \n    post_impressions_nonviral\n    \n as \n    \n    post_impressions_nonviral\n    \n, \n    \n    \n    post_impressions_organic\n    \n as \n    \n    post_impressions_organic\n    \n, \n    \n    \n    post_impressions_paid\n    \n as \n    \n    post_impressions_paid\n    \n, \n    \n    \n    post_impressions_viral\n    \n as \n    \n    post_impressions_viral\n    \n, \n    \n    \n    post_negative_feedback\n    \n as \n    \n    post_negative_feedback\n    \n, \n    \n    \n    post_reactions_anger_total\n    \n as \n    \n    post_reactions_anger_total\n    \n, \n    \n    \n    post_reactions_haha_total\n    \n as \n    \n    post_reactions_haha_total\n    \n, \n    \n    \n    post_reactions_like_total\n    \n as \n    \n    post_reactions_like_total\n    \n, \n    \n    \n    post_reactions_love_total\n    \n as \n    \n    post_reactions_love_total\n    \n, \n    \n    \n    post_reactions_sorry_total\n    \n as \n    \n    post_reactions_sorry_total\n    \n, \n    \n    \n    post_reactions_wow_total\n    \n as \n    \n    post_reactions_wow_total\n    \n, \n    \n    \n    post_video_avg_time_watched\n    \n as \n    \n    post_video_avg_time_watched\n    \n, \n    \n    \n    post_video_complete_views_30_s_autoplayed\n    \n as \n    \n    post_video_complete_views_30_s_autoplayed\n    \n, \n    \n    \n    post_video_complete_views_30_s_clicked_to_play\n    \n as \n    \n    post_video_complete_views_30_s_clicked_to_play\n    \n, \n    \n    \n    post_video_complete_views_30_s_organic\n    \n as \n    \n    post_video_complete_views_30_s_organic\n    \n, \n    \n    \n    post_video_complete_views_30_s_paid\n    \n as \n    \n    post_video_complete_views_30_s_paid\n    \n, \n    \n    \n    post_video_complete_views_organic\n    \n as \n    \n    post_video_complete_views_organic\n    \n, \n    \n    \n    post_video_complete_views_paid\n    \n as \n    \n    post_video_complete_views_paid\n    \n, \n    \n    \n    post_video_length\n    \n as \n    \n    post_video_length\n    \n, \n    \n    \n    post_video_view_time\n    \n as \n    \n    post_video_view_time\n    \n, \n    \n    \n    post_video_view_time_organic\n    \n as \n    \n    post_video_view_time_organic\n    \n, \n    \n    \n    post_video_views\n    \n as \n    \n    post_video_views\n    \n, \n    \n    \n    post_video_views_10_s\n    \n as \n    \n    post_video_views_10_s\n    \n, \n    \n    \n    post_video_views_10_s_autoplayed\n    \n as \n    \n    post_video_views_10_s_autoplayed\n    \n, \n    \n    \n    post_video_views_10_s_clicked_to_play\n    \n as \n    \n    post_video_views_10_s_clicked_to_play\n    \n, \n    \n    \n    post_video_views_10_s_organic\n    \n as \n    \n    post_video_views_10_s_organic\n    \n, \n    \n    \n    post_video_views_10_s_paid\n    \n as \n    \n    post_video_views_10_s_paid\n    \n, \n    \n    \n    post_video_views_10_s_sound_on\n    \n as \n    \n    post_video_views_10_s_sound_on\n    \n, \n    \n    \n    post_video_views_15_s\n    \n as \n    \n    post_video_views_15_s\n    \n, \n    \n    \n    post_video_views_autoplayed\n    \n as \n    \n    post_video_views_autoplayed\n    \n, \n    \n    \n    post_video_views_clicked_to_play\n    \n as \n    \n    post_video_views_clicked_to_play\n    \n, \n    \n    \n    post_video_views_organic\n    \n as \n    \n    post_video_views_organic\n    \n, \n    \n    \n    post_video_views_paid\n    \n as \n    \n    post_video_views_paid\n    \n, \n    \n    \n    post_video_views_sound_on\n    \n as \n    \n    post_video_views_sound_on\n    \n\n\n\n                \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        date as date_day,\n        post_id,\n        post_clicks as clicks,\n        post_impressions as impressions,\n        post_impressions_fan as impressions_fan,\n        post_impressions_fan_paid as impressions_fan_paid,\n        post_impressions_nonviral as impressions_nonviral,\n        post_impressions_organic as impressions_organic,\n        post_impressions_paid as impressions_paid,\n        post_impressions_viral as impressions_viral,\n        post_negative_feedback as negative_feedback,\n        post_reactions_anger_total as reactions_anger_total,\n        post_reactions_haha_total as reactions_haha_total,\n        post_reactions_like_total as reactions_like_total,\n        post_reactions_love_total as reactions_love_total,\n        post_reactions_sorry_total as reactions_sorry_total,\n        post_reactions_wow_total as reactions_wow_total,\n        post_video_avg_time_watched / 1000.0 as video_avg_time_watched,\n        post_video_complete_views_30_s_autoplayed as video_complete_views_30s_autoplayed,\n        post_video_complete_views_30_s_clicked_to_play as video_complete_views_30s_clicked_to_play,\n        post_video_complete_views_30_s_organic as video_complete_views_30s_organic,\n        post_video_complete_views_30_s_paid as video_complete_views_30s_paid,\n        post_video_complete_views_organic as video_complete_views_organic,\n        post_video_complete_views_paid as video_complete_views_paid,\n        post_video_length / 1000.0  as video_length,\n        post_video_view_time / 1000.0 as video_view_time,\n        post_video_view_time_organic / 1000.0 as video_view_time_organic,\n        post_video_views as video_views,\n        post_video_views_10_s as video_views_10s,\n        post_video_views_10_s_autoplayed as video_views_10s_autoplayed,\n        post_video_views_10_s_clicked_to_play as video_views_10s_clicked_to_play,\n        post_video_views_10_s_organic as video_views_10s_organic,\n        post_video_views_10_s_paid as video_views_10_s_paid,\n        post_video_views_10_s_sound_on as video_views_10s_sound_on,\n        post_video_views_15_s as video_views_15s,\n        post_video_views_autoplayed as video_views_autoplayed,\n        post_video_views_clicked_to_play as video_views_clicked_to_play,\n        post_video_views_organic as video_views_organic,\n        post_video_views_paid as video_views_paid,\n        post_video_views_sound_on as video_views_sound_on,\n        source_relation\n    from fields\n),\n\nis_most_recent as (\n\n    select \n        *,\n        row_number() over (partition by post_id, source_relation order by date_day desc) = 1 as is_most_recent_record\n    from final\n\n)\n\nselect * from is_most_recent", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests_stg_facebook_pages\".\"stg_facebook_pages__lifetime_post_metrics_total\""}, "model.facebook_pages_source.stg_facebook_pages__lifetime_post_metrics_total_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["seed.social_media_rollup_integration_tests.facebook_pages_lifetime_post_metrics_total_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_facebook_pages", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests_stg_facebook_pages", "fqn": ["facebook_pages_source", "tmp", "stg_facebook_pages__lifetime_post_metrics_total_tmp"], "unique_id": "model.facebook_pages_source.stg_facebook_pages__lifetime_post_metrics_total_tmp", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='lifetime_post_metrics_total', \n        database_variable='facebook_pages_database', \n        schema_variable='facebook_pages_schema', \n        default_database=target.database,\n        default_schema='facebook_pages',\n        default_variable='lifetime_post_metrics_total',\n        union_schema_variable='facebook_pages_union_schemas',\n        union_database_variable='facebook_pages_union_databases'\n    )\n}}", "language": "sql", "package_name": "facebook_pages_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/facebook_pages_source", "path": "tmp/stg_facebook_pages__lifetime_post_metrics_total_tmp.sql", "original_file_path": "models/tmp/stg_facebook_pages__lifetime_post_metrics_total_tmp.sql", "name": "stg_facebook_pages__lifetime_post_metrics_total_tmp", "alias": "stg_facebook_pages__lifetime_post_metrics_total_tmp", "checksum": {"name": "sha256", "checksum": "f1b6bc03aa0821fcfb912df8d7b57a0ebfde2e9394084d57f3a9932378a2cc6c"}, "tags": [], "refs": [["facebook_pages_lifetime_post_metrics_total_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/facebook_pages_source/models/tmp/stg_facebook_pages__lifetime_post_metrics_total_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_facebook_pages", "materialized": "table"}, "created_at": 1671477151.735125, "compiled_code": "\n\n\n\n    select * \n    from \"postgres\".\"social_media_rollup_integration_tests\".\"facebook_pages_lifetime_post_metrics_total_data\"\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests_stg_facebook_pages\".\"stg_facebook_pages__lifetime_post_metrics_total_tmp\""}, "model.facebook_pages_source.stg_facebook_pages__page_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["seed.social_media_rollup_integration_tests.facebook_pages_page_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_facebook_pages", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests_stg_facebook_pages", "fqn": ["facebook_pages_source", "tmp", "stg_facebook_pages__page_tmp"], "unique_id": "model.facebook_pages_source.stg_facebook_pages__page_tmp", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='page', \n        database_variable='facebook_pages_database', \n        schema_variable='facebook_pages_schema', \n        default_database=target.database,\n        default_schema='facebook_pages',\n        default_variable='page',\n        union_schema_variable='facebook_pages_union_schemas',\n        union_database_variable='facebook_pages_union_databases'\n    )\n}}", "language": "sql", "package_name": "facebook_pages_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/facebook_pages_source", "path": "tmp/stg_facebook_pages__page_tmp.sql", "original_file_path": "models/tmp/stg_facebook_pages__page_tmp.sql", "name": "stg_facebook_pages__page_tmp", "alias": "stg_facebook_pages__page_tmp", "checksum": {"name": "sha256", "checksum": "902f6adcebbf9836da0b0162b5f821dbdb2c9502e0f16956ff41aee6b415d5c1"}, "tags": [], "refs": [["facebook_pages_page_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/facebook_pages_source/models/tmp/stg_facebook_pages__page_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_facebook_pages", "materialized": "table"}, "created_at": 1671477151.738867, "compiled_code": "\n\n\n\n    select * \n    from \"postgres\".\"social_media_rollup_integration_tests\".\"facebook_pages_page_data\"\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests_stg_facebook_pages\".\"stg_facebook_pages__page_tmp\""}, "model.facebook_pages_source.stg_facebook_pages__daily_page_metrics_total_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["seed.social_media_rollup_integration_tests.facebook_pages_daily_page_metrics_total_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_facebook_pages", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests_stg_facebook_pages", "fqn": ["facebook_pages_source", "tmp", "stg_facebook_pages__daily_page_metrics_total_tmp"], "unique_id": "model.facebook_pages_source.stg_facebook_pages__daily_page_metrics_total_tmp", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='daily_page_metrics_total', \n        database_variable='facebook_pages_database', \n        schema_variable='facebook_pages_schema', \n        default_database=target.database,\n        default_schema='facebook_pages',\n        default_variable='daily_page_metrics_total',\n        union_schema_variable='facebook_pages_union_schemas',\n        union_database_variable='facebook_pages_union_databases'\n    )\n}}", "language": "sql", "package_name": "facebook_pages_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/facebook_pages_source", "path": "tmp/stg_facebook_pages__daily_page_metrics_total_tmp.sql", "original_file_path": "models/tmp/stg_facebook_pages__daily_page_metrics_total_tmp.sql", "name": "stg_facebook_pages__daily_page_metrics_total_tmp", "alias": "stg_facebook_pages__daily_page_metrics_total_tmp", "checksum": {"name": "sha256", "checksum": "f3eca23b1f1b40dfdda827f99e5b3dcead0d084eeb16594a4e8e4376fdb71d40"}, "tags": [], "refs": [["facebook_pages_daily_page_metrics_total_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/facebook_pages_source/models/tmp/stg_facebook_pages__daily_page_metrics_total_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_facebook_pages", "materialized": "table"}, "created_at": 1671477151.742545, "compiled_code": "\n\n\n\n    select * \n    from \"postgres\".\"social_media_rollup_integration_tests\".\"facebook_pages_daily_page_metrics_total_data\"\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests_stg_facebook_pages\".\"stg_facebook_pages__daily_page_metrics_total_tmp\""}, "model.facebook_pages_source.stg_facebook_pages__post_history_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["seed.social_media_rollup_integration_tests.facebook_pages_post_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_facebook_pages", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests_stg_facebook_pages", "fqn": ["facebook_pages_source", "tmp", "stg_facebook_pages__post_history_tmp"], "unique_id": "model.facebook_pages_source.stg_facebook_pages__post_history_tmp", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='post_history', \n        database_variable='facebook_pages_database', \n        schema_variable='facebook_pages_schema', \n        default_database=target.database,\n        default_schema='facebook_pages',\n        default_variable='post_history',\n        union_schema_variable='facebook_pages_union_schemas',\n        union_database_variable='facebook_pages_union_databases'\n    )\n}}", "language": "sql", "package_name": "facebook_pages_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/facebook_pages_source", "path": "tmp/stg_facebook_pages__post_history_tmp.sql", "original_file_path": "models/tmp/stg_facebook_pages__post_history_tmp.sql", "name": "stg_facebook_pages__post_history_tmp", "alias": "stg_facebook_pages__post_history_tmp", "checksum": {"name": "sha256", "checksum": "a7f6e0620eddbe7ea2da912095f7edd7b9011c4684742fa1d5e63bd375d189c9"}, "tags": [], "refs": [["facebook_pages_post_history_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/facebook_pages_source/models/tmp/stg_facebook_pages__post_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_facebook_pages", "materialized": "table"}, "created_at": 1671477151.746114, "compiled_code": "\n\n\n\n    select * \n    from \"postgres\".\"social_media_rollup_integration_tests\".\"facebook_pages_post_history_data\"\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests_stg_facebook_pages\".\"stg_facebook_pages__post_history_tmp\""}, "model.linkedin_pages.linkedin_pages__posts": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.type_string"], "nodes": ["model.linkedin_pages_source.stg_linkedin_pages__share_statistic", "model.linkedin_pages.int_linkedin_pages__latest_post", "model.linkedin_pages.int_linkedin_pages__latest_post_history", "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_content_media", "model.linkedin_pages_source.stg_linkedin_pages__organization", "model.linkedin_pages_source.stg_linkedin_pages__organization_ugc_post"]}, "config": {"enabled": true, "alias": null, "schema": "linkedin_pages", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests_linkedin_pages", "fqn": ["linkedin_pages", "linkedin_pages__posts"], "unique_id": "model.linkedin_pages.linkedin_pages__posts", "raw_code": "with share_statistic as (\n\n    select *\n    from {{ var('share_statistic_staging') }}\n\n),\n\nugc_post_share_statistic as (\n\n    select *\n    from {{ ref('int_linkedin_pages__latest_post') }}\n    where is_most_recent_record = true\n\n),\n\nugc_post_history as (\n\n    select *\n    from {{ ref('int_linkedin_pages__latest_post_history') }}\n    where is_most_recent_record = true\n\n),\n\nugc_post_share_content_media as (\n\n    select *\n    from {{ var('ugc_post_share_content_media_staging') }}\n\n),\n\norganization as (\n\n    select *\n    from {{ var('organization_staging') }}\n\n),\n\norganization_ugc_post as (\n\n    select *\n    from {{ var('organization_ugc_post_staging') }}\n\n),\n\njoined as (\n\n    select\n        ugc_post_history.ugc_post_id,\n        ugc_post_history.post_author,\n        ugc_post_history.post_url,\n        ugc_post_history.created_timestamp,\n        ugc_post_history.first_published_timestamp,\n        ugc_post_history.lifecycle_state,\n        ugc_post_history.version_tag,\n        ugc_post_history.specific_content_share_commentary_text,\n        ugc_post_share_content_media.title_text,\n        ugc_post_share_content_media.original_url,\n        organization.organization_id,\n        organization.organization_name,\n        share_statistic.click_count,\n        share_statistic.comment_count,\n        share_statistic.impression_count,\n        share_statistic.like_count,\n        share_statistic.share_count,\n        ugc_post_history.source_relation\n    from ugc_post_history\n    left join ugc_post_share_statistic\n        on cast(ugc_post_share_statistic.ugc_post_id as {{ dbt.type_string() }}) = cast(ugc_post_history.ugc_post_id as {{ dbt.type_string() }})\n        and ugc_post_share_statistic.source_relation = ugc_post_history.source_relation\n    left join share_statistic\n        on share_statistic.share_statistic_id = ugc_post_share_statistic.share_statistic_id\n        and share_statistic.source_relation = ugc_post_share_statistic.source_relation\n    left join ugc_post_share_content_media\n        on ugc_post_history.ugc_post_id = ugc_post_share_content_media.ugc_post_id\n        and ugc_post_history.source_relation = ugc_post_share_content_media.source_relation\n    left join organization_ugc_post\n        on ugc_post_history.ugc_post_id = organization_ugc_post.ugc_post_id\n        and ugc_post_history.source_relation = organization_ugc_post.source_relation\n    left join organization\n        on organization_ugc_post.organization_id = organization.organization_id\n        and organization_ugc_post.source_relation = organization.source_relation\n\n)\n\nselect *\nfrom joined", "language": "sql", "package_name": "linkedin_pages", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/linkedin_pages", "path": "linkedin_pages__posts.sql", "original_file_path": "models/linkedin_pages__posts.sql", "name": "linkedin_pages__posts", "alias": "linkedin_pages__posts", "checksum": {"name": "sha256", "checksum": "3563904029bc4f89912f4ee34b5be2117a13c752f8047cd5253e0e2753c82723"}, "tags": [], "refs": [["stg_linkedin_pages__share_statistic"], ["int_linkedin_pages__latest_post"], ["int_linkedin_pages__latest_post_history"], ["stg_linkedin_pages__ugc_post_share_content_media"], ["stg_linkedin_pages__organization"], ["stg_linkedin_pages__organization_ugc_post"]], "sources": [], "metrics": [], "description": "Each record represents the performance of a LinkedIn post", "columns": {"click_count": {"name": "click_count", "description": "The total number of times the post was clicked", "meta": {}, "data_type": null, "quote": null, "tags": []}, "comment_count": {"name": "comment_count", "description": "The total number of comments on the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impression_count": {"name": "impression_count", "description": "The total number of impressions on the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "like_count": {"name": "like_count", "description": "The total number of likes on the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "share_count": {"name": "share_count", "description": "The total number of shares on the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ugc_post_id": {"name": "ugc_post_id", "description": "The unique ID of the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_author": {"name": "post_author", "description": "The author of the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_url": {"name": "post_url", "description": "The URL of the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "The timestamp of when the post was created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_published_timestamp": {"name": "first_published_timestamp", "description": "The timestamp of when the post was first published", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lifecycle_state": {"name": "lifecycle_state", "description": "The current state of the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "version_tag": {"name": "version_tag", "description": "The version tag of the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "specific_content_share_commentary_text": {"name": "specific_content_share_commentary_text", "description": "The text of the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title_text": {"name": "title_text", "description": "The title of the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "original_url": {"name": "original_url", "description": "The original URL of the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organization_id": {"name": "organization_id", "description": "The ID of the organization that owns the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organization_name": {"name": "organization_name", "description": "The localized name of the organization", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record, if the unioning functionality is being used.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "linkedin_pages://models/linkedin_pages.yml", "compiled_path": "target/compiled/linkedin_pages/models/linkedin_pages__posts.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "linkedin_pages", "materialized": "table"}, "created_at": 1671477152.109663, "compiled_code": "with share_statistic as (\n\n    select *\n    from \"postgres\".\"social_media_rollup_integration_tests_stg_linkedin_pages\".\"stg_linkedin_pages__share_statistic\"\n\n),\n\nugc_post_share_statistic as (\n\n    select *\n    from \"postgres\".\"social_media_rollup_integration_tests_linkedin_pages\".\"int_linkedin_pages__latest_post\"\n    where is_most_recent_record = true\n\n),\n\nugc_post_history as (\n\n    select *\n    from \"postgres\".\"social_media_rollup_integration_tests_linkedin_pages\".\"int_linkedin_pages__latest_post_history\"\n    where is_most_recent_record = true\n\n),\n\nugc_post_share_content_media as (\n\n    select *\n    from \"postgres\".\"social_media_rollup_integration_tests_stg_linkedin_pages\".\"stg_linkedin_pages__ugc_post_share_content_media\"\n\n),\n\norganization as (\n\n    select *\n    from \"postgres\".\"social_media_rollup_integration_tests_stg_linkedin_pages\".\"stg_linkedin_pages__organization\"\n\n),\n\norganization_ugc_post as (\n\n    select *\n    from \"postgres\".\"social_media_rollup_integration_tests_stg_linkedin_pages\".\"stg_linkedin_pages__organization_ugc_post\"\n\n),\n\njoined as (\n\n    select\n        ugc_post_history.ugc_post_id,\n        ugc_post_history.post_author,\n        ugc_post_history.post_url,\n        ugc_post_history.created_timestamp,\n        ugc_post_history.first_published_timestamp,\n        ugc_post_history.lifecycle_state,\n        ugc_post_history.version_tag,\n        ugc_post_history.specific_content_share_commentary_text,\n        ugc_post_share_content_media.title_text,\n        ugc_post_share_content_media.original_url,\n        organization.organization_id,\n        organization.organization_name,\n        share_statistic.click_count,\n        share_statistic.comment_count,\n        share_statistic.impression_count,\n        share_statistic.like_count,\n        share_statistic.share_count,\n        ugc_post_history.source_relation\n    from ugc_post_history\n    left join ugc_post_share_statistic\n        on cast(ugc_post_share_statistic.ugc_post_id as TEXT) = cast(ugc_post_history.ugc_post_id as TEXT)\n        and ugc_post_share_statistic.source_relation = ugc_post_history.source_relation\n    left join share_statistic\n        on share_statistic.share_statistic_id = ugc_post_share_statistic.share_statistic_id\n        and share_statistic.source_relation = ugc_post_share_statistic.source_relation\n    left join ugc_post_share_content_media\n        on ugc_post_history.ugc_post_id = ugc_post_share_content_media.ugc_post_id\n        and ugc_post_history.source_relation = ugc_post_share_content_media.source_relation\n    left join organization_ugc_post\n        on ugc_post_history.ugc_post_id = organization_ugc_post.ugc_post_id\n        and ugc_post_history.source_relation = organization_ugc_post.source_relation\n    left join organization\n        on organization_ugc_post.organization_id = organization.organization_id\n        and organization_ugc_post.source_relation = organization.source_relation\n\n)\n\nselect *\nfrom joined", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests_linkedin_pages\".\"linkedin_pages__posts\""}, "model.linkedin_pages.int_linkedin_pages__latest_post_history": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.linkedin_pages_source.stg_linkedin_pages__ugc_post_history"]}, "config": {"enabled": true, "alias": null, "schema": "linkedin_pages", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests_linkedin_pages", "fqn": ["linkedin_pages", "intermediate", "int_linkedin_pages__latest_post_history"], "unique_id": "model.linkedin_pages.int_linkedin_pages__latest_post_history", "raw_code": "with ugc_post_history as (\n\n    select *\n    from {{ var('ugc_post_history_staging') }}\n\n), is_most_recent as (\n\n    select\n        *,\n        row_number() over (partition by ugc_post_id, source_relation order by last_modified_timestamp desc) = 1 as is_most_recent_record\n    from ugc_post_history\n\n)\n\nselect *\nfrom is_most_recent", "language": "sql", "package_name": "linkedin_pages", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/linkedin_pages", "path": "intermediate/int_linkedin_pages__latest_post_history.sql", "original_file_path": "models/intermediate/int_linkedin_pages__latest_post_history.sql", "name": "int_linkedin_pages__latest_post_history", "alias": "int_linkedin_pages__latest_post_history", "checksum": {"name": "sha256", "checksum": "c084a8faa5ef7d910d76aee852db9de4ab8cd136e747ef43fd17cab04e2c15d7"}, "tags": [], "refs": [["stg_linkedin_pages__ugc_post_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/linkedin_pages/models/intermediate/int_linkedin_pages__latest_post_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "linkedin_pages", "materialized": "table"}, "created_at": 1671477151.760125, "compiled_code": "with ugc_post_history as (\n\n    select *\n    from \"postgres\".\"social_media_rollup_integration_tests_stg_linkedin_pages\".\"stg_linkedin_pages__ugc_post_history\"\n\n), is_most_recent as (\n\n    select\n        *,\n        row_number() over (partition by ugc_post_id, source_relation order by last_modified_timestamp desc) = 1 as is_most_recent_record\n    from ugc_post_history\n\n)\n\nselect *\nfrom is_most_recent", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests_linkedin_pages\".\"int_linkedin_pages__latest_post_history\""}, "model.linkedin_pages.int_linkedin_pages__latest_post": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_statistic"]}, "config": {"enabled": true, "alias": null, "schema": "linkedin_pages", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests_linkedin_pages", "fqn": ["linkedin_pages", "intermediate", "int_linkedin_pages__latest_post"], "unique_id": "model.linkedin_pages.int_linkedin_pages__latest_post", "raw_code": "with ugc_post as (\n\n    select *\n    from {{ var('ugc_post_share_statistic_staging') }}\n\n), is_most_recent as (\n\n    select \n        *,\n        row_number() over (partition by ugc_post_id, source_relation order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from ugc_post\n\n)\n\nselect *\nfrom is_most_recent", "language": "sql", "package_name": "linkedin_pages", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/linkedin_pages", "path": "intermediate/int_linkedin_pages__latest_post.sql", "original_file_path": "models/intermediate/int_linkedin_pages__latest_post.sql", "name": "int_linkedin_pages__latest_post", "alias": "int_linkedin_pages__latest_post", "checksum": {"name": "sha256", "checksum": "a59248fe76fdbb15209b1bdfda441750d7e5ec0cc4a7b8573f1e311d302bc518"}, "tags": [], "refs": [["stg_linkedin_pages__ugc_post_share_statistic"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/linkedin_pages/models/intermediate/int_linkedin_pages__latest_post.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "linkedin_pages", "materialized": "table"}, "created_at": 1671477151.763666, "compiled_code": "with ugc_post as (\n\n    select *\n    from \"postgres\".\"social_media_rollup_integration_tests_stg_linkedin_pages\".\"stg_linkedin_pages__ugc_post_share_statistic\"\n\n), is_most_recent as (\n\n    select \n        *,\n        row_number() over (partition by ugc_post_id, source_relation order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from ugc_post\n\n)\n\nselect *\nfrom is_most_recent", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests_linkedin_pages\".\"int_linkedin_pages__latest_post\""}, "model.instagram_business_source.stg_instagram_business__user_history": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.instagram_business_source.get_user_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation"], "nodes": ["model.instagram_business_source.stg_instagram_business__user_history_tmp", "model.instagram_business_source.stg_instagram_business__user_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_instagram_business", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests_stg_instagram_business", "fqn": ["instagram_business_source", "stg_instagram_business__user_history"], "unique_id": "model.instagram_business_source.stg_instagram_business__user_history", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_instagram_business__user_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_instagram_business__user_history_tmp')),\n                staging_columns=get_user_history_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='instagram_business_union_schemas', \n            union_database_variable='instagram_business_union_databases') \n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_id,\n        _fivetran_synced,\n        followers_count,\n        follows_count,\n        id as user_id,\n        ig_id,\n        media_count,\n        name as account_name,\n        username,\n        website,\n        source_relation\n    from fields\n),\n\nis_most_recent as (\n\n    select \n        *,\n        row_number() over (partition by user_id, source_relation order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from final\n\n)\n\nselect * from is_most_recent", "language": "sql", "package_name": "instagram_business_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/instagram_business_source", "path": "stg_instagram_business__user_history.sql", "original_file_path": "models/stg_instagram_business__user_history.sql", "name": "stg_instagram_business__user_history", "alias": "stg_instagram_business__user_history", "checksum": {"name": "sha256", "checksum": "b93eae169aab58b95944be92c4134e7ef274a9f5aa15abc5f0d6b5699e6b8dee"}, "tags": [], "refs": [["stg_instagram_business__user_history_tmp"], ["stg_instagram_business__user_history_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a version of an Instagram user.", "columns": {"_fivetran_id": {"name": "_fivetran_id", "description": "Fivetran's internal ID for this record", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "When this record was last synced with Fivetran", "meta": {}, "data_type": null, "quote": null, "tags": []}, "followers_count": {"name": "followers_count", "description": "Total number of followers of this user.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "follows_count": {"name": "follows_count", "description": "Total number of users this user follows.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "The user ID of this user.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ig_id": {"name": "ig_id", "description": "The Instagram user ID of this user.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "media_count": {"name": "media_count", "description": "Total number of media this user has posted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The name of this user.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "username": {"name": "username", "description": "The username of this user.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "website": {"name": "website", "description": "The website linked in the profile of this user.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record, if the unioning functionality is being used.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "instagram_business_source://models/stg_instagram_business.yml", "compiled_path": "target/compiled/instagram_business_source/models/stg_instagram_business__user_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_instagram_business", "materialized": "table"}, "created_at": 1671477152.1227899, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"social_media_rollup_integration_tests_stg_instagram_business\".\"stg_instagram_business__user_history_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_id\n    \n as \n    \n    _fivetran_id\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    followers_count\n    \n as \n    \n    followers_count\n    \n, \n    \n    \n    follows_count\n    \n as \n    \n    follows_count\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    ig_id\n    \n as \n    \n    ig_id\n    \n, \n    \n    \n    media_count\n    \n as \n    \n    media_count\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    username\n    \n as \n    \n    username\n    \n, \n    \n    \n    website\n    \n as \n    \n    website\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_id,\n        _fivetran_synced,\n        followers_count,\n        follows_count,\n        id as user_id,\n        ig_id,\n        media_count,\n        name as account_name,\n        username,\n        website,\n        source_relation\n    from fields\n),\n\nis_most_recent as (\n\n    select \n        *,\n        row_number() over (partition by user_id, source_relation order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from final\n\n)\n\nselect * from is_most_recent", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests_stg_instagram_business\".\"stg_instagram_business__user_history\""}, "model.instagram_business_source.stg_instagram_business__media_insights": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.instagram_business_source.get_media_insights_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation"], "nodes": ["model.instagram_business_source.stg_instagram_business__media_insights_tmp", "model.instagram_business_source.stg_instagram_business__media_insights_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_instagram_business", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests_stg_instagram_business", "fqn": ["instagram_business_source", "stg_instagram_business__media_insights"], "unique_id": "model.instagram_business_source.stg_instagram_business__media_insights", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_instagram_business__media_insights_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_instagram_business__media_insights_tmp')),\n                staging_columns=get_media_insights_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='instagram_business_union_schemas', \n            union_database_variable='instagram_business_union_databases') \n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_id,\n        _fivetran_synced,\n        carousel_album_engagement,\n        carousel_album_impressions,\n        carousel_album_reach,\n        carousel_album_saved,\n        carousel_album_video_views,\n        comment_count,\n        id as post_id,\n        like_count,\n        story_exits,\n        story_impressions,\n        story_reach,\n        story_replies,\n        story_taps_back,\n        story_taps_forward,\n        video_photo_engagement,\n        video_photo_impressions,\n        video_photo_reach,\n        video_photo_saved,\n        video_views,\n        source_relation\n    from fields\n),\n\nis_most_recent as (\n\n    select \n        *,\n        row_number() over (partition by post_id, source_relation order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from final\n\n)\n\nselect * from is_most_recent", "language": "sql", "package_name": "instagram_business_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/instagram_business_source", "path": "stg_instagram_business__media_insights.sql", "original_file_path": "models/stg_instagram_business__media_insights.sql", "name": "stg_instagram_business__media_insights", "alias": "stg_instagram_business__media_insights", "checksum": {"name": "sha256", "checksum": "dd48df251e9535903a8f11f017915a805388220400e9ea727f508c71d945ce52"}, "tags": [], "refs": [["stg_instagram_business__media_insights_tmp"], ["stg_instagram_business__media_insights_tmp"]], "sources": [], "metrics": [], "description": "Each record represents the daily performance of a post or story.", "columns": {"_fivetran_id": {"name": "_fivetran_id", "description": "Fivetran's internal ID for this record", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "When this record was last synced with Fivetran", "meta": {}, "data_type": null, "quote": null, "tags": []}, "carousel_album_engagement": {"name": "carousel_album_engagement", "description": "Total number of likes and IG Comments on the album IG Media object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "carousel_album_impressions": {"name": "carousel_album_impressions", "description": "Total number of times the album IG Media object has been seen", "meta": {}, "data_type": null, "quote": null, "tags": []}, "carousel_album_reach": {"name": "carousel_album_reach", "description": "Total number of unique Instagram accounts that have seen the album IG Media object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "carousel_album_saved": {"name": "carousel_album_saved", "description": "Total number of unique Instagram accounts that have saved the album IG Media object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "carousel_album_video_views": {"name": "carousel_album_video_views", "description": "Total number of unique Instagram accounts that have viewed video IG Media within the album.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "comment_count": {"name": "comment_count", "description": "Total number of comments on the IG Media object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_id": {"name": "post_id", "description": "The media ID of this post or story", "meta": {}, "data_type": null, "quote": null, "tags": []}, "like_count": {"name": "like_count", "description": "Total number of likes on the IG Media object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "story_exits": {"name": "story_exits", "description": "Number of times someone exited the story IG Media object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "story_impressions": {"name": "story_impressions", "description": "Total number of times the story IG Media object has been seen.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "story_reach": {"name": "story_reach", "description": "Total number of unique Instagram accounts that have seen the story IG Media object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "story_replies": {"name": "story_replies", "description": "Total number of replies to the story IG Media object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "story_taps_back": {"name": "story_taps_back", "description": "Total number of taps to see this story IG Media object's next photo or video.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "story_taps_forward": {"name": "story_taps_forward", "description": "Total number of taps to see this story IG Media object's previous photo or video.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_photo_engagement": {"name": "video_photo_engagement", "description": "Total number of likes and IG Comments on the video IG Media object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_photo_impressions": {"name": "video_photo_impressions", "description": "Total number of times the video IG Media object has been seen.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_photo_reach": {"name": "video_photo_reach", "description": "Total number of unique Instagram accounts that have seen the video IG Media object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_photo_saved": {"name": "video_photo_saved", "description": "Total number of unique Instagram accounts that have saved the video IG Media object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views": {"name": "video_views", "description": "Total number of times the video IG Media object has been viewed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record, if the unioning functionality is being used.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "instagram_business_source://models/stg_instagram_business.yml", "compiled_path": "target/compiled/instagram_business_source/models/stg_instagram_business__media_insights.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_instagram_business", "materialized": "table"}, "created_at": 1671477152.121078, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"social_media_rollup_integration_tests_stg_instagram_business\".\"stg_instagram_business__media_insights_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_id\n    \n as \n    \n    _fivetran_id\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    carousel_album_engagement\n    \n as \n    \n    carousel_album_engagement\n    \n, \n    \n    \n    carousel_album_impressions\n    \n as \n    \n    carousel_album_impressions\n    \n, \n    \n    \n    carousel_album_reach\n    \n as \n    \n    carousel_album_reach\n    \n, \n    \n    \n    carousel_album_saved\n    \n as \n    \n    carousel_album_saved\n    \n, \n    \n    \n    carousel_album_video_views\n    \n as \n    \n    carousel_album_video_views\n    \n, \n    \n    \n    comment_count\n    \n as \n    \n    comment_count\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    like_count\n    \n as \n    \n    like_count\n    \n, \n    \n    \n    story_exits\n    \n as \n    \n    story_exits\n    \n, \n    \n    \n    story_impressions\n    \n as \n    \n    story_impressions\n    \n, \n    \n    \n    story_reach\n    \n as \n    \n    story_reach\n    \n, \n    \n    \n    story_replies\n    \n as \n    \n    story_replies\n    \n, \n    \n    \n    story_taps_back\n    \n as \n    \n    story_taps_back\n    \n, \n    \n    \n    story_taps_forward\n    \n as \n    \n    story_taps_forward\n    \n, \n    \n    \n    video_photo_engagement\n    \n as \n    \n    video_photo_engagement\n    \n, \n    \n    \n    video_photo_impressions\n    \n as \n    \n    video_photo_impressions\n    \n, \n    \n    \n    video_photo_reach\n    \n as \n    \n    video_photo_reach\n    \n, \n    \n    \n    video_photo_saved\n    \n as \n    \n    video_photo_saved\n    \n, \n    \n    \n    video_views\n    \n as \n    \n    video_views\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_id,\n        _fivetran_synced,\n        carousel_album_engagement,\n        carousel_album_impressions,\n        carousel_album_reach,\n        carousel_album_saved,\n        carousel_album_video_views,\n        comment_count,\n        id as post_id,\n        like_count,\n        story_exits,\n        story_impressions,\n        story_reach,\n        story_replies,\n        story_taps_back,\n        story_taps_forward,\n        video_photo_engagement,\n        video_photo_impressions,\n        video_photo_reach,\n        video_photo_saved,\n        video_views,\n        source_relation\n    from fields\n),\n\nis_most_recent as (\n\n    select \n        *,\n        row_number() over (partition by post_id, source_relation order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from final\n\n)\n\nselect * from is_most_recent", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests_stg_instagram_business\".\"stg_instagram_business__media_insights\""}, "model.instagram_business_source.stg_instagram_business__media_history": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.instagram_business_source.get_media_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation"], "nodes": ["model.instagram_business_source.stg_instagram_business__media_history_tmp", "model.instagram_business_source.stg_instagram_business__media_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_instagram_business", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests_stg_instagram_business", "fqn": ["instagram_business_source", "stg_instagram_business__media_history"], "unique_id": "model.instagram_business_source.stg_instagram_business__media_history", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_instagram_business__media_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_instagram_business__media_history_tmp')),\n                staging_columns=get_media_history_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='instagram_business_union_schemas', \n            union_database_variable='instagram_business_union_databases') \n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_id,\n        _fivetran_synced,\n        caption as post_caption,\n        carousel_album_id,\n        created_time as created_timestamp,\n        id as post_id,\n        ig_id,\n        is_comment_enabled,\n        is_story,\n        media_type,\n        media_url,\n        permalink as post_url,\n        shortcode,\n        thumbnail_url,\n        user_id,\n        username,\n        source_relation\n    from fields\n),\n\nis_most_recent as (\n\n    select \n        *,\n        row_number() over (partition by post_id, source_relation order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from final\n\n)\n\nselect * from is_most_recent", "language": "sql", "package_name": "instagram_business_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/instagram_business_source", "path": "stg_instagram_business__media_history.sql", "original_file_path": "models/stg_instagram_business__media_history.sql", "name": "stg_instagram_business__media_history", "alias": "stg_instagram_business__media_history", "checksum": {"name": "sha256", "checksum": "dc62ae9bba159f233118c63dc40a3e09521b927f883e8f1a8fd5312aeee9c923"}, "tags": [], "refs": [["stg_instagram_business__media_history_tmp"], ["stg_instagram_business__media_history_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a version of an Instagram post or story", "columns": {"_fivetran_id": {"name": "_fivetran_id", "description": "Fivetran's internal ID for this record", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "When this record was last synced with Fivetran", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_caption": {"name": "post_caption", "description": "The caption of the post or story", "meta": {}, "data_type": null, "quote": null, "tags": []}, "carousel_album_id": {"name": "carousel_album_id", "description": "The ID of the carousel album this post or story belongs to", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "The timestamp this post or story was created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_id": {"name": "post_id", "description": "The media ID of this post or story", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ig_id": {"name": "ig_id", "description": "The Instagram media ID of this post or story", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_comment_enabled": {"name": "is_comment_enabled", "description": "Whether comments are enabled for this post or story", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_story": {"name": "is_story", "description": "Whether this is a story", "meta": {}, "data_type": null, "quote": null, "tags": []}, "media_type": {"name": "media_type", "description": "Media type. Can be CAROUSEL_ALBUM, IMAGE, or VIDEO.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "media_url": {"name": "media_url", "description": "Media URL. Will be omitted from responses if the media contains copyrighted material, or has been flagged for a copyright violation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_url": {"name": "post_url", "description": "Permanent URL to the media.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shortcode": {"name": "shortcode", "description": "Shortcode to the media.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "thumbnail_url": {"name": "thumbnail_url", "description": "Media thumbnail URL. Only available on VIDEO media.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "ID of the user who posted this post or story", "meta": {}, "data_type": null, "quote": null, "tags": []}, "username": {"name": "username", "description": "Username of user who created the media.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Whether this is the most recent record of this post/story.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record, if the unioning functionality is being used.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "instagram_business_source://models/stg_instagram_business.yml", "compiled_path": "target/compiled/instagram_business_source/models/stg_instagram_business__media_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_instagram_business", "materialized": "table"}, "created_at": 1671477152.117758, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"social_media_rollup_integration_tests_stg_instagram_business\".\"stg_instagram_business__media_history_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_id\n    \n as \n    \n    _fivetran_id\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    caption\n    \n as \n    \n    caption\n    \n, \n    \n    \n    carousel_album_id\n    \n as \n    \n    carousel_album_id\n    \n, \n    \n    \n    created_time\n    \n as \n    \n    created_time\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    ig_id\n    \n as \n    \n    ig_id\n    \n, \n    \n    \n    is_comment_enabled\n    \n as \n    \n    is_comment_enabled\n    \n, \n    \n    \n    is_story\n    \n as \n    \n    is_story\n    \n, \n    \n    \n    media_type\n    \n as \n    \n    media_type\n    \n, \n    \n    \n    media_url\n    \n as \n    \n    media_url\n    \n, \n    \n    \n    permalink\n    \n as \n    \n    permalink\n    \n, \n    \n    \n    shortcode\n    \n as \n    \n    shortcode\n    \n, \n    \n    \n    thumbnail_url\n    \n as \n    \n    thumbnail_url\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n, \n    \n    \n    username\n    \n as \n    \n    username\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_id,\n        _fivetran_synced,\n        caption as post_caption,\n        carousel_album_id,\n        created_time as created_timestamp,\n        id as post_id,\n        ig_id,\n        is_comment_enabled,\n        is_story,\n        media_type,\n        media_url,\n        permalink as post_url,\n        shortcode,\n        thumbnail_url,\n        user_id,\n        username,\n        source_relation\n    from fields\n),\n\nis_most_recent as (\n\n    select \n        *,\n        row_number() over (partition by post_id, source_relation order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from final\n\n)\n\nselect * from is_most_recent", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests_stg_instagram_business\".\"stg_instagram_business__media_history\""}, "model.instagram_business_source.stg_instagram_business__media_insights_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["seed.social_media_rollup_integration_tests.instagram_business_media_insights_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_instagram_business", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests_stg_instagram_business", "fqn": ["instagram_business_source", "tmp", "stg_instagram_business__media_insights_tmp"], "unique_id": "model.instagram_business_source.stg_instagram_business__media_insights_tmp", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='media_insights', \n        database_variable='instagram_business_database', \n        schema_variable='instagram_business_schema', \n        default_database=target.database,\n        default_schema='instagram_business_pages',\n        default_variable='media_insights',\n        union_schema_variable='instagram_business_union_schemas',\n        union_database_variable='instagram_business_union_databases'\n    )\n}}", "language": "sql", "package_name": "instagram_business_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/instagram_business_source", "path": "tmp/stg_instagram_business__media_insights_tmp.sql", "original_file_path": "models/tmp/stg_instagram_business__media_insights_tmp.sql", "name": "stg_instagram_business__media_insights_tmp", "alias": "stg_instagram_business__media_insights_tmp", "checksum": {"name": "sha256", "checksum": "05bbb74a73ba42e1ce17b4f06853738804bd8f3f0c4572c69edffd0444be6021"}, "tags": [], "refs": [["instagram_business_media_insights_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/instagram_business_source/models/tmp/stg_instagram_business__media_insights_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_instagram_business", "materialized": "table"}, "created_at": 1671477151.802855, "compiled_code": "\n\n\n\n    select * \n    from \"postgres\".\"social_media_rollup_integration_tests\".\"instagram_business_media_insights_data\"\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests_stg_instagram_business\".\"stg_instagram_business__media_insights_tmp\""}, "model.instagram_business_source.stg_instagram_business__user_history_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["seed.social_media_rollup_integration_tests.instagram_business_user_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_instagram_business", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests_stg_instagram_business", "fqn": ["instagram_business_source", "tmp", "stg_instagram_business__user_history_tmp"], "unique_id": "model.instagram_business_source.stg_instagram_business__user_history_tmp", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='user_history', \n        database_variable='instagram_business_database', \n        schema_variable='instagram_business_schema', \n        default_database=target.database,\n        default_schema='instagram_business_pages',\n        default_variable='user_history',\n        union_schema_variable='instagram_business_union_schemas',\n        union_database_variable='instagram_business_union_databases'\n    )\n}}", "language": "sql", "package_name": "instagram_business_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/instagram_business_source", "path": "tmp/stg_instagram_business__user_history_tmp.sql", "original_file_path": "models/tmp/stg_instagram_business__user_history_tmp.sql", "name": "stg_instagram_business__user_history_tmp", "alias": "stg_instagram_business__user_history_tmp", "checksum": {"name": "sha256", "checksum": "52648533aa76647f4fbc8e3f0547f7de0b5575126b01efa8ea3503737aa2dc67"}, "tags": [], "refs": [["instagram_business_user_history_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/instagram_business_source/models/tmp/stg_instagram_business__user_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_instagram_business", "materialized": "table"}, "created_at": 1671477151.8074722, "compiled_code": "\n\n\n\n    select * \n    from \"postgres\".\"social_media_rollup_integration_tests\".\"instagram_business_user_history_data\"\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests_stg_instagram_business\".\"stg_instagram_business__user_history_tmp\""}, "model.instagram_business_source.stg_instagram_business__media_history_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["seed.social_media_rollup_integration_tests.instagram_business_media_history_data"]}, "config": {"enabled": true, "alias": null, "schema": "stg_instagram_business", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests_stg_instagram_business", "fqn": ["instagram_business_source", "tmp", "stg_instagram_business__media_history_tmp"], "unique_id": "model.instagram_business_source.stg_instagram_business__media_history_tmp", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='media_history', \n        database_variable='instagram_business_database', \n        schema_variable='instagram_business_schema', \n        default_database=target.database,\n        default_schema='instagram_business_pages',\n        default_variable='media_history',\n        union_schema_variable='instagram_business_union_schemas',\n        union_database_variable='instagram_business_union_databases'\n    )\n}}", "language": "sql", "package_name": "instagram_business_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/instagram_business_source", "path": "tmp/stg_instagram_business__media_history_tmp.sql", "original_file_path": "models/tmp/stg_instagram_business__media_history_tmp.sql", "name": "stg_instagram_business__media_history_tmp", "alias": "stg_instagram_business__media_history_tmp", "checksum": {"name": "sha256", "checksum": "609866363ca8cf99a9b309099ea8ea353b94db3a923983fee3510492018dad50"}, "tags": [], "refs": [["instagram_business_media_history_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/instagram_business_source/models/tmp/stg_instagram_business__media_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_instagram_business", "materialized": "table"}, "created_at": 1671477151.811092, "compiled_code": "\n\n\n\n    select * \n    from \"postgres\".\"social_media_rollup_integration_tests\".\"instagram_business_media_history_data\"\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests_stg_instagram_business\".\"stg_instagram_business__media_history_tmp\""}, "model.social_media_reporting.social_media_reporting__rollup_report": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.social_media_reporting.get_staging_files", "macro.dbt_utils.union_relations"], "nodes": ["model.social_media_reporting.social_media_reporting__twitter_posts_reporting", "model.social_media_reporting.social_media_reporting__facebook_posts_reporting", "model.social_media_reporting.social_media_reporting__linkedin_posts_reporting", "model.social_media_reporting.social_media_reporting__instagram_posts_reporting"]}, "config": {"enabled": true, "alias": null, "schema": "social_media_reporting", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests_social_media_reporting", "fqn": ["social_media_reporting", "social_media_reporting__rollup_report"], "unique_id": "model.social_media_reporting.social_media_reporting__rollup_report", "raw_code": "with unioned as (\n\n    {{ dbt_utils.union_relations(get_staging_files()) }}\n\n)\n\nselect *\nfrom unioned", "language": "sql", "package_name": "social_media_reporting", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/social_media_reporting", "path": "social_media_reporting__rollup_report.sql", "original_file_path": "models/social_media_reporting__rollup_report.sql", "name": "social_media_reporting__rollup_report", "alias": "social_media_reporting__rollup_report", "checksum": {"name": "sha256", "checksum": "b0e660b2944733c742aff79034eacaf99909accd236ff74523af8d570512ab8f"}, "tags": [], "refs": [["social_media_reporting__twitter_posts_reporting"], ["social_media_reporting__facebook_posts_reporting"], ["social_media_reporting__linkedin_posts_reporting"], ["social_media_reporting__instagram_posts_reporting"]], "sources": [], "metrics": [], "description": "Each record represents a post from a social media account", "columns": {"created_timestamp": {"name": "created_timestamp", "description": "The timestamp the post was created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_id": {"name": "post_id", "description": "The ID of the post, from the source platform", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_message": {"name": "post_message", "description": "The message of the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_id": {"name": "page_id", "description": "The ID of the page, from the source platform", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_name": {"name": "page_name", "description": "The name of the page, from the source platform", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_url": {"name": "post_url", "description": "The URL of the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record, if the unioning functionality is being used.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "platform": {"name": "platform", "description": "The platform the post comes from", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks on the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions on the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "likes": {"name": "likes", "description": "The number of likes on the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shares": {"name": "shares", "description": "The number of shares on the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "comments": {"name": "comments", "description": "The number of comments on the post", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "social_media_reporting://models/social_media_reporting.yml", "compiled_path": "target/compiled/social_media_reporting/models/social_media_reporting__rollup_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "social_media_reporting", "materialized": "table"}, "created_at": 1671477152.151139, "compiled_code": "with unioned as (\n\n    \n\n        (\n            select\n                cast('\"postgres\".\"social_media_rollup_integration_tests_social_media_reporting\".\"social_media_reporting__twitter_posts_reporting\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"created_timestamp\" as timestamp without time zone) as \"created_timestamp\" ,\n                    cast(\"post_id\" as text) as \"post_id\" ,\n                    cast(\"post_message\" as text) as \"post_message\" ,\n                    cast(\"page_id\" as text) as \"page_id\" ,\n                    cast(\"page_name\" as text) as \"page_name\" ,\n                    cast(\"post_url\" as text) as \"post_url\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"platform\" as text) as \"platform\" ,\n                    cast(\"clicks\" as numeric) as \"clicks\" ,\n                    cast(\"impressions\" as numeric) as \"impressions\" ,\n                    cast(\"likes\" as numeric) as \"likes\" ,\n                    cast(\"shares\" as numeric) as \"shares\" ,\n                    cast(\"comments\" as numeric) as \"comments\" \n\n            from \"postgres\".\"social_media_rollup_integration_tests_social_media_reporting\".\"social_media_reporting__twitter_posts_reporting\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"postgres\".\"social_media_rollup_integration_tests_social_media_reporting\".\"social_media_reporting__facebook_posts_reporting\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"created_timestamp\" as timestamp without time zone) as \"created_timestamp\" ,\n                    cast(\"post_id\" as text) as \"post_id\" ,\n                    cast(\"post_message\" as text) as \"post_message\" ,\n                    cast(\"page_id\" as text) as \"page_id\" ,\n                    cast(\"page_name\" as text) as \"page_name\" ,\n                    cast(\"post_url\" as text) as \"post_url\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"platform\" as text) as \"platform\" ,\n                    cast(\"clicks\" as numeric) as \"clicks\" ,\n                    cast(\"impressions\" as numeric) as \"impressions\" ,\n                    cast(\"likes\" as numeric) as \"likes\" ,\n                    cast(null as numeric) as \"shares\" ,\n                    cast(null as numeric) as \"comments\" \n\n            from \"postgres\".\"social_media_rollup_integration_tests_social_media_reporting\".\"social_media_reporting__facebook_posts_reporting\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"postgres\".\"social_media_rollup_integration_tests_social_media_reporting\".\"social_media_reporting__linkedin_posts_reporting\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"created_timestamp\" as timestamp without time zone) as \"created_timestamp\" ,\n                    cast(\"post_id\" as text) as \"post_id\" ,\n                    cast(\"post_message\" as text) as \"post_message\" ,\n                    cast(\"page_id\" as text) as \"page_id\" ,\n                    cast(\"page_name\" as text) as \"page_name\" ,\n                    cast(\"post_url\" as text) as \"post_url\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"platform\" as text) as \"platform\" ,\n                    cast(\"clicks\" as numeric) as \"clicks\" ,\n                    cast(\"impressions\" as numeric) as \"impressions\" ,\n                    cast(\"likes\" as numeric) as \"likes\" ,\n                    cast(\"shares\" as numeric) as \"shares\" ,\n                    cast(\"comments\" as numeric) as \"comments\" \n\n            from \"postgres\".\"social_media_rollup_integration_tests_social_media_reporting\".\"social_media_reporting__linkedin_posts_reporting\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"postgres\".\"social_media_rollup_integration_tests_social_media_reporting\".\"social_media_reporting__instagram_posts_reporting\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"created_timestamp\" as timestamp without time zone) as \"created_timestamp\" ,\n                    cast(\"post_id\" as text) as \"post_id\" ,\n                    cast(\"post_message\" as text) as \"post_message\" ,\n                    cast(\"page_id\" as text) as \"page_id\" ,\n                    cast(\"page_name\" as text) as \"page_name\" ,\n                    cast(\"post_url\" as text) as \"post_url\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"platform\" as text) as \"platform\" ,\n                    cast(null as numeric) as \"clicks\" ,\n                    cast(\"impressions\" as numeric) as \"impressions\" ,\n                    cast(\"likes\" as numeric) as \"likes\" ,\n                    cast(null as numeric) as \"shares\" ,\n                    cast(\"comments\" as numeric) as \"comments\" \n\n            from \"postgres\".\"social_media_rollup_integration_tests_social_media_reporting\".\"social_media_reporting__instagram_posts_reporting\"\n\n            \n        )\n\n        \n\n)\n\nselect *\nfrom unioned", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests_social_media_reporting\".\"social_media_reporting__rollup_report\""}, "model.social_media_reporting.social_media_reporting__twitter_posts_reporting": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt_utils.group_by"], "nodes": ["model.twitter_organic.twitter_organic__tweets"]}, "config": {"enabled": true, "alias": null, "schema": "social_media_reporting", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests_social_media_reporting", "fqn": ["social_media_reporting", "intermediate", "social_media_reporting__twitter_posts_reporting"], "unique_id": "model.social_media_reporting.social_media_reporting__twitter_posts_reporting", "raw_code": "{{ config(enabled=var('social_media_rollup__twitter_enabled')) }}\n\nwith report as (\n\n    select *\n    from {{ var('twitter_posts_report') }}\n\n), fields as (\n\n    select        \n        created_timestamp,\n        cast(organic_tweet_id as {{ dbt.type_string() }}) as  post_id,\n        tweet_text as post_message,\n        account_id as page_id,\n        account_name as page_name,\n        post_url,\n        source_relation,\n        'twitter' as platform,\n        coalesce(sum(clicks),0) as clicks,\n        coalesce(sum(impressions),0) as impressions,\n        coalesce(sum(likes),0) as likes,\n        coalesce(sum(retweets),0) as shares,\n        coalesce(sum(replies),0) as comments\n    from report\n    {{ dbt_utils.group_by(8) }}\n\n)\n\nselect *\nfrom fields", "language": "sql", "package_name": "social_media_reporting", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/social_media_reporting", "path": "intermediate/social_media_reporting__twitter_posts_reporting.sql", "original_file_path": "models/intermediate/social_media_reporting__twitter_posts_reporting.sql", "name": "social_media_reporting__twitter_posts_reporting", "alias": "social_media_reporting__twitter_posts_reporting", "checksum": {"name": "sha256", "checksum": "3e4b6a304b719df26a8bc49a836906a042037deb2907cf1664901a2f757d3cbe"}, "tags": [], "refs": [["twitter_organic__tweets"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/social_media_reporting/models/intermediate/social_media_reporting__twitter_posts_reporting.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "social_media_reporting", "materialized": "table", "enabled": true}, "created_at": 1671477151.835238, "compiled_code": "\n\nwith report as (\n\n    select *\n    from \"postgres\".\"social_media_rollup_integration_tests_twitter_organic\".\"twitter_organic__tweets\"\n\n), fields as (\n\n    select        \n        created_timestamp,\n        cast(organic_tweet_id as TEXT) as  post_id,\n        tweet_text as post_message,\n        account_id as page_id,\n        account_name as page_name,\n        post_url,\n        source_relation,\n        'twitter' as platform,\n        coalesce(sum(clicks),0) as clicks,\n        coalesce(sum(impressions),0) as impressions,\n        coalesce(sum(likes),0) as likes,\n        coalesce(sum(retweets),0) as shares,\n        coalesce(sum(replies),0) as comments\n    from report\n    group by 1,2,3,4,5,6,7,8\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests_social_media_reporting\".\"social_media_reporting__twitter_posts_reporting\""}, "model.social_media_reporting.social_media_reporting__facebook_posts_reporting": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt_utils.group_by"], "nodes": ["model.facebook_pages.facebook_pages__posts_report"]}, "config": {"enabled": true, "alias": null, "schema": "social_media_reporting", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests_social_media_reporting", "fqn": ["social_media_reporting", "intermediate", "social_media_reporting__facebook_posts_reporting"], "unique_id": "model.social_media_reporting.social_media_reporting__facebook_posts_reporting", "raw_code": "{{ config(enabled=var('social_media_rollup__facebook_enabled')) }}\n\nwith report as (\n\n    select *\n    from {{ var('facebook_posts_report') }}\n    where is_most_recent_record = True\n\n), fields as (\n\n    select\n        created_timestamp,\n        cast(post_id as {{ dbt.type_string() }}) as post_id,\n        post_message,\n        post_url,\n        page_id,\n        page_name,\n        source_relation,\n        'facebook' as platform,\n        coalesce(sum(clicks),0) as clicks,\n        coalesce(sum(impressions),0) as impressions,\n        coalesce(sum(likes),0) as likes\n    from report\n    {{ dbt_utils.group_by(8) }}\n\n)\n\nselect *\nfrom fields", "language": "sql", "package_name": "social_media_reporting", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/social_media_reporting", "path": "intermediate/social_media_reporting__facebook_posts_reporting.sql", "original_file_path": "models/intermediate/social_media_reporting__facebook_posts_reporting.sql", "name": "social_media_reporting__facebook_posts_reporting", "alias": "social_media_reporting__facebook_posts_reporting", "checksum": {"name": "sha256", "checksum": "82498426164d163df7bac078d49b5ad74e6f6a89a336358432b1cf3f109ea5d8"}, "tags": [], "refs": [["facebook_pages__posts_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/social_media_reporting/models/intermediate/social_media_reporting__facebook_posts_reporting.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "social_media_reporting", "materialized": "table", "enabled": true}, "created_at": 1671477151.8391, "compiled_code": "\n\nwith report as (\n\n    select *\n    from \"postgres\".\"social_media_rollup_integration_tests_facebook_pages\".\"facebook_pages__posts_report\"\n    where is_most_recent_record = True\n\n), fields as (\n\n    select\n        created_timestamp,\n        cast(post_id as TEXT) as post_id,\n        post_message,\n        post_url,\n        page_id,\n        page_name,\n        source_relation,\n        'facebook' as platform,\n        coalesce(sum(clicks),0) as clicks,\n        coalesce(sum(impressions),0) as impressions,\n        coalesce(sum(likes),0) as likes\n    from report\n    group by 1,2,3,4,5,6,7,8\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests_social_media_reporting\".\"social_media_reporting__facebook_posts_reporting\""}, "model.social_media_reporting.social_media_reporting__instagram_posts_reporting": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt_utils.group_by"], "nodes": ["model.instagram_business.instagram_business__posts"]}, "config": {"enabled": true, "alias": null, "schema": "social_media_reporting", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests_social_media_reporting", "fqn": ["social_media_reporting", "intermediate", "social_media_reporting__instagram_posts_reporting"], "unique_id": "model.social_media_reporting.social_media_reporting__instagram_posts_reporting", "raw_code": "{{ config(enabled=var('social_media_rollup__instagram_enabled')) }}\n\nwith report as (\n\n    select *\n    from {{ var('instagram_posts_report') }}\n\n), fields as (\n\n    select\n        account_name as page_name,\n        user_id as page_id,\n        post_caption as post_message,\n        created_timestamp,\n        cast(post_id as {{ dbt.type_string() }}) as post_id,\n        post_url,\n        source_relation,\n        'instagram' as platform,\n        coalesce(sum(comment_count),0) as comments,\n        coalesce(sum(like_count),0) as likes,\n        sum(coalesce(carousel_album_impressions,0) + coalesce(story_impressions,0) + coalesce(video_photo_impressions, 0)) as impressions\n    from report\n    {{ dbt_utils.group_by(8) }}\n\n)\n\nselect *\nfrom fields", "language": "sql", "package_name": "social_media_reporting", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/social_media_reporting", "path": "intermediate/social_media_reporting__instagram_posts_reporting.sql", "original_file_path": "models/intermediate/social_media_reporting__instagram_posts_reporting.sql", "name": "social_media_reporting__instagram_posts_reporting", "alias": "social_media_reporting__instagram_posts_reporting", "checksum": {"name": "sha256", "checksum": "19ac57ba4276223f83a377c32b3e484e8e549c68f5732bd1099a93f490d4bd3c"}, "tags": [], "refs": [["instagram_business__posts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/social_media_reporting/models/intermediate/social_media_reporting__instagram_posts_reporting.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "social_media_reporting", "materialized": "table", "enabled": true}, "created_at": 1671477151.842861, "compiled_code": "\n\nwith report as (\n\n    select *\n    from \"postgres\".\"social_media_rollup_integration_tests_instagram_business\".\"instagram_business__posts\"\n\n), fields as (\n\n    select\n        account_name as page_name,\n        user_id as page_id,\n        post_caption as post_message,\n        created_timestamp,\n        cast(post_id as TEXT) as post_id,\n        post_url,\n        source_relation,\n        'instagram' as platform,\n        coalesce(sum(comment_count),0) as comments,\n        coalesce(sum(like_count),0) as likes,\n        sum(coalesce(carousel_album_impressions,0) + coalesce(story_impressions,0) + coalesce(video_photo_impressions, 0)) as impressions\n    from report\n    group by 1,2,3,4,5,6,7,8\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests_social_media_reporting\".\"social_media_reporting__instagram_posts_reporting\""}, "model.social_media_reporting.social_media_reporting__linkedin_posts_reporting": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt_utils.group_by"], "nodes": ["model.linkedin_pages.linkedin_pages__posts"]}, "config": {"enabled": true, "alias": null, "schema": "social_media_reporting", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "social_media_rollup_integration_tests_social_media_reporting", "fqn": ["social_media_reporting", "intermediate", "social_media_reporting__linkedin_posts_reporting"], "unique_id": "model.social_media_reporting.social_media_reporting__linkedin_posts_reporting", "raw_code": "{{ config(enabled=var('social_media_rollup__linkedin_enabled')) }}\n\nwith report as (\n\n    select *\n    from {{ var('linkedin_posts_report') }}\n\n), fields as (\n\n    select        \n        organization_id as page_id,\n        organization_name as page_name,\n        cast(ugc_post_id  as {{ dbt.type_string() }}) as post_id,\n        created_timestamp,\n        post_url,\n        source_relation,\n        'linkedin' as platform,\n        coalesce(title_text, specific_content_share_commentary_text) as post_message,\n        coalesce(sum(click_count),0) as clicks,\n        coalesce(sum(comment_count),0) as comments,\n        coalesce(sum(impression_count),0) as impressions,\n        coalesce(sum(like_count),0) as likes,\n        coalesce(sum(share_count),0) as shares\n    from report\n    {{ dbt_utils.group_by(8) }}\n\n)\n\nselect *\nfrom fields", "language": "sql", "package_name": "social_media_reporting", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/social_media_reporting", "path": "intermediate/social_media_reporting__linkedin_posts_reporting.sql", "original_file_path": "models/intermediate/social_media_reporting__linkedin_posts_reporting.sql", "name": "social_media_reporting__linkedin_posts_reporting", "alias": "social_media_reporting__linkedin_posts_reporting", "checksum": {"name": "sha256", "checksum": "7b25413c08695629eae66b202ee91d2bf3578fc741ccc69e2814edd41bfaae7a"}, "tags": [], "refs": [["linkedin_pages__posts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/social_media_reporting/models/intermediate/social_media_reporting__linkedin_posts_reporting.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "social_media_reporting", "materialized": "table", "enabled": true}, "created_at": 1671477151.847245, "compiled_code": "\n\nwith report as (\n\n    select *\n    from \"postgres\".\"social_media_rollup_integration_tests_linkedin_pages\".\"linkedin_pages__posts\"\n\n), fields as (\n\n    select        \n        organization_id as page_id,\n        organization_name as page_name,\n        cast(ugc_post_id  as TEXT) as post_id,\n        created_timestamp,\n        post_url,\n        source_relation,\n        'linkedin' as platform,\n        coalesce(title_text, specific_content_share_commentary_text) as post_message,\n        coalesce(sum(click_count),0) as clicks,\n        coalesce(sum(comment_count),0) as comments,\n        coalesce(sum(impression_count),0) as impressions,\n        coalesce(sum(like_count),0) as likes,\n        coalesce(sum(share_count),0) as shares\n    from report\n    group by 1,2,3,4,5,6,7,8\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"social_media_rollup_integration_tests_social_media_reporting\".\"social_media_reporting__linkedin_posts_reporting\""}, "test.instagram_business.not_null_instagram_business__posts_post_id.8daa517f7d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "post_id", "model": "{{ get_where_subquery(ref('instagram_business__posts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.instagram_business.instagram_business__posts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "social_media_rollup_integration_tests_dbt_test__audit", "fqn": ["instagram_business", "not_null_instagram_business__posts_post_id"], "unique_id": "test.instagram_business.not_null_instagram_business__posts_post_id.8daa517f7d", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "instagram_business", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/instagram_business", "path": "not_null_instagram_business__posts_post_id.sql", "original_file_path": "models/instagram_business.yml", "name": "not_null_instagram_business__posts_post_id", "alias": "not_null_instagram_business__posts_post_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["instagram_business__posts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/instagram_business/models/instagram_business.yml/not_null_instagram_business__posts_post_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1671477151.866455, "compiled_code": "\n    \n    \n\n\n\nselect post_id\nfrom \"postgres\".\"social_media_rollup_integration_tests_instagram_business\".\"instagram_business__posts\"\nwhere post_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "post_id", "file_key_name": "models.instagram_business__posts"}, "test.instagram_business.dbt_utils_unique_combination_of_columns_instagram_business__posts_post_id__source_relation.5a8087988b": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["post_id", "source_relation"], "model": "{{ get_where_subquery(ref('instagram_business__posts')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.instagram_business.instagram_business__posts"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_af4fba378043d1d4f6d2283e810b2dd4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "social_media_rollup_integration_tests_dbt_test__audit", "fqn": ["instagram_business", "dbt_utils_unique_combination_of_columns_instagram_business__posts_post_id__source_relation"], "unique_id": "test.instagram_business.dbt_utils_unique_combination_of_columns_instagram_business__posts_post_id__source_relation.5a8087988b", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_af4fba378043d1d4f6d2283e810b2dd4\") }}", "language": "sql", "package_name": "instagram_business", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/instagram_business", "path": "dbt_utils_unique_combination_o_af4fba378043d1d4f6d2283e810b2dd4.sql", "original_file_path": "models/instagram_business.yml", "name": "dbt_utils_unique_combination_of_columns_instagram_business__posts_post_id__source_relation", "alias": "dbt_utils_unique_combination_o_af4fba378043d1d4f6d2283e810b2dd4", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["instagram_business__posts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/instagram_business/models/instagram_business.yml/dbt_utils_unique_combination_o_af4fba378043d1d4f6d2283e810b2dd4.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_af4fba378043d1d4f6d2283e810b2dd4"}, "created_at": 1671477151.8675342, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        post_id, source_relation\n    from \"postgres\".\"social_media_rollup_integration_tests_instagram_business\".\"instagram_business__posts\"\n    group by post_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.instagram_business__posts"}, "test.twitter_organic.dbt_utils_unique_combination_of_columns_twitter_organic__tweets_date_day__organic_tweet_id__source_relation.b4415b6f20": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["date_day", "organic_tweet_id", "source_relation"], "model": "{{ get_where_subquery(ref('twitter_organic__tweets')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_organic.twitter_organic__tweets"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_bec6e81810630cfaf6d05fea0220f0ab", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "social_media_rollup_integration_tests_dbt_test__audit", "fqn": ["twitter_organic", "dbt_utils_unique_combination_of_columns_twitter_organic__tweets_date_day__organic_tweet_id__source_relation"], "unique_id": "test.twitter_organic.dbt_utils_unique_combination_of_columns_twitter_organic__tweets_date_day__organic_tweet_id__source_relation.b4415b6f20", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_bec6e81810630cfaf6d05fea0220f0ab\") }}", "language": "sql", "package_name": "twitter_organic", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/twitter_organic", "path": "dbt_utils_unique_combination_o_bec6e81810630cfaf6d05fea0220f0ab.sql", "original_file_path": "models/twitter_organic.yml", "name": "dbt_utils_unique_combination_of_columns_twitter_organic__tweets_date_day__organic_tweet_id__source_relation", "alias": "dbt_utils_unique_combination_o_bec6e81810630cfaf6d05fea0220f0ab", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["twitter_organic__tweets"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/twitter_organic/models/twitter_organic.yml/dbt_utils_unique_combination_o_bec6e81810630cfaf6d05fea0220f0ab.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_bec6e81810630cfaf6d05fea0220f0ab"}, "created_at": 1671477151.882215, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        date_day, organic_tweet_id, source_relation\n    from \"postgres\".\"social_media_rollup_integration_tests_twitter_organic\".\"twitter_organic__tweets\"\n    group by date_day, organic_tweet_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.twitter_organic__tweets"}, "test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__organization_ugc_post_organization_id__ugc_post_id__source_relation.74490569e1": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["organization_id", "ugc_post_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_linkedin_pages__organization_ugc_post')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin_pages_source.stg_linkedin_pages__organization_ugc_post"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_d8f0ceef64ff91866c8662e74ba8d885", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "social_media_rollup_integration_tests_dbt_test__audit", "fqn": ["linkedin_pages_source", "dbt_utils_unique_combination_of_columns_stg_linkedin_pages__organization_ugc_post_organization_id__ugc_post_id__source_relation"], "unique_id": "test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__organization_ugc_post_organization_id__ugc_post_id__source_relation.74490569e1", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_d8f0ceef64ff91866c8662e74ba8d885\") }}", "language": "sql", "package_name": "linkedin_pages_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/linkedin_pages_source", "path": "dbt_utils_unique_combination_o_d8f0ceef64ff91866c8662e74ba8d885.sql", "original_file_path": "models/stg_linkedin_pages.yml", "name": "dbt_utils_unique_combination_of_columns_stg_linkedin_pages__organization_ugc_post_organization_id__ugc_post_id__source_relation", "alias": "dbt_utils_unique_combination_o_d8f0ceef64ff91866c8662e74ba8d885", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_linkedin_pages__organization_ugc_post"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/linkedin_pages_source/models/stg_linkedin_pages.yml/dbt_utils_unique_combination_o_d8f0ceef64ff91866c8662e74ba8d885.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_d8f0ceef64ff91866c8662e74ba8d885"}, "created_at": 1671477151.919122, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        organization_id, ugc_post_id, source_relation\n    from \"postgres\".\"social_media_rollup_integration_tests_stg_linkedin_pages\".\"stg_linkedin_pages__organization_ugc_post\"\n    group by organization_id, ugc_post_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_linkedin_pages__organization_ugc_post"}, "test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__organization_organization_id__source_relation.edd32b54a1": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["organization_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_linkedin_pages__organization')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin_pages_source.stg_linkedin_pages__organization"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_e9c116b635a76ad3de9ba0935f0329b0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "social_media_rollup_integration_tests_dbt_test__audit", "fqn": ["linkedin_pages_source", "dbt_utils_unique_combination_of_columns_stg_linkedin_pages__organization_organization_id__source_relation"], "unique_id": "test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__organization_organization_id__source_relation.edd32b54a1", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_e9c116b635a76ad3de9ba0935f0329b0\") }}", "language": "sql", "package_name": "linkedin_pages_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/linkedin_pages_source", "path": "dbt_utils_unique_combination_o_e9c116b635a76ad3de9ba0935f0329b0.sql", "original_file_path": "models/stg_linkedin_pages.yml", "name": "dbt_utils_unique_combination_of_columns_stg_linkedin_pages__organization_organization_id__source_relation", "alias": "dbt_utils_unique_combination_o_e9c116b635a76ad3de9ba0935f0329b0", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_linkedin_pages__organization"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/linkedin_pages_source/models/stg_linkedin_pages.yml/dbt_utils_unique_combination_o_e9c116b635a76ad3de9ba0935f0329b0.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_e9c116b635a76ad3de9ba0935f0329b0"}, "created_at": 1671477151.9218838, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        organization_id, source_relation\n    from \"postgres\".\"social_media_rollup_integration_tests_stg_linkedin_pages\".\"stg_linkedin_pages__organization\"\n    group by organization_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_linkedin_pages__organization"}, "test.linkedin_pages_source.not_null_stg_linkedin_pages__share_statistic_organization_entity_urn.150c878c76": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "organization_entity_urn", "model": "{{ get_where_subquery(ref('stg_linkedin_pages__share_statistic')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin_pages_source.stg_linkedin_pages__share_statistic"]}, "config": {"enabled": true, "alias": "not_null_stg_linkedin_pages__s_a0a97d4d6eb118704a9d13b0d3daca65", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "social_media_rollup_integration_tests_dbt_test__audit", "fqn": ["linkedin_pages_source", "not_null_stg_linkedin_pages__share_statistic_organization_entity_urn"], "unique_id": "test.linkedin_pages_source.not_null_stg_linkedin_pages__share_statistic_organization_entity_urn.150c878c76", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_linkedin_pages__s_a0a97d4d6eb118704a9d13b0d3daca65\") }}", "language": "sql", "package_name": "linkedin_pages_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/linkedin_pages_source", "path": "not_null_stg_linkedin_pages__s_a0a97d4d6eb118704a9d13b0d3daca65.sql", "original_file_path": "models/stg_linkedin_pages.yml", "name": "not_null_stg_linkedin_pages__share_statistic_organization_entity_urn", "alias": "not_null_stg_linkedin_pages__s_a0a97d4d6eb118704a9d13b0d3daca65", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_linkedin_pages__share_statistic"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/linkedin_pages_source/models/stg_linkedin_pages.yml/not_null_stg_linkedin_pages__s_a0a97d4d6eb118704a9d13b0d3daca65.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_stg_linkedin_pages__s_a0a97d4d6eb118704a9d13b0d3daca65"}, "created_at": 1671477151.924474, "compiled_code": "\n    \n    \n\n\n\nselect organization_entity_urn\nfrom \"postgres\".\"social_media_rollup_integration_tests_stg_linkedin_pages\".\"stg_linkedin_pages__share_statistic\"\nwhere organization_entity_urn is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "organization_entity_urn", "file_key_name": "models.stg_linkedin_pages__share_statistic"}, "test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__share_statistic_share_statistic_id__source_relation.452f64d50a": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["share_statistic_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_linkedin_pages__share_statistic')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin_pages_source.stg_linkedin_pages__share_statistic"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_39f61c18d550550530a0fa7324e7f252", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "social_media_rollup_integration_tests_dbt_test__audit", "fqn": ["linkedin_pages_source", "dbt_utils_unique_combination_of_columns_stg_linkedin_pages__share_statistic_share_statistic_id__source_relation"], "unique_id": "test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__share_statistic_share_statistic_id__source_relation.452f64d50a", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_39f61c18d550550530a0fa7324e7f252\") }}", "language": "sql", "package_name": "linkedin_pages_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/linkedin_pages_source", "path": "dbt_utils_unique_combination_o_39f61c18d550550530a0fa7324e7f252.sql", "original_file_path": "models/stg_linkedin_pages.yml", "name": "dbt_utils_unique_combination_of_columns_stg_linkedin_pages__share_statistic_share_statistic_id__source_relation", "alias": "dbt_utils_unique_combination_o_39f61c18d550550530a0fa7324e7f252", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_linkedin_pages__share_statistic"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/linkedin_pages_source/models/stg_linkedin_pages.yml/dbt_utils_unique_combination_o_39f61c18d550550530a0fa7324e7f252.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_39f61c18d550550530a0fa7324e7f252"}, "created_at": 1671477151.9254742, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        share_statistic_id, source_relation\n    from \"postgres\".\"social_media_rollup_integration_tests_stg_linkedin_pages\".\"stg_linkedin_pages__share_statistic\"\n    group by share_statistic_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_linkedin_pages__share_statistic"}, "test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__ugc_post_history_ugc_post_id__last_modified_timestamp__source_relation.8192e4952b": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ugc_post_id", "last_modified_timestamp", "source_relation"], "model": "{{ get_where_subquery(ref('stg_linkedin_pages__ugc_post_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin_pages_source.stg_linkedin_pages__ugc_post_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_cbb76a7d9acc11d7f5018ed560c94a85", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "social_media_rollup_integration_tests_dbt_test__audit", "fqn": ["linkedin_pages_source", "dbt_utils_unique_combination_of_columns_stg_linkedin_pages__ugc_post_history_ugc_post_id__last_modified_timestamp__source_relation"], "unique_id": "test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__ugc_post_history_ugc_post_id__last_modified_timestamp__source_relation.8192e4952b", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_cbb76a7d9acc11d7f5018ed560c94a85\") }}", "language": "sql", "package_name": "linkedin_pages_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/linkedin_pages_source", "path": "dbt_utils_unique_combination_o_cbb76a7d9acc11d7f5018ed560c94a85.sql", "original_file_path": "models/stg_linkedin_pages.yml", "name": "dbt_utils_unique_combination_of_columns_stg_linkedin_pages__ugc_post_history_ugc_post_id__last_modified_timestamp__source_relation", "alias": "dbt_utils_unique_combination_o_cbb76a7d9acc11d7f5018ed560c94a85", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_linkedin_pages__ugc_post_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/linkedin_pages_source/models/stg_linkedin_pages.yml/dbt_utils_unique_combination_o_cbb76a7d9acc11d7f5018ed560c94a85.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_cbb76a7d9acc11d7f5018ed560c94a85"}, "created_at": 1671477151.928071, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ugc_post_id, last_modified_timestamp, source_relation\n    from \"postgres\".\"social_media_rollup_integration_tests_stg_linkedin_pages\".\"stg_linkedin_pages__ugc_post_history\"\n    group by ugc_post_id, last_modified_timestamp, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_linkedin_pages__ugc_post_history"}, "test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__ugc_post_share_content_media_ugc_post_id__last_modified_timestamp__source_relation.f629d7cf4d": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ugc_post_id", "last_modified_timestamp", "source_relation"], "model": "{{ get_where_subquery(ref('stg_linkedin_pages__ugc_post_share_content_media')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_content_media"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_792dce0468953cf4a93f7bf76f853f80", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "social_media_rollup_integration_tests_dbt_test__audit", "fqn": ["linkedin_pages_source", "dbt_utils_unique_combination_of_columns_stg_linkedin_pages__ugc_post_share_content_media_ugc_post_id__last_modified_timestamp__source_relation"], "unique_id": "test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__ugc_post_share_content_media_ugc_post_id__last_modified_timestamp__source_relation.f629d7cf4d", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_792dce0468953cf4a93f7bf76f853f80\") }}", "language": "sql", "package_name": "linkedin_pages_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/linkedin_pages_source", "path": "dbt_utils_unique_combination_o_792dce0468953cf4a93f7bf76f853f80.sql", "original_file_path": "models/stg_linkedin_pages.yml", "name": "dbt_utils_unique_combination_of_columns_stg_linkedin_pages__ugc_post_share_content_media_ugc_post_id__last_modified_timestamp__source_relation", "alias": "dbt_utils_unique_combination_o_792dce0468953cf4a93f7bf76f853f80", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_linkedin_pages__ugc_post_share_content_media"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/linkedin_pages_source/models/stg_linkedin_pages.yml/dbt_utils_unique_combination_o_792dce0468953cf4a93f7bf76f853f80.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_792dce0468953cf4a93f7bf76f853f80"}, "created_at": 1671477151.9308312, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ugc_post_id, last_modified_timestamp, source_relation\n    from \"postgres\".\"social_media_rollup_integration_tests_stg_linkedin_pages\".\"stg_linkedin_pages__ugc_post_share_content_media\"\n    group by ugc_post_id, last_modified_timestamp, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_linkedin_pages__ugc_post_share_content_media"}, "test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__ugc_post_share_statistic_share_statistic_id__source_relation.10bd19bf37": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["share_statistic_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_linkedin_pages__ugc_post_share_statistic')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_statistic"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_2ccb4f28d8f994da4f33b939dfffd39b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "social_media_rollup_integration_tests_dbt_test__audit", "fqn": ["linkedin_pages_source", "dbt_utils_unique_combination_of_columns_stg_linkedin_pages__ugc_post_share_statistic_share_statistic_id__source_relation"], "unique_id": "test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__ugc_post_share_statistic_share_statistic_id__source_relation.10bd19bf37", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_2ccb4f28d8f994da4f33b939dfffd39b\") }}", "language": "sql", "package_name": "linkedin_pages_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/linkedin_pages_source", "path": "dbt_utils_unique_combination_o_2ccb4f28d8f994da4f33b939dfffd39b.sql", "original_file_path": "models/stg_linkedin_pages.yml", "name": "dbt_utils_unique_combination_of_columns_stg_linkedin_pages__ugc_post_share_statistic_share_statistic_id__source_relation", "alias": "dbt_utils_unique_combination_o_2ccb4f28d8f994da4f33b939dfffd39b", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_linkedin_pages__ugc_post_share_statistic"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/linkedin_pages_source/models/stg_linkedin_pages.yml/dbt_utils_unique_combination_o_2ccb4f28d8f994da4f33b939dfffd39b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_2ccb4f28d8f994da4f33b939dfffd39b"}, "created_at": 1671477151.933814, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        share_statistic_id, source_relation\n    from \"postgres\".\"social_media_rollup_integration_tests_stg_linkedin_pages\".\"stg_linkedin_pages__ugc_post_share_statistic\"\n    group by share_statistic_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_linkedin_pages__ugc_post_share_statistic"}, "test.facebook_pages.not_null_facebook_pages__posts_report_date_day.ec0cb997b7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('facebook_pages__posts_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.facebook_pages.facebook_pages__posts_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "social_media_rollup_integration_tests_dbt_test__audit", "fqn": ["facebook_pages", "not_null_facebook_pages__posts_report_date_day"], "unique_id": "test.facebook_pages.not_null_facebook_pages__posts_report_date_day.ec0cb997b7", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "facebook_pages", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/facebook_pages", "path": "not_null_facebook_pages__posts_report_date_day.sql", "original_file_path": "models/facebook_pages.yml", "name": "not_null_facebook_pages__posts_report_date_day", "alias": "not_null_facebook_pages__posts_report_date_day", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["facebook_pages__posts_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/facebook_pages/models/facebook_pages.yml/not_null_facebook_pages__posts_report_date_day.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1671477151.9680698, "compiled_code": "\n    \n    \n\n\n\nselect date_day\nfrom \"postgres\".\"social_media_rollup_integration_tests_facebook_pages\".\"facebook_pages__posts_report\"\nwhere date_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_day", "file_key_name": "models.facebook_pages__posts_report"}, "test.facebook_pages.dbt_utils_unique_combination_of_columns_facebook_pages__posts_report_post_id__date_day__source_relation.19483d54fa": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["post_id", "date_day", "source_relation"], "model": "{{ get_where_subquery(ref('facebook_pages__posts_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.facebook_pages.facebook_pages__posts_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_4e62ff343a3798d332be2dd7f9ef5316", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "social_media_rollup_integration_tests_dbt_test__audit", "fqn": ["facebook_pages", "dbt_utils_unique_combination_of_columns_facebook_pages__posts_report_post_id__date_day__source_relation"], "unique_id": "test.facebook_pages.dbt_utils_unique_combination_of_columns_facebook_pages__posts_report_post_id__date_day__source_relation.19483d54fa", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_4e62ff343a3798d332be2dd7f9ef5316\") }}", "language": "sql", "package_name": "facebook_pages", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/facebook_pages", "path": "dbt_utils_unique_combination_o_4e62ff343a3798d332be2dd7f9ef5316.sql", "original_file_path": "models/facebook_pages.yml", "name": "dbt_utils_unique_combination_of_columns_facebook_pages__posts_report_post_id__date_day__source_relation", "alias": "dbt_utils_unique_combination_o_4e62ff343a3798d332be2dd7f9ef5316", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["facebook_pages__posts_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/facebook_pages/models/facebook_pages.yml/dbt_utils_unique_combination_o_4e62ff343a3798d332be2dd7f9ef5316.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_4e62ff343a3798d332be2dd7f9ef5316"}, "created_at": 1671477151.9690912, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        post_id, date_day, source_relation\n    from \"postgres\".\"social_media_rollup_integration_tests_facebook_pages\".\"facebook_pages__posts_report\"\n    group by post_id, date_day, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.facebook_pages__posts_report"}, "test.facebook_pages.not_null_facebook_pages__pages_report_page_id.42b740bfbe": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "page_id", "model": "{{ get_where_subquery(ref('facebook_pages__pages_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.facebook_pages.facebook_pages__pages_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "social_media_rollup_integration_tests_dbt_test__audit", "fqn": ["facebook_pages", "not_null_facebook_pages__pages_report_page_id"], "unique_id": "test.facebook_pages.not_null_facebook_pages__pages_report_page_id.42b740bfbe", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "facebook_pages", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/facebook_pages", "path": "not_null_facebook_pages__pages_report_page_id.sql", "original_file_path": "models/facebook_pages.yml", "name": "not_null_facebook_pages__pages_report_page_id", "alias": "not_null_facebook_pages__pages_report_page_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["facebook_pages__pages_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/facebook_pages/models/facebook_pages.yml/not_null_facebook_pages__pages_report_page_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1671477151.971839, "compiled_code": "\n    \n    \n\n\n\nselect page_id\nfrom \"postgres\".\"social_media_rollup_integration_tests_facebook_pages\".\"facebook_pages__pages_report\"\nwhere page_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "page_id", "file_key_name": "models.facebook_pages__pages_report"}, "test.facebook_pages.not_null_facebook_pages__pages_report_date_day.0d88b4b154": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('facebook_pages__pages_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.facebook_pages.facebook_pages__pages_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "social_media_rollup_integration_tests_dbt_test__audit", "fqn": ["facebook_pages", "not_null_facebook_pages__pages_report_date_day"], "unique_id": "test.facebook_pages.not_null_facebook_pages__pages_report_date_day.0d88b4b154", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "facebook_pages", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/facebook_pages", "path": "not_null_facebook_pages__pages_report_date_day.sql", "original_file_path": "models/facebook_pages.yml", "name": "not_null_facebook_pages__pages_report_date_day", "alias": "not_null_facebook_pages__pages_report_date_day", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["facebook_pages__pages_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/facebook_pages/models/facebook_pages.yml/not_null_facebook_pages__pages_report_date_day.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1671477151.972817, "compiled_code": "\n    \n    \n\n\n\nselect date_day\nfrom \"postgres\".\"social_media_rollup_integration_tests_facebook_pages\".\"facebook_pages__pages_report\"\nwhere date_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_day", "file_key_name": "models.facebook_pages__pages_report"}, "test.facebook_pages.dbt_utils_unique_combination_of_columns_facebook_pages__pages_report_page_id__date_day__source_relation.f6275f55a9": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["page_id", "date_day", "source_relation"], "model": "{{ get_where_subquery(ref('facebook_pages__pages_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.facebook_pages.facebook_pages__pages_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_b3412cdb7b8c0062498bd5e76c716805", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "social_media_rollup_integration_tests_dbt_test__audit", "fqn": ["facebook_pages", "dbt_utils_unique_combination_of_columns_facebook_pages__pages_report_page_id__date_day__source_relation"], "unique_id": "test.facebook_pages.dbt_utils_unique_combination_of_columns_facebook_pages__pages_report_page_id__date_day__source_relation.f6275f55a9", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_b3412cdb7b8c0062498bd5e76c716805\") }}", "language": "sql", "package_name": "facebook_pages", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/facebook_pages", "path": "dbt_utils_unique_combination_o_b3412cdb7b8c0062498bd5e76c716805.sql", "original_file_path": "models/facebook_pages.yml", "name": "dbt_utils_unique_combination_of_columns_facebook_pages__pages_report_page_id__date_day__source_relation", "alias": "dbt_utils_unique_combination_o_b3412cdb7b8c0062498bd5e76c716805", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["facebook_pages__pages_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/facebook_pages/models/facebook_pages.yml/dbt_utils_unique_combination_o_b3412cdb7b8c0062498bd5e76c716805.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_b3412cdb7b8c0062498bd5e76c716805"}, "created_at": 1671477151.973931, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        page_id, date_day, source_relation\n    from \"postgres\".\"social_media_rollup_integration_tests_facebook_pages\".\"facebook_pages__pages_report\"\n    group by page_id, date_day, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.facebook_pages__pages_report"}, "test.twitter_organic_source.not_null_stg_twitter_organic__account_history_account_id.a77a3afb85": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_id", "model": "{{ get_where_subquery(ref('stg_twitter_organic__account_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_organic_source.stg_twitter_organic__account_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "social_media_rollup_integration_tests_dbt_test__audit", "fqn": ["twitter_organic_source", "not_null_stg_twitter_organic__account_history_account_id"], "unique_id": "test.twitter_organic_source.not_null_stg_twitter_organic__account_history_account_id.a77a3afb85", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "twitter_organic_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/twitter_organic_source", "path": "not_null_stg_twitter_organic__account_history_account_id.sql", "original_file_path": "models/stg_twitter_organic.yml", "name": "not_null_stg_twitter_organic__account_history_account_id", "alias": "not_null_stg_twitter_organic__account_history_account_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_twitter_organic__account_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/twitter_organic_source/models/stg_twitter_organic.yml/not_null_stg_twitter_organic__account_history_account_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1671477151.9909918, "compiled_code": "\n    \n    \n\n\n\nselect account_id\nfrom \"postgres\".\"social_media_rollup_integration_tests_stg_twitter_organic\".\"stg_twitter_organic__account_history\"\nwhere account_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_id", "file_key_name": "models.stg_twitter_organic__account_history"}, "test.twitter_organic_source.dbt_utils_unique_combination_of_columns_stg_twitter_organic__account_history_account_id__updated_timestamp__source_relation.41e71af7e1": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["account_id", "updated_timestamp", "source_relation"], "model": "{{ get_where_subquery(ref('stg_twitter_organic__account_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_organic_source.stg_twitter_organic__account_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_2ecfda9a0582d5a168d334fa8c80b37d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "social_media_rollup_integration_tests_dbt_test__audit", "fqn": ["twitter_organic_source", "dbt_utils_unique_combination_of_columns_stg_twitter_organic__account_history_account_id__updated_timestamp__source_relation"], "unique_id": "test.twitter_organic_source.dbt_utils_unique_combination_of_columns_stg_twitter_organic__account_history_account_id__updated_timestamp__source_relation.41e71af7e1", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_2ecfda9a0582d5a168d334fa8c80b37d\") }}", "language": "sql", "package_name": "twitter_organic_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/twitter_organic_source", "path": "dbt_utils_unique_combination_o_2ecfda9a0582d5a168d334fa8c80b37d.sql", "original_file_path": "models/stg_twitter_organic.yml", "name": "dbt_utils_unique_combination_of_columns_stg_twitter_organic__account_history_account_id__updated_timestamp__source_relation", "alias": "dbt_utils_unique_combination_o_2ecfda9a0582d5a168d334fa8c80b37d", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_twitter_organic__account_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/twitter_organic_source/models/stg_twitter_organic.yml/dbt_utils_unique_combination_o_2ecfda9a0582d5a168d334fa8c80b37d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_2ecfda9a0582d5a168d334fa8c80b37d"}, "created_at": 1671477151.992123, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_id, updated_timestamp, source_relation\n    from \"postgres\".\"social_media_rollup_integration_tests_stg_twitter_organic\".\"stg_twitter_organic__account_history\"\n    group by account_id, updated_timestamp, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_twitter_organic__account_history"}, "test.twitter_organic_source.not_null_stg_twitter_organic__organic_tweet_report_account_id.2e0dfb4d1a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_id", "model": "{{ get_where_subquery(ref('stg_twitter_organic__organic_tweet_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_organic_source.stg_twitter_organic__organic_tweet_report"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "social_media_rollup_integration_tests_dbt_test__audit", "fqn": ["twitter_organic_source", "not_null_stg_twitter_organic__organic_tweet_report_account_id"], "unique_id": "test.twitter_organic_source.not_null_stg_twitter_organic__organic_tweet_report_account_id.2e0dfb4d1a", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "twitter_organic_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/twitter_organic_source", "path": "not_null_stg_twitter_organic__organic_tweet_report_account_id.sql", "original_file_path": "models/stg_twitter_organic.yml", "name": "not_null_stg_twitter_organic__organic_tweet_report_account_id", "alias": "not_null_stg_twitter_organic__organic_tweet_report_account_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_twitter_organic__organic_tweet_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/twitter_organic_source/models/stg_twitter_organic.yml/not_null_stg_twitter_organic__organic_tweet_report_account_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1671477151.9949, "compiled_code": "\n    \n    \n\n\n\nselect account_id\nfrom \"postgres\".\"social_media_rollup_integration_tests_stg_twitter_organic\".\"stg_twitter_organic__organic_tweet_report\"\nwhere account_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_id", "file_key_name": "models.stg_twitter_organic__organic_tweet_report"}, "test.twitter_organic_source.not_null_stg_twitter_organic__organic_tweet_report_organic_tweet_id.300639fcfb": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "organic_tweet_id", "model": "{{ get_where_subquery(ref('stg_twitter_organic__organic_tweet_report')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_organic_source.stg_twitter_organic__organic_tweet_report"]}, "config": {"enabled": true, "alias": "not_null_stg_twitter_organic___53e278bdd8385aad8ec0fbc205e4dde8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "social_media_rollup_integration_tests_dbt_test__audit", "fqn": ["twitter_organic_source", "not_null_stg_twitter_organic__organic_tweet_report_organic_tweet_id"], "unique_id": "test.twitter_organic_source.not_null_stg_twitter_organic__organic_tweet_report_organic_tweet_id.300639fcfb", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_twitter_organic___53e278bdd8385aad8ec0fbc205e4dde8\") }}", "language": "sql", "package_name": "twitter_organic_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/twitter_organic_source", "path": "not_null_stg_twitter_organic___53e278bdd8385aad8ec0fbc205e4dde8.sql", "original_file_path": "models/stg_twitter_organic.yml", "name": "not_null_stg_twitter_organic__organic_tweet_report_organic_tweet_id", "alias": "not_null_stg_twitter_organic___53e278bdd8385aad8ec0fbc205e4dde8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_twitter_organic__organic_tweet_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/twitter_organic_source/models/stg_twitter_organic.yml/not_null_stg_twitter_organic___53e278bdd8385aad8ec0fbc205e4dde8.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_stg_twitter_organic___53e278bdd8385aad8ec0fbc205e4dde8"}, "created_at": 1671477151.995866, "compiled_code": "\n    \n    \n\n\n\nselect organic_tweet_id\nfrom \"postgres\".\"social_media_rollup_integration_tests_stg_twitter_organic\".\"stg_twitter_organic__organic_tweet_report\"\nwhere organic_tweet_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "organic_tweet_id", "file_key_name": "models.stg_twitter_organic__organic_tweet_report"}, "test.twitter_organic_source.dbt_utils_unique_combination_of_columns_stg_twitter_organic__organic_tweet_report_account_id__organic_tweet_id__date_day__source_relation.4a121854e5": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["account_id", "organic_tweet_id", "date_day", "source_relation"], "model": "{{ get_where_subquery(ref('stg_twitter_organic__organic_tweet_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_organic_source.stg_twitter_organic__organic_tweet_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_43748e19e86b6d2a3632aa555fd72151", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "social_media_rollup_integration_tests_dbt_test__audit", "fqn": ["twitter_organic_source", "dbt_utils_unique_combination_of_columns_stg_twitter_organic__organic_tweet_report_account_id__organic_tweet_id__date_day__source_relation"], "unique_id": "test.twitter_organic_source.dbt_utils_unique_combination_of_columns_stg_twitter_organic__organic_tweet_report_account_id__organic_tweet_id__date_day__source_relation.4a121854e5", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_43748e19e86b6d2a3632aa555fd72151\") }}", "language": "sql", "package_name": "twitter_organic_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/twitter_organic_source", "path": "dbt_utils_unique_combination_o_43748e19e86b6d2a3632aa555fd72151.sql", "original_file_path": "models/stg_twitter_organic.yml", "name": "dbt_utils_unique_combination_of_columns_stg_twitter_organic__organic_tweet_report_account_id__organic_tweet_id__date_day__source_relation", "alias": "dbt_utils_unique_combination_o_43748e19e86b6d2a3632aa555fd72151", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_twitter_organic__organic_tweet_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/twitter_organic_source/models/stg_twitter_organic.yml/dbt_utils_unique_combination_o_43748e19e86b6d2a3632aa555fd72151.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_43748e19e86b6d2a3632aa555fd72151"}, "created_at": 1671477151.9968379, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_id, organic_tweet_id, date_day, source_relation\n    from \"postgres\".\"social_media_rollup_integration_tests_stg_twitter_organic\".\"stg_twitter_organic__organic_tweet_report\"\n    group by account_id, organic_tweet_id, date_day, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_twitter_organic__organic_tweet_report"}, "test.twitter_organic_source.not_null_stg_twitter_organic__tweet_account_id.babfc0e1e9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_id", "model": "{{ get_where_subquery(ref('stg_twitter_organic__tweet')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_organic_source.stg_twitter_organic__tweet"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "social_media_rollup_integration_tests_dbt_test__audit", "fqn": ["twitter_organic_source", "not_null_stg_twitter_organic__tweet_account_id"], "unique_id": "test.twitter_organic_source.not_null_stg_twitter_organic__tweet_account_id.babfc0e1e9", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "twitter_organic_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/twitter_organic_source", "path": "not_null_stg_twitter_organic__tweet_account_id.sql", "original_file_path": "models/stg_twitter_organic.yml", "name": "not_null_stg_twitter_organic__tweet_account_id", "alias": "not_null_stg_twitter_organic__tweet_account_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_twitter_organic__tweet"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/twitter_organic_source/models/stg_twitter_organic.yml/not_null_stg_twitter_organic__tweet_account_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1671477151.999716, "compiled_code": "\n    \n    \n\n\n\nselect account_id\nfrom \"postgres\".\"social_media_rollup_integration_tests_stg_twitter_organic\".\"stg_twitter_organic__tweet\"\nwhere account_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_id", "file_key_name": "models.stg_twitter_organic__tweet"}, "test.twitter_organic_source.not_null_stg_twitter_organic__tweet_organic_tweet_id.1d21df5ac1": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "organic_tweet_id", "model": "{{ get_where_subquery(ref('stg_twitter_organic__tweet')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_organic_source.stg_twitter_organic__tweet"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "social_media_rollup_integration_tests_dbt_test__audit", "fqn": ["twitter_organic_source", "not_null_stg_twitter_organic__tweet_organic_tweet_id"], "unique_id": "test.twitter_organic_source.not_null_stg_twitter_organic__tweet_organic_tweet_id.1d21df5ac1", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "twitter_organic_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/twitter_organic_source", "path": "not_null_stg_twitter_organic__tweet_organic_tweet_id.sql", "original_file_path": "models/stg_twitter_organic.yml", "name": "not_null_stg_twitter_organic__tweet_organic_tweet_id", "alias": "not_null_stg_twitter_organic__tweet_organic_tweet_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_twitter_organic__tweet"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/twitter_organic_source/models/stg_twitter_organic.yml/not_null_stg_twitter_organic__tweet_organic_tweet_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1671477152.000672, "compiled_code": "\n    \n    \n\n\n\nselect organic_tweet_id\nfrom \"postgres\".\"social_media_rollup_integration_tests_stg_twitter_organic\".\"stg_twitter_organic__tweet\"\nwhere organic_tweet_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "organic_tweet_id", "file_key_name": "models.stg_twitter_organic__tweet"}, "test.twitter_organic_source.dbt_utils_unique_combination_of_columns_stg_twitter_organic__tweet_organic_tweet_id__source_relation.9c43fbcfa6": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["organic_tweet_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_twitter_organic__tweet')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_organic_source.stg_twitter_organic__tweet"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_5e1d3db72bf010e419b1bc6f330c7ede", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "social_media_rollup_integration_tests_dbt_test__audit", "fqn": ["twitter_organic_source", "dbt_utils_unique_combination_of_columns_stg_twitter_organic__tweet_organic_tweet_id__source_relation"], "unique_id": "test.twitter_organic_source.dbt_utils_unique_combination_of_columns_stg_twitter_organic__tweet_organic_tweet_id__source_relation.9c43fbcfa6", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_5e1d3db72bf010e419b1bc6f330c7ede\") }}", "language": "sql", "package_name": "twitter_organic_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/twitter_organic_source", "path": "dbt_utils_unique_combination_o_5e1d3db72bf010e419b1bc6f330c7ede.sql", "original_file_path": "models/stg_twitter_organic.yml", "name": "dbt_utils_unique_combination_of_columns_stg_twitter_organic__tweet_organic_tweet_id__source_relation", "alias": "dbt_utils_unique_combination_o_5e1d3db72bf010e419b1bc6f330c7ede", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_twitter_organic__tweet"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/twitter_organic_source/models/stg_twitter_organic.yml/dbt_utils_unique_combination_o_5e1d3db72bf010e419b1bc6f330c7ede.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_5e1d3db72bf010e419b1bc6f330c7ede"}, "created_at": 1671477152.001774, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        organic_tweet_id, source_relation\n    from \"postgres\".\"social_media_rollup_integration_tests_stg_twitter_organic\".\"stg_twitter_organic__tweet\"\n    group by organic_tweet_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_twitter_organic__tweet"}, "test.twitter_organic_source.not_null_stg_twitter_organic__twitter_user_history_user_id.5d6e14a6ce": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_id", "model": "{{ get_where_subquery(ref('stg_twitter_organic__twitter_user_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_organic_source.stg_twitter_organic__twitter_user_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "social_media_rollup_integration_tests_dbt_test__audit", "fqn": ["twitter_organic_source", "not_null_stg_twitter_organic__twitter_user_history_user_id"], "unique_id": "test.twitter_organic_source.not_null_stg_twitter_organic__twitter_user_history_user_id.5d6e14a6ce", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "twitter_organic_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/twitter_organic_source", "path": "not_null_stg_twitter_organic__twitter_user_history_user_id.sql", "original_file_path": "models/stg_twitter_organic.yml", "name": "not_null_stg_twitter_organic__twitter_user_history_user_id", "alias": "not_null_stg_twitter_organic__twitter_user_history_user_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_twitter_organic__twitter_user_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/twitter_organic_source/models/stg_twitter_organic.yml/not_null_stg_twitter_organic__twitter_user_history_user_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1671477152.0046, "compiled_code": "\n    \n    \n\n\n\nselect user_id\nfrom \"postgres\".\"social_media_rollup_integration_tests_stg_twitter_organic\".\"stg_twitter_organic__twitter_user_history\"\nwhere user_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "user_id", "file_key_name": "models.stg_twitter_organic__twitter_user_history"}, "test.twitter_organic_source.dbt_utils_unique_combination_of_columns_stg_twitter_organic__twitter_user_history_user_id__source_relation.577d45a09a": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["user_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_twitter_organic__twitter_user_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_organic_source.stg_twitter_organic__twitter_user_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_77d7a78d31ac13d6cd8d7e9e764803bb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "social_media_rollup_integration_tests_dbt_test__audit", "fqn": ["twitter_organic_source", "dbt_utils_unique_combination_of_columns_stg_twitter_organic__twitter_user_history_user_id__source_relation"], "unique_id": "test.twitter_organic_source.dbt_utils_unique_combination_of_columns_stg_twitter_organic__twitter_user_history_user_id__source_relation.577d45a09a", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_77d7a78d31ac13d6cd8d7e9e764803bb\") }}", "language": "sql", "package_name": "twitter_organic_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/twitter_organic_source", "path": "dbt_utils_unique_combination_o_77d7a78d31ac13d6cd8d7e9e764803bb.sql", "original_file_path": "models/stg_twitter_organic.yml", "name": "dbt_utils_unique_combination_of_columns_stg_twitter_organic__twitter_user_history_user_id__source_relation", "alias": "dbt_utils_unique_combination_o_77d7a78d31ac13d6cd8d7e9e764803bb", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_twitter_organic__twitter_user_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/twitter_organic_source/models/stg_twitter_organic.yml/dbt_utils_unique_combination_o_77d7a78d31ac13d6cd8d7e9e764803bb.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_77d7a78d31ac13d6cd8d7e9e764803bb"}, "created_at": 1671477152.0055869, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        user_id, source_relation\n    from \"postgres\".\"social_media_rollup_integration_tests_stg_twitter_organic\".\"stg_twitter_organic__twitter_user_history\"\n    group by user_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_twitter_organic__twitter_user_history"}, "test.facebook_pages_source.not_null_stg_facebook_pages__daily_page_metrics_total_date_day.880eb929d5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('stg_facebook_pages__daily_page_metrics_total')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.facebook_pages_source.stg_facebook_pages__daily_page_metrics_total"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "social_media_rollup_integration_tests_dbt_test__audit", "fqn": ["facebook_pages_source", "not_null_stg_facebook_pages__daily_page_metrics_total_date_day"], "unique_id": "test.facebook_pages_source.not_null_stg_facebook_pages__daily_page_metrics_total_date_day.880eb929d5", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "facebook_pages_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/facebook_pages_source", "path": "not_null_stg_facebook_pages__daily_page_metrics_total_date_day.sql", "original_file_path": "models/stg_facebook_pages.yml", "name": "not_null_stg_facebook_pages__daily_page_metrics_total_date_day", "alias": "not_null_stg_facebook_pages__daily_page_metrics_total_date_day", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_facebook_pages__daily_page_metrics_total"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/facebook_pages_source/models/stg_facebook_pages.yml/not_null_stg_facebook_pages__daily_page_metrics_total_date_day.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1671477152.0566258, "compiled_code": "\n    \n    \n\n\n\nselect date_day\nfrom \"postgres\".\"social_media_rollup_integration_tests_stg_facebook_pages\".\"stg_facebook_pages__daily_page_metrics_total\"\nwhere date_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_day", "file_key_name": "models.stg_facebook_pages__daily_page_metrics_total"}, "test.facebook_pages_source.not_null_stg_facebook_pages__daily_page_metrics_total_page_id.937414eaf3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "page_id", "model": "{{ get_where_subquery(ref('stg_facebook_pages__daily_page_metrics_total')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.facebook_pages_source.stg_facebook_pages__daily_page_metrics_total"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "social_media_rollup_integration_tests_dbt_test__audit", "fqn": ["facebook_pages_source", "not_null_stg_facebook_pages__daily_page_metrics_total_page_id"], "unique_id": "test.facebook_pages_source.not_null_stg_facebook_pages__daily_page_metrics_total_page_id.937414eaf3", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "facebook_pages_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/facebook_pages_source", "path": "not_null_stg_facebook_pages__daily_page_metrics_total_page_id.sql", "original_file_path": "models/stg_facebook_pages.yml", "name": "not_null_stg_facebook_pages__daily_page_metrics_total_page_id", "alias": "not_null_stg_facebook_pages__daily_page_metrics_total_page_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_facebook_pages__daily_page_metrics_total"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/facebook_pages_source/models/stg_facebook_pages.yml/not_null_stg_facebook_pages__daily_page_metrics_total_page_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1671477152.057667, "compiled_code": "\n    \n    \n\n\n\nselect page_id\nfrom \"postgres\".\"social_media_rollup_integration_tests_stg_facebook_pages\".\"stg_facebook_pages__daily_page_metrics_total\"\nwhere page_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "page_id", "file_key_name": "models.stg_facebook_pages__daily_page_metrics_total"}, "test.facebook_pages_source.dbt_utils_unique_combination_of_columns_stg_facebook_pages__daily_page_metrics_total_page_id__date_day__source_relation.b90aa3f043": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["page_id", "date_day", "source_relation"], "model": "{{ get_where_subquery(ref('stg_facebook_pages__daily_page_metrics_total')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.facebook_pages_source.stg_facebook_pages__daily_page_metrics_total"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_51c97ad496aa82cdf87bec8c925a74da", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "social_media_rollup_integration_tests_dbt_test__audit", "fqn": ["facebook_pages_source", "dbt_utils_unique_combination_of_columns_stg_facebook_pages__daily_page_metrics_total_page_id__date_day__source_relation"], "unique_id": "test.facebook_pages_source.dbt_utils_unique_combination_of_columns_stg_facebook_pages__daily_page_metrics_total_page_id__date_day__source_relation.b90aa3f043", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_51c97ad496aa82cdf87bec8c925a74da\") }}", "language": "sql", "package_name": "facebook_pages_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/facebook_pages_source", "path": "dbt_utils_unique_combination_o_51c97ad496aa82cdf87bec8c925a74da.sql", "original_file_path": "models/stg_facebook_pages.yml", "name": "dbt_utils_unique_combination_of_columns_stg_facebook_pages__daily_page_metrics_total_page_id__date_day__source_relation", "alias": "dbt_utils_unique_combination_o_51c97ad496aa82cdf87bec8c925a74da", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_facebook_pages__daily_page_metrics_total"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/facebook_pages_source/models/stg_facebook_pages.yml/dbt_utils_unique_combination_o_51c97ad496aa82cdf87bec8c925a74da.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_51c97ad496aa82cdf87bec8c925a74da"}, "created_at": 1671477152.058654, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        page_id, date_day, source_relation\n    from \"postgres\".\"social_media_rollup_integration_tests_stg_facebook_pages\".\"stg_facebook_pages__daily_page_metrics_total\"\n    group by page_id, date_day, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_facebook_pages__daily_page_metrics_total"}, "test.facebook_pages_source.not_null_stg_facebook_pages__lifetime_post_metrics_total_date_day.de0419d721": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('stg_facebook_pages__lifetime_post_metrics_total')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.facebook_pages_source.stg_facebook_pages__lifetime_post_metrics_total"]}, "config": {"enabled": true, "alias": "not_null_stg_facebook_pages__l_f66965a41853b03f8146ed2521f0efe8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "social_media_rollup_integration_tests_dbt_test__audit", "fqn": ["facebook_pages_source", "not_null_stg_facebook_pages__lifetime_post_metrics_total_date_day"], "unique_id": "test.facebook_pages_source.not_null_stg_facebook_pages__lifetime_post_metrics_total_date_day.de0419d721", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_facebook_pages__l_f66965a41853b03f8146ed2521f0efe8\") }}", "language": "sql", "package_name": "facebook_pages_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/facebook_pages_source", "path": "not_null_stg_facebook_pages__l_f66965a41853b03f8146ed2521f0efe8.sql", "original_file_path": "models/stg_facebook_pages.yml", "name": "not_null_stg_facebook_pages__lifetime_post_metrics_total_date_day", "alias": "not_null_stg_facebook_pages__l_f66965a41853b03f8146ed2521f0efe8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_facebook_pages__lifetime_post_metrics_total"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/facebook_pages_source/models/stg_facebook_pages.yml/not_null_stg_facebook_pages__l_f66965a41853b03f8146ed2521f0efe8.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_stg_facebook_pages__l_f66965a41853b03f8146ed2521f0efe8"}, "created_at": 1671477152.061493, "compiled_code": "\n    \n    \n\n\n\nselect date_day\nfrom \"postgres\".\"social_media_rollup_integration_tests_stg_facebook_pages\".\"stg_facebook_pages__lifetime_post_metrics_total\"\nwhere date_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_day", "file_key_name": "models.stg_facebook_pages__lifetime_post_metrics_total"}, "test.facebook_pages_source.not_null_stg_facebook_pages__lifetime_post_metrics_total_post_id.66563712ec": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "post_id", "model": "{{ get_where_subquery(ref('stg_facebook_pages__lifetime_post_metrics_total')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.facebook_pages_source.stg_facebook_pages__lifetime_post_metrics_total"]}, "config": {"enabled": true, "alias": "not_null_stg_facebook_pages__l_c9395a5b8d1c0ea52c68bb7e8de2059c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "social_media_rollup_integration_tests_dbt_test__audit", "fqn": ["facebook_pages_source", "not_null_stg_facebook_pages__lifetime_post_metrics_total_post_id"], "unique_id": "test.facebook_pages_source.not_null_stg_facebook_pages__lifetime_post_metrics_total_post_id.66563712ec", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_facebook_pages__l_c9395a5b8d1c0ea52c68bb7e8de2059c\") }}", "language": "sql", "package_name": "facebook_pages_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/facebook_pages_source", "path": "not_null_stg_facebook_pages__l_c9395a5b8d1c0ea52c68bb7e8de2059c.sql", "original_file_path": "models/stg_facebook_pages.yml", "name": "not_null_stg_facebook_pages__lifetime_post_metrics_total_post_id", "alias": "not_null_stg_facebook_pages__l_c9395a5b8d1c0ea52c68bb7e8de2059c", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_facebook_pages__lifetime_post_metrics_total"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/facebook_pages_source/models/stg_facebook_pages.yml/not_null_stg_facebook_pages__l_c9395a5b8d1c0ea52c68bb7e8de2059c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_stg_facebook_pages__l_c9395a5b8d1c0ea52c68bb7e8de2059c"}, "created_at": 1671477152.062468, "compiled_code": "\n    \n    \n\n\n\nselect post_id\nfrom \"postgres\".\"social_media_rollup_integration_tests_stg_facebook_pages\".\"stg_facebook_pages__lifetime_post_metrics_total\"\nwhere post_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "post_id", "file_key_name": "models.stg_facebook_pages__lifetime_post_metrics_total"}, "test.facebook_pages_source.dbt_utils_unique_combination_of_columns_stg_facebook_pages__lifetime_post_metrics_total_post_id__date_day__source_relation.c12787b228": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["post_id", "date_day", "source_relation"], "model": "{{ get_where_subquery(ref('stg_facebook_pages__lifetime_post_metrics_total')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.facebook_pages_source.stg_facebook_pages__lifetime_post_metrics_total"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_e4560bbecc4e9121b80aecff52911d98", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "social_media_rollup_integration_tests_dbt_test__audit", "fqn": ["facebook_pages_source", "dbt_utils_unique_combination_of_columns_stg_facebook_pages__lifetime_post_metrics_total_post_id__date_day__source_relation"], "unique_id": "test.facebook_pages_source.dbt_utils_unique_combination_of_columns_stg_facebook_pages__lifetime_post_metrics_total_post_id__date_day__source_relation.c12787b228", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_e4560bbecc4e9121b80aecff52911d98\") }}", "language": "sql", "package_name": "facebook_pages_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/facebook_pages_source", "path": "dbt_utils_unique_combination_o_e4560bbecc4e9121b80aecff52911d98.sql", "original_file_path": "models/stg_facebook_pages.yml", "name": "dbt_utils_unique_combination_of_columns_stg_facebook_pages__lifetime_post_metrics_total_post_id__date_day__source_relation", "alias": "dbt_utils_unique_combination_o_e4560bbecc4e9121b80aecff52911d98", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_facebook_pages__lifetime_post_metrics_total"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/facebook_pages_source/models/stg_facebook_pages.yml/dbt_utils_unique_combination_o_e4560bbecc4e9121b80aecff52911d98.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_e4560bbecc4e9121b80aecff52911d98"}, "created_at": 1671477152.063586, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        post_id, date_day, source_relation\n    from \"postgres\".\"social_media_rollup_integration_tests_stg_facebook_pages\".\"stg_facebook_pages__lifetime_post_metrics_total\"\n    group by post_id, date_day, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_facebook_pages__lifetime_post_metrics_total"}, "test.facebook_pages_source.not_null_stg_facebook_pages__page_page_id.3839292889": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "page_id", "model": "{{ get_where_subquery(ref('stg_facebook_pages__page')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.facebook_pages_source.stg_facebook_pages__page"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "social_media_rollup_integration_tests_dbt_test__audit", "fqn": ["facebook_pages_source", "not_null_stg_facebook_pages__page_page_id"], "unique_id": "test.facebook_pages_source.not_null_stg_facebook_pages__page_page_id.3839292889", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "facebook_pages_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/facebook_pages_source", "path": "not_null_stg_facebook_pages__page_page_id.sql", "original_file_path": "models/stg_facebook_pages.yml", "name": "not_null_stg_facebook_pages__page_page_id", "alias": "not_null_stg_facebook_pages__page_page_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_facebook_pages__page"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/facebook_pages_source/models/stg_facebook_pages.yml/not_null_stg_facebook_pages__page_page_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1671477152.066345, "compiled_code": "\n    \n    \n\n\n\nselect page_id\nfrom \"postgres\".\"social_media_rollup_integration_tests_stg_facebook_pages\".\"stg_facebook_pages__page\"\nwhere page_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "page_id", "file_key_name": "models.stg_facebook_pages__page"}, "test.facebook_pages_source.dbt_utils_unique_combination_of_columns_stg_facebook_pages__page_page_id__source_relation.32a7459a05": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["page_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_facebook_pages__page')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.facebook_pages_source.stg_facebook_pages__page"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_fbac8ea4cfa1fd38b2e2183be7999e6c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "social_media_rollup_integration_tests_dbt_test__audit", "fqn": ["facebook_pages_source", "dbt_utils_unique_combination_of_columns_stg_facebook_pages__page_page_id__source_relation"], "unique_id": "test.facebook_pages_source.dbt_utils_unique_combination_of_columns_stg_facebook_pages__page_page_id__source_relation.32a7459a05", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_fbac8ea4cfa1fd38b2e2183be7999e6c\") }}", "language": "sql", "package_name": "facebook_pages_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/facebook_pages_source", "path": "dbt_utils_unique_combination_o_fbac8ea4cfa1fd38b2e2183be7999e6c.sql", "original_file_path": "models/stg_facebook_pages.yml", "name": "dbt_utils_unique_combination_of_columns_stg_facebook_pages__page_page_id__source_relation", "alias": "dbt_utils_unique_combination_o_fbac8ea4cfa1fd38b2e2183be7999e6c", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_facebook_pages__page"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/facebook_pages_source/models/stg_facebook_pages.yml/dbt_utils_unique_combination_o_fbac8ea4cfa1fd38b2e2183be7999e6c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_fbac8ea4cfa1fd38b2e2183be7999e6c"}, "created_at": 1671477152.067324, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        page_id, source_relation\n    from \"postgres\".\"social_media_rollup_integration_tests_stg_facebook_pages\".\"stg_facebook_pages__page\"\n    group by page_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_facebook_pages__page"}, "test.facebook_pages_source.not_null_stg_facebook_pages__post_history_post_id.fd3293856c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "post_id", "model": "{{ get_where_subquery(ref('stg_facebook_pages__post_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.facebook_pages_source.stg_facebook_pages__post_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "social_media_rollup_integration_tests_dbt_test__audit", "fqn": ["facebook_pages_source", "not_null_stg_facebook_pages__post_history_post_id"], "unique_id": "test.facebook_pages_source.not_null_stg_facebook_pages__post_history_post_id.fd3293856c", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "facebook_pages_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/facebook_pages_source", "path": "not_null_stg_facebook_pages__post_history_post_id.sql", "original_file_path": "models/stg_facebook_pages.yml", "name": "not_null_stg_facebook_pages__post_history_post_id", "alias": "not_null_stg_facebook_pages__post_history_post_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_facebook_pages__post_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/facebook_pages_source/models/stg_facebook_pages.yml/not_null_stg_facebook_pages__post_history_post_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1671477152.069961, "compiled_code": "\n    \n    \n\n\n\nselect post_id\nfrom \"postgres\".\"social_media_rollup_integration_tests_stg_facebook_pages\".\"stg_facebook_pages__post_history\"\nwhere post_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "post_id", "file_key_name": "models.stg_facebook_pages__post_history"}, "test.facebook_pages_source.dbt_utils_unique_combination_of_columns_stg_facebook_pages__post_history_post_id__updated_timestamp__source_relation.67de991272": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["post_id", "updated_timestamp", "source_relation"], "model": "{{ get_where_subquery(ref('stg_facebook_pages__post_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.facebook_pages_source.stg_facebook_pages__post_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_3fb6f44971667fc5152a11813882ca09", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "social_media_rollup_integration_tests_dbt_test__audit", "fqn": ["facebook_pages_source", "dbt_utils_unique_combination_of_columns_stg_facebook_pages__post_history_post_id__updated_timestamp__source_relation"], "unique_id": "test.facebook_pages_source.dbt_utils_unique_combination_of_columns_stg_facebook_pages__post_history_post_id__updated_timestamp__source_relation.67de991272", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_3fb6f44971667fc5152a11813882ca09\") }}", "language": "sql", "package_name": "facebook_pages_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/facebook_pages_source", "path": "dbt_utils_unique_combination_o_3fb6f44971667fc5152a11813882ca09.sql", "original_file_path": "models/stg_facebook_pages.yml", "name": "dbt_utils_unique_combination_of_columns_stg_facebook_pages__post_history_post_id__updated_timestamp__source_relation", "alias": "dbt_utils_unique_combination_o_3fb6f44971667fc5152a11813882ca09", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_facebook_pages__post_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/facebook_pages_source/models/stg_facebook_pages.yml/dbt_utils_unique_combination_o_3fb6f44971667fc5152a11813882ca09.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_3fb6f44971667fc5152a11813882ca09"}, "created_at": 1671477152.070945, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        post_id, updated_timestamp, source_relation\n    from \"postgres\".\"social_media_rollup_integration_tests_stg_facebook_pages\".\"stg_facebook_pages__post_history\"\n    group by post_id, updated_timestamp, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_facebook_pages__post_history"}, "test.linkedin_pages.dbt_utils_unique_combination_of_columns_linkedin_pages__posts_ugc_post_id__source_relation.d7c3d11ad1": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ugc_post_id", "source_relation"], "model": "{{ get_where_subquery(ref('linkedin_pages__posts')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin_pages.linkedin_pages__posts"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_321ceac5241ebed20b1e3af34d1381f6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "social_media_rollup_integration_tests_dbt_test__audit", "fqn": ["linkedin_pages", "dbt_utils_unique_combination_of_columns_linkedin_pages__posts_ugc_post_id__source_relation"], "unique_id": "test.linkedin_pages.dbt_utils_unique_combination_of_columns_linkedin_pages__posts_ugc_post_id__source_relation.d7c3d11ad1", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_321ceac5241ebed20b1e3af34d1381f6\") }}", "language": "sql", "package_name": "linkedin_pages", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/linkedin_pages", "path": "dbt_utils_unique_combination_o_321ceac5241ebed20b1e3af34d1381f6.sql", "original_file_path": "models/linkedin_pages.yml", "name": "dbt_utils_unique_combination_of_columns_linkedin_pages__posts_ugc_post_id__source_relation", "alias": "dbt_utils_unique_combination_o_321ceac5241ebed20b1e3af34d1381f6", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["linkedin_pages__posts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/linkedin_pages/models/linkedin_pages.yml/dbt_utils_unique_combination_o_321ceac5241ebed20b1e3af34d1381f6.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_321ceac5241ebed20b1e3af34d1381f6"}, "created_at": 1671477152.1100879, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ugc_post_id, source_relation\n    from \"postgres\".\"social_media_rollup_integration_tests_linkedin_pages\".\"linkedin_pages__posts\"\n    group by ugc_post_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.linkedin_pages__posts"}, "test.instagram_business_source.not_null_stg_instagram_business__media_history__fivetran_id.cfe4889ca2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "_fivetran_id", "model": "{{ get_where_subquery(ref('stg_instagram_business__media_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.instagram_business_source.stg_instagram_business__media_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "social_media_rollup_integration_tests_dbt_test__audit", "fqn": ["instagram_business_source", "not_null_stg_instagram_business__media_history__fivetran_id"], "unique_id": "test.instagram_business_source.not_null_stg_instagram_business__media_history__fivetran_id.cfe4889ca2", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "instagram_business_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/instagram_business_source", "path": "not_null_stg_instagram_business__media_history__fivetran_id.sql", "original_file_path": "models/stg_instagram_business.yml", "name": "not_null_stg_instagram_business__media_history__fivetran_id", "alias": "not_null_stg_instagram_business__media_history__fivetran_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_instagram_business__media_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/instagram_business_source/models/stg_instagram_business.yml/not_null_stg_instagram_business__media_history__fivetran_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1671477152.1232052, "compiled_code": "\n    \n    \n\n\n\nselect _fivetran_id\nfrom \"postgres\".\"social_media_rollup_integration_tests_stg_instagram_business\".\"stg_instagram_business__media_history\"\nwhere _fivetran_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_fivetran_id", "file_key_name": "models.stg_instagram_business__media_history"}, "test.instagram_business_source.not_null_stg_instagram_business__media_history_post_id.878653b6a5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "post_id", "model": "{{ get_where_subquery(ref('stg_instagram_business__media_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.instagram_business_source.stg_instagram_business__media_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "social_media_rollup_integration_tests_dbt_test__audit", "fqn": ["instagram_business_source", "not_null_stg_instagram_business__media_history_post_id"], "unique_id": "test.instagram_business_source.not_null_stg_instagram_business__media_history_post_id.878653b6a5", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "instagram_business_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/instagram_business_source", "path": "not_null_stg_instagram_business__media_history_post_id.sql", "original_file_path": "models/stg_instagram_business.yml", "name": "not_null_stg_instagram_business__media_history_post_id", "alias": "not_null_stg_instagram_business__media_history_post_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_instagram_business__media_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/instagram_business_source/models/stg_instagram_business.yml/not_null_stg_instagram_business__media_history_post_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1671477152.12431, "compiled_code": "\n    \n    \n\n\n\nselect post_id\nfrom \"postgres\".\"social_media_rollup_integration_tests_stg_instagram_business\".\"stg_instagram_business__media_history\"\nwhere post_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "post_id", "file_key_name": "models.stg_instagram_business__media_history"}, "test.instagram_business_source.dbt_utils_unique_combination_of_columns_stg_instagram_business__media_history__fivetran_id__post_id__source_relation.57e3622790": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["_fivetran_id", "post_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_instagram_business__media_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.instagram_business_source.stg_instagram_business__media_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_d2e07a0267220c178c91eb74d3854b57", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "social_media_rollup_integration_tests_dbt_test__audit", "fqn": ["instagram_business_source", "dbt_utils_unique_combination_of_columns_stg_instagram_business__media_history__fivetran_id__post_id__source_relation"], "unique_id": "test.instagram_business_source.dbt_utils_unique_combination_of_columns_stg_instagram_business__media_history__fivetran_id__post_id__source_relation.57e3622790", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_d2e07a0267220c178c91eb74d3854b57\") }}", "language": "sql", "package_name": "instagram_business_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/instagram_business_source", "path": "dbt_utils_unique_combination_o_d2e07a0267220c178c91eb74d3854b57.sql", "original_file_path": "models/stg_instagram_business.yml", "name": "dbt_utils_unique_combination_of_columns_stg_instagram_business__media_history__fivetran_id__post_id__source_relation", "alias": "dbt_utils_unique_combination_o_d2e07a0267220c178c91eb74d3854b57", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_instagram_business__media_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/instagram_business_source/models/stg_instagram_business.yml/dbt_utils_unique_combination_o_d2e07a0267220c178c91eb74d3854b57.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_d2e07a0267220c178c91eb74d3854b57"}, "created_at": 1671477152.125283, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        _fivetran_id, post_id, source_relation\n    from \"postgres\".\"social_media_rollup_integration_tests_stg_instagram_business\".\"stg_instagram_business__media_history\"\n    group by _fivetran_id, post_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_instagram_business__media_history"}, "test.instagram_business_source.not_null_stg_instagram_business__media_insights__fivetran_id.5cc95a9508": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "_fivetran_id", "model": "{{ get_where_subquery(ref('stg_instagram_business__media_insights')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.instagram_business_source.stg_instagram_business__media_insights"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "social_media_rollup_integration_tests_dbt_test__audit", "fqn": ["instagram_business_source", "not_null_stg_instagram_business__media_insights__fivetran_id"], "unique_id": "test.instagram_business_source.not_null_stg_instagram_business__media_insights__fivetran_id.5cc95a9508", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "instagram_business_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/instagram_business_source", "path": "not_null_stg_instagram_business__media_insights__fivetran_id.sql", "original_file_path": "models/stg_instagram_business.yml", "name": "not_null_stg_instagram_business__media_insights__fivetran_id", "alias": "not_null_stg_instagram_business__media_insights__fivetran_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_instagram_business__media_insights"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/instagram_business_source/models/stg_instagram_business.yml/not_null_stg_instagram_business__media_insights__fivetran_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1671477152.128017, "compiled_code": "\n    \n    \n\n\n\nselect _fivetran_id\nfrom \"postgres\".\"social_media_rollup_integration_tests_stg_instagram_business\".\"stg_instagram_business__media_insights\"\nwhere _fivetran_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_fivetran_id", "file_key_name": "models.stg_instagram_business__media_insights"}, "test.instagram_business_source.not_null_stg_instagram_business__media_insights_post_id.f6e59f012e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "post_id", "model": "{{ get_where_subquery(ref('stg_instagram_business__media_insights')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.instagram_business_source.stg_instagram_business__media_insights"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "social_media_rollup_integration_tests_dbt_test__audit", "fqn": ["instagram_business_source", "not_null_stg_instagram_business__media_insights_post_id"], "unique_id": "test.instagram_business_source.not_null_stg_instagram_business__media_insights_post_id.f6e59f012e", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "instagram_business_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/instagram_business_source", "path": "not_null_stg_instagram_business__media_insights_post_id.sql", "original_file_path": "models/stg_instagram_business.yml", "name": "not_null_stg_instagram_business__media_insights_post_id", "alias": "not_null_stg_instagram_business__media_insights_post_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_instagram_business__media_insights"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/instagram_business_source/models/stg_instagram_business.yml/not_null_stg_instagram_business__media_insights_post_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1671477152.128972, "compiled_code": "\n    \n    \n\n\n\nselect post_id\nfrom \"postgres\".\"social_media_rollup_integration_tests_stg_instagram_business\".\"stg_instagram_business__media_insights\"\nwhere post_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "post_id", "file_key_name": "models.stg_instagram_business__media_insights"}, "test.instagram_business_source.dbt_utils_unique_combination_of_columns_stg_instagram_business__media_insights__fivetran_id__post_id__source_relation.0f78b7064e": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["_fivetran_id", "post_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_instagram_business__media_insights')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.instagram_business_source.stg_instagram_business__media_insights"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_76cc60b0cfbf973a9e35c0b032320201", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "social_media_rollup_integration_tests_dbt_test__audit", "fqn": ["instagram_business_source", "dbt_utils_unique_combination_of_columns_stg_instagram_business__media_insights__fivetran_id__post_id__source_relation"], "unique_id": "test.instagram_business_source.dbt_utils_unique_combination_of_columns_stg_instagram_business__media_insights__fivetran_id__post_id__source_relation.0f78b7064e", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_76cc60b0cfbf973a9e35c0b032320201\") }}", "language": "sql", "package_name": "instagram_business_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/instagram_business_source", "path": "dbt_utils_unique_combination_o_76cc60b0cfbf973a9e35c0b032320201.sql", "original_file_path": "models/stg_instagram_business.yml", "name": "dbt_utils_unique_combination_of_columns_stg_instagram_business__media_insights__fivetran_id__post_id__source_relation", "alias": "dbt_utils_unique_combination_o_76cc60b0cfbf973a9e35c0b032320201", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_instagram_business__media_insights"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/instagram_business_source/models/stg_instagram_business.yml/dbt_utils_unique_combination_o_76cc60b0cfbf973a9e35c0b032320201.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_76cc60b0cfbf973a9e35c0b032320201"}, "created_at": 1671477152.129933, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        _fivetran_id, post_id, source_relation\n    from \"postgres\".\"social_media_rollup_integration_tests_stg_instagram_business\".\"stg_instagram_business__media_insights\"\n    group by _fivetran_id, post_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_instagram_business__media_insights"}, "test.instagram_business_source.not_null_stg_instagram_business__user_history__fivetran_id.726c530904": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "_fivetran_id", "model": "{{ get_where_subquery(ref('stg_instagram_business__user_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.instagram_business_source.stg_instagram_business__user_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "social_media_rollup_integration_tests_dbt_test__audit", "fqn": ["instagram_business_source", "not_null_stg_instagram_business__user_history__fivetran_id"], "unique_id": "test.instagram_business_source.not_null_stg_instagram_business__user_history__fivetran_id.726c530904", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "instagram_business_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/instagram_business_source", "path": "not_null_stg_instagram_business__user_history__fivetran_id.sql", "original_file_path": "models/stg_instagram_business.yml", "name": "not_null_stg_instagram_business__user_history__fivetran_id", "alias": "not_null_stg_instagram_business__user_history__fivetran_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_instagram_business__user_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/instagram_business_source/models/stg_instagram_business.yml/not_null_stg_instagram_business__user_history__fivetran_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1671477152.132957, "compiled_code": "\n    \n    \n\n\n\nselect _fivetran_id\nfrom \"postgres\".\"social_media_rollup_integration_tests_stg_instagram_business\".\"stg_instagram_business__user_history\"\nwhere _fivetran_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_fivetran_id", "file_key_name": "models.stg_instagram_business__user_history"}, "test.instagram_business_source.not_null_stg_instagram_business__user_history_user_id.72a7df3526": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_id", "model": "{{ get_where_subquery(ref('stg_instagram_business__user_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.instagram_business_source.stg_instagram_business__user_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "social_media_rollup_integration_tests_dbt_test__audit", "fqn": ["instagram_business_source", "not_null_stg_instagram_business__user_history_user_id"], "unique_id": "test.instagram_business_source.not_null_stg_instagram_business__user_history_user_id.72a7df3526", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "instagram_business_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/instagram_business_source", "path": "not_null_stg_instagram_business__user_history_user_id.sql", "original_file_path": "models/stg_instagram_business.yml", "name": "not_null_stg_instagram_business__user_history_user_id", "alias": "not_null_stg_instagram_business__user_history_user_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_instagram_business__user_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/instagram_business_source/models/stg_instagram_business.yml/not_null_stg_instagram_business__user_history_user_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1671477152.13393, "compiled_code": "\n    \n    \n\n\n\nselect user_id\nfrom \"postgres\".\"social_media_rollup_integration_tests_stg_instagram_business\".\"stg_instagram_business__user_history\"\nwhere user_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "user_id", "file_key_name": "models.stg_instagram_business__user_history"}, "test.instagram_business_source.dbt_utils_unique_combination_of_columns_stg_instagram_business__user_history__fivetran_id__user_id__source_relation.1fc678e6cf": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["_fivetran_id", "user_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_instagram_business__user_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.instagram_business_source.stg_instagram_business__user_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_0f88172563d27864c484980677738e52", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "social_media_rollup_integration_tests_dbt_test__audit", "fqn": ["instagram_business_source", "dbt_utils_unique_combination_of_columns_stg_instagram_business__user_history__fivetran_id__user_id__source_relation"], "unique_id": "test.instagram_business_source.dbt_utils_unique_combination_of_columns_stg_instagram_business__user_history__fivetran_id__user_id__source_relation.1fc678e6cf", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_0f88172563d27864c484980677738e52\") }}", "language": "sql", "package_name": "instagram_business_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/instagram_business_source", "path": "dbt_utils_unique_combination_o_0f88172563d27864c484980677738e52.sql", "original_file_path": "models/stg_instagram_business.yml", "name": "dbt_utils_unique_combination_of_columns_stg_instagram_business__user_history__fivetran_id__user_id__source_relation", "alias": "dbt_utils_unique_combination_o_0f88172563d27864c484980677738e52", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_instagram_business__user_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/instagram_business_source/models/stg_instagram_business.yml/dbt_utils_unique_combination_o_0f88172563d27864c484980677738e52.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_0f88172563d27864c484980677738e52"}, "created_at": 1671477152.135029, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        _fivetran_id, user_id, source_relation\n    from \"postgres\".\"social_media_rollup_integration_tests_stg_instagram_business\".\"stg_instagram_business__user_history\"\n    group by _fivetran_id, user_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_instagram_business__user_history"}, "test.social_media_reporting.dbt_utils_unique_combination_of_columns_social_media_reporting__rollup_report_post_id__platform__source_relation.9985a561ef": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["post_id", "platform", "source_relation"], "model": "{{ get_where_subquery(ref('social_media_reporting__rollup_report')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.social_media_reporting.social_media_reporting__rollup_report"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_304cd077adb4b672d873c4b3e1054b2f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "social_media_rollup_integration_tests_dbt_test__audit", "fqn": ["social_media_reporting", "dbt_utils_unique_combination_of_columns_social_media_reporting__rollup_report_post_id__platform__source_relation"], "unique_id": "test.social_media_reporting.dbt_utils_unique_combination_of_columns_social_media_reporting__rollup_report_post_id__platform__source_relation.9985a561ef", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_304cd077adb4b672d873c4b3e1054b2f\") }}", "language": "sql", "package_name": "social_media_reporting", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/social_media_reporting", "path": "dbt_utils_unique_combination_o_304cd077adb4b672d873c4b3e1054b2f.sql", "original_file_path": "models/social_media_reporting.yml", "name": "dbt_utils_unique_combination_of_columns_social_media_reporting__rollup_report_post_id__platform__source_relation", "alias": "dbt_utils_unique_combination_o_304cd077adb4b672d873c4b3e1054b2f", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["social_media_reporting__rollup_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/social_media_reporting/models/social_media_reporting.yml/dbt_utils_unique_combination_o_304cd077adb4b672d873c4b3e1054b2f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_304cd077adb4b672d873c4b3e1054b2f"}, "created_at": 1671477152.151576, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        post_id, platform, source_relation\n    from \"postgres\".\"social_media_rollup_integration_tests_social_media_reporting\".\"social_media_reporting__rollup_report\"\n    group by post_id, platform, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.social_media_reporting__rollup_report"}}, "sources": {"source.linkedin_pages_source.linkedin_pages.share_statistic": {"fqn": ["linkedin_pages_source", "linkedin_pages", "share_statistic"], "database": "postgres", "schema": "linkedin_company_pages", "unique_id": "source.linkedin_pages_source.linkedin_pages.share_statistic", "package_name": "linkedin_pages_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/linkedin_pages_source", "path": "models/src_linkedin_pages.yml", "original_file_path": "models/src_linkedin_pages.yml", "name": "share_statistic", "source_name": "linkedin_pages", "source_description": "", "loader": "Fivetran", "identifier": "share_statistic", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents the performance of a Linkedin share.", "columns": {"_fivetran_id": {"name": "_fivetran_id", "description": "The Fivetran ID of the record", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The timestamp of when the record was last synced by Fivetran", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_organization_entity_urn": {"name": "_organization_entity_urn", "description": "The organizational entity URN for which the statistics represents.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_share_entity_urn": {"name": "_share_entity_urn", "description": "The share URN for describing individual share statistics. Is blank for aggregate share statistics.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "click_count": {"name": "click_count", "description": "Number of clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "comment_count": {"name": "comment_count", "description": "Number of comments.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "engagement": {"name": "engagement", "description": "Number of organic clicks, likes, comments, and shares over impressions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impression_count": {"name": "impression_count", "description": "Number of impressions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "like_count": {"name": "like_count", "description": "Number of likes. This field can become negative when members who liked a sponsored share later unlike it. The like is not counted since it is not organic, but the unlike is counted as organic.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "share_count": {"name": "share_count", "description": "Number of shares.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"linkedin_company_pages\".\"share_statistic\"", "created_at": 1671477152.1543481}, "source.linkedin_pages_source.linkedin_pages.ugc_post_share_statistic": {"fqn": ["linkedin_pages_source", "linkedin_pages", "ugc_post_share_statistic"], "database": "postgres", "schema": "linkedin_company_pages", "unique_id": "source.linkedin_pages_source.linkedin_pages.ugc_post_share_statistic", "package_name": "linkedin_pages_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/linkedin_pages_source", "path": "models/src_linkedin_pages.yml", "original_file_path": "models/src_linkedin_pages.yml", "name": "ugc_post_share_statistic", "source_name": "linkedin_pages", "source_description": "", "loader": "Fivetran", "identifier": "ugc_post_share_statistic", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Mapping table between UGC posts and share statistics", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The timestamp of when the record was last synced by Fivetran", "meta": {}, "data_type": null, "quote": null, "tags": []}, "share_statistic_id": {"name": "share_statistic_id", "description": "The ID of the share statistic record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ugc_post_id": {"name": "ugc_post_id", "description": "The ID of the UGC post record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"linkedin_company_pages\".\"ugc_post_share_statistic\"", "created_at": 1671477152.154429}, "source.linkedin_pages_source.linkedin_pages.ugc_post_history": {"fqn": ["linkedin_pages_source", "linkedin_pages", "ugc_post_history"], "database": "postgres", "schema": "linkedin_company_pages", "unique_id": "source.linkedin_pages_source.linkedin_pages.ugc_post_history", "package_name": "linkedin_pages_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/linkedin_pages_source", "path": "models/src_linkedin_pages.yml", "original_file_path": "models/src_linkedin_pages.yml", "name": "ugc_post_history", "source_name": "linkedin_pages", "source_description": "", "loader": "Fivetran", "identifier": "ugc_post_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a version of a UGC post.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The timestamp of when the record was last synced by Fivetran", "meta": {}, "data_type": null, "quote": null, "tags": []}, "author": {"name": "author", "description": "Urn of the author of this content.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "client_application": {"name": "client_application", "description": "Urn of the client application that created this content.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "container_entity": {"name": "container_entity", "description": "Urn of container entity that contains the user generated content such as a Group or a Story.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "content_certification_record": {"name": "content_certification_record", "description": "he content certification record associated with this content. Used to maintain information about the content's visibility and spam status.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_actor": {"name": "created_actor", "description": "User who created the content.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_time": {"name": "created_time", "description": "Timestamp when the content was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deleted_actor": {"name": "deleted_actor", "description": "User who deleted the content.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deleted_time": {"name": "deleted_time", "description": "Timestamp when the content was deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "distribution_distributed_via_follow_feed": {"name": "distribution_distributed_via_follow_feed", "description": "Indicates whether the content was distributed via the follow feed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "distribution_external_distribution_channels": {"name": "distribution_external_distribution_channels", "description": "List of external distribution channels that the content was distributed to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "distribution_feed_distribution": {"name": "distribution_feed_distribution", "description": "Specifies the type of feed distribution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_published_at": {"name": "first_published_at", "description": "The time at which this content was first published.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "Unique id for this object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_modified_actor": {"name": "last_modified_actor", "description": "User who last modified the content.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_modified_time": {"name": "last_modified_time", "description": "Timestamp when the content was last modified.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lifecycle_state": {"name": "lifecycle_state", "description": "The current state of the content.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "response_context_parent": {"name": "response_context_parent", "description": "The content that a piece of content is a response to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "response_context_root": {"name": "response_context_root", "description": "The greatest ancestor content that a piece of content is a response to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "specific_content_primary_landing_page_url": {"name": "specific_content_primary_landing_page_url", "description": "The main landing page URL of the share.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "specific_content_share_commentary_attributes": {"name": "specific_content_share_commentary_attributes", "description": "User generated attributes in the text.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "specific_content_share_commentary_inferred_locale": {"name": "specific_content_share_commentary_inferred_locale", "description": "The locale that may have be inferred for this text.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "specific_content_share_commentary_text": {"name": "specific_content_share_commentary_text", "description": "The text content that may be attributed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "specific_content_share_media_category": {"name": "specific_content_share_media_category", "description": "The type of media contained within the media field of this object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target_audience_targeted_entities": {"name": "target_audience_targeted_entities", "description": "Intended audience or best fit audiences for this content as decided by the owner.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "version_tag": {"name": "version_tag", "description": "Version tag of the entity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "visibility": {"name": "visibility", "description": "Visibility restrictions on content.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"linkedin_company_pages\".\"ugc_post_history\"", "created_at": 1671477152.154531}, "source.linkedin_pages_source.linkedin_pages.ugc_post_share_content_media": {"fqn": ["linkedin_pages_source", "linkedin_pages", "ugc_post_share_content_media"], "database": "postgres", "schema": "linkedin_company_pages", "unique_id": "source.linkedin_pages_source.linkedin_pages.ugc_post_share_content_media", "package_name": "linkedin_pages_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/linkedin_pages_source", "path": "models/src_linkedin_pages.yml", "original_file_path": "models/src_linkedin_pages.yml", "name": "ugc_post_share_content_media", "source_name": "linkedin_pages", "source_description": "", "loader": "Fivetran", "identifier": "ugc_post_share_content_media", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents content media shared as part of a UGC post.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The timestamp of when the record was last synced by Fivetran", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description_attributes": {"name": "description_attributes", "description": "User generated attributes in the text.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description_inferred_locale": {"name": "description_inferred_locale", "description": "The locale that may have be inferred for this text.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description_text": {"name": "description_text", "description": "The text content that may be attributed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "landing_page_title": {"name": "landing_page_title", "description": "If present, this content entity will be rendered as a CTA with landingPageTitle as the CTA text and landingPageUrl as the click through url.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "landing_page_url": {"name": "landing_page_url", "description": "The click through url. Maximum length is 2000 characters.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_modified_time": {"name": "last_modified_time", "description": "The timestamp when the content was last modified.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "media": {"name": "media", "description": "The URN of the media shared.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "original_url": {"name": "original_url", "description": "URL whose content is summarized", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the availability of this media.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "thumbnails": {"name": "thumbnails", "description": "The thumbnail saved from the ingestion of this article.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title_attributes": {"name": "title_attributes", "description": "User generated attributes in the text.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title_inferred_locale": {"name": "title_inferred_locale", "description": "The locale that may have be inferred for this text.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title_text": {"name": "title_text", "description": "The text content that may be attributed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ugc_post_id": {"name": "ugc_post_id", "description": "The ID of the UGC post record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"linkedin_company_pages\".\"ugc_post_share_content_media\"", "created_at": 1671477152.154608}, "source.linkedin_pages_source.linkedin_pages.organization": {"fqn": ["linkedin_pages_source", "linkedin_pages", "organization"], "database": "postgres", "schema": "linkedin_company_pages", "unique_id": "source.linkedin_pages_source.linkedin_pages.organization", "package_name": "linkedin_pages_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/linkedin_pages_source", "path": "models/src_linkedin_pages.yml", "original_file_path": "models/src_linkedin_pages.yml", "name": "organization", "source_name": "linkedin_pages", "source_description": "", "loader": "Fivetran", "identifier": "organization", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents an organization.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The timestamp of when the record was last synced by Fivetran", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cover_photo_v_2_crop_info_height": {"name": "cover_photo_v_2_crop_info_height", "description": "The height of the cover photo.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cover_photo_v_2_crop_info_width": {"name": "cover_photo_v_2_crop_info_width", "description": "The width of the cover photo.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cover_photo_v_2_crop_info_x": {"name": "cover_photo_v_2_crop_info_x", "description": "The X coordinate of the corner of the cover photo", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cover_photo_v_2_crop_info_y": {"name": "cover_photo_v_2_crop_info_y", "description": "The Y coordinate of the corner of the cover photo", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cover_photo_v_2_cropped": {"name": "cover_photo_v_2_cropped", "description": "Location of the cropped image", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cover_photo_v_2_original": {"name": "cover_photo_v_2_original", "description": "Location of the original image", "meta": {}, "data_type": null, "quote": null, "tags": []}, "default_locale_country": {"name": "default_locale_country", "description": "The default country of the organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "default_locale_language": {"name": "default_locale_language", "description": "The default language of the organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description_localized": {"name": "description_localized", "description": "The localized description of the organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description_preferred_locale_country": {"name": "description_preferred_locale_country", "description": "The preferred country of the organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description_preferred_locale_language": {"name": "description_preferred_locale_language", "description": "The preferred language of the organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "founded_on_day": {"name": "founded_on_day", "description": "The day of the month that the organization was founded.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "founded_on_month": {"name": "founded_on_month", "description": "The month of the year that the organization was founded.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "founded_on_year": {"name": "founded_on_year", "description": "The year that the organization was founded.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "Unique id for the organization", "meta": {}, "data_type": null, "quote": null, "tags": []}, "localized_description": {"name": "localized_description", "description": "The localized description of the organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "localized_name": {"name": "localized_name", "description": "The localized name of the organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "localized_website": {"name": "localized_website", "description": "The localized website of the organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "logo_v_2_crop_info_height": {"name": "logo_v_2_crop_info_height", "description": "The height of the logo.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "logo_v_2_crop_info_width": {"name": "logo_v_2_crop_info_width", "description": "The width of the logo.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "logo_v_2_crop_info_x": {"name": "logo_v_2_crop_info_x", "description": "The X coordinate of the corner of the logo", "meta": {}, "data_type": null, "quote": null, "tags": []}, "logo_v_2_crop_info_y": {"name": "logo_v_2_crop_info_y", "description": "The Y coordinate of the corner of the logo", "meta": {}, "data_type": null, "quote": null, "tags": []}, "logo_v_2_cropped": {"name": "logo_v_2_cropped", "description": "Location of the cropped image", "meta": {}, "data_type": null, "quote": null, "tags": []}, "logo_v_2_original": {"name": "logo_v_2_original", "description": "Location of the original image", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name_localized": {"name": "name_localized", "description": "The localized name of the organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name_preferred_locale_country": {"name": "name_preferred_locale_country", "description": "The preferred country of the organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name_preferred_locale_language": {"name": "name_preferred_locale_language", "description": "The preferred language of the organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organization_status": {"name": "organization_status", "description": "The status of the organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organization_type": {"name": "organization_type", "description": "The type of organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "overview_photo_v_2_crop_info_height": {"name": "overview_photo_v_2_crop_info_height", "description": "The height of the overview photo.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "overview_photo_v_2_crop_info_width": {"name": "overview_photo_v_2_crop_info_width", "description": "The width of the overview photo.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "overview_photo_v_2_crop_info_x": {"name": "overview_photo_v_2_crop_info_x", "description": "The X coordinate of the corner of the overview photo", "meta": {}, "data_type": null, "quote": null, "tags": []}, "overview_photo_v_2_crop_info_y": {"name": "overview_photo_v_2_crop_info_y", "description": "The Y coordinate of the corner of the overview photo", "meta": {}, "data_type": null, "quote": null, "tags": []}, "overview_photo_v_2_cropped": {"name": "overview_photo_v_2_cropped", "description": "Location of the cropped image", "meta": {}, "data_type": null, "quote": null, "tags": []}, "overview_photo_v_2_original": {"name": "overview_photo_v_2_original", "description": "Location of the original image", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_relationship_parent_id": {"name": "parent_relationship_parent_id", "description": "URN of the parent organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_relationship_status": {"name": "parent_relationship_status", "description": "The status of the parent organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_relationship_type": {"name": "parent_relationship_type", "description": "The type of parent organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "primary_organization_type": {"name": "primary_organization_type", "description": "The primary type of organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "school_attributes_hierarchy_classification": {"name": "school_attributes_hierarchy_classification", "description": "The classification for school hierarchy.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "school_attributes_legacy_school": {"name": "school_attributes_legacy_school", "description": "Legacy school urn for the organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "school_attributes_type": {"name": "school_attributes_type", "description": "The type of institution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "school_attributes_year_level": {"name": "school_attributes_year_level", "description": "Classification of the length of the institution's educational programs. These levels are defined by the National Center for Education Statistics", "meta": {}, "data_type": null, "quote": null, "tags": []}, "staff_count_range": {"name": "staff_count_range", "description": "Range of the number of staff associated with this entity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vanity_name": {"name": "vanity_name", "description": "Entity's unique name used in URLs.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "version_tag": {"name": "version_tag", "description": "Tag indicating version.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "website_localized": {"name": "website_localized", "description": "The localized website of the organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "website_preferred_locale_country": {"name": "website_preferred_locale_country", "description": "The preferred country of the organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "website_preferred_locale_language": {"name": "website_preferred_locale_language", "description": "The preferred language of the organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"linkedin_company_pages\".\"organization\"", "created_at": 1671477152.1547148}, "source.linkedin_pages_source.linkedin_pages.organization_ugc_post": {"fqn": ["linkedin_pages_source", "linkedin_pages", "organization_ugc_post"], "database": "postgres", "schema": "linkedin_company_pages", "unique_id": "source.linkedin_pages_source.linkedin_pages.organization_ugc_post", "package_name": "linkedin_pages_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/linkedin_pages_source", "path": "models/src_linkedin_pages.yml", "original_file_path": "models/src_linkedin_pages.yml", "name": "organization_ugc_post", "source_name": "linkedin_pages", "source_description": "", "loader": "Fivetran", "identifier": "organization_ugc_post", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Mapping table for organizations and UGC posts.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The timestamp of when the record was last synced by Fivetran", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organization_id": {"name": "organization_id", "description": "Unique id for the organization", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ugc_post_id": {"name": "ugc_post_id", "description": "Unique id for the UGC post", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"linkedin_company_pages\".\"organization_ugc_post\"", "created_at": 1671477152.1547751}, "source.twitter_organic_source.twitter_organic.account_history": {"fqn": ["twitter_organic_source", "twitter_organic", "account_history"], "database": "postgres", "schema": "twitter_organic", "unique_id": "source.twitter_organic_source.twitter_organic.account_history", "package_name": "twitter_organic_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/twitter_organic_source", "path": "models/src_twitter_organic.yml", "original_file_path": "models/src_twitter_organic.yml", "name": "account_history", "source_name": "twitter_organic", "source_description": "", "loader": "Fivetran", "identifier": "account_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a version of a Twitter ad account.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "approval_status": {"name": "approval_status", "description": "Approval status of the account in Twitter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "business_id": {"name": "business_id", "description": "ID of the associated business in Twitter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "business_name": {"name": "business_name", "description": "Name of the associated business in Twitter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Date and time when the account was created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deleted": {"name": "deleted", "description": "Whether the account has been deleted", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "ID of the account in Twitter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "industry_type": {"name": "industry_type", "description": "Industry type of the account in Twitter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the account in Twitter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "salt": {"name": "salt", "description": "Salt used to generate the account's unique ID", "meta": {}, "data_type": null, "quote": null, "tags": []}, "timezone": {"name": "timezone", "description": "Timezone of the account in Twitter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Date and time when the account was last updated", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"twitter_organic\".\"account_history\"", "created_at": 1671477152.15485}, "source.twitter_organic_source.twitter_organic.organic_tweet_report": {"fqn": ["twitter_organic_source", "twitter_organic", "organic_tweet_report"], "database": "postgres", "schema": "twitter_organic", "unique_id": "source.twitter_organic_source.twitter_organic.organic_tweet_report", "package_name": "twitter_organic_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/twitter_organic_source", "path": "models/src_twitter_organic.yml", "original_file_path": "models/src_twitter_organic.yml", "name": "organic_tweet_report", "source_name": "twitter_organic", "source_description": "", "loader": "Fivetran", "identifier": "organic_tweet_report", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents metrics about a tweet on a specific date.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "ID of the associated account in Twitter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "app_clicks": {"name": "app_clicks", "description": "Number of clicks on app install campaigns", "meta": {}, "data_type": null, "quote": null, "tags": []}, "card_engagements": {"name": "card_engagements", "description": "Number of engagements on cards", "meta": {}, "data_type": null, "quote": null, "tags": []}, "carousel_swipes": {"name": "carousel_swipes", "description": "Number of swipes on carousels", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "Number of clicks on tweet", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "Date of the report", "meta": {}, "data_type": null, "quote": null, "tags": []}, "engagements": {"name": "engagements", "description": "Number of engagements on tweet", "meta": {}, "data_type": null, "quote": null, "tags": []}, "follows": {"name": "follows", "description": "Number of follows as a result of the tweet", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "Number of impressions on tweet", "meta": {}, "data_type": null, "quote": null, "tags": []}, "likes": {"name": "likes", "description": "Number of likes on tweet", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organic_tweet_id": {"name": "organic_tweet_id", "description": "ID of the tweet in Twitter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "poll_card_vote": {"name": "poll_card_vote", "description": "Number of votes on poll cards", "meta": {}, "data_type": null, "quote": null, "tags": []}, "qualified_impressions": {"name": "qualified_impressions", "description": "Number of qualified impressions on tweet", "meta": {}, "data_type": null, "quote": null, "tags": []}, "replies": {"name": "replies", "description": "Number of replies on tweet", "meta": {}, "data_type": null, "quote": null, "tags": []}, "retweets": {"name": "retweets", "description": "Number of retweets on tweet", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unfollows": {"name": "unfollows", "description": "Number of unfollows as a result of the tweet", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_clicks": {"name": "url_clicks", "description": "Number of clicks on URLs in tweet", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_15_s_views": {"name": "video_15_s_views", "description": "Number of 15-second views on video", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_3_s_100_pct_views": {"name": "video_3_s_100_pct_views", "description": "Total number of views where at least 3 seconds were played while 100% in view.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_6_s_views": {"name": "video_6_s_views", "description": "Number of 6-second views on video", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_content_starts": {"name": "video_content_starts", "description": "Number of times the video content started", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_cta_clicks": {"name": "video_cta_clicks", "description": "Number of clicks on tweet call-to-actions", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_total_views": {"name": "video_total_views", "description": "Total number of views on video", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_100": {"name": "video_views_100", "description": "Total number of views where at least 100% of the video was viewed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_25": {"name": "video_views_25", "description": "Total number of views where at least 25% of the video was viewed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_50": {"name": "video_views_50", "description": "Total number of views where at least 50% of the video was viewed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views_75": {"name": "video_views_75", "description": "Total number of views where at least 75% of the video was viewed.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"twitter_organic\".\"organic_tweet_report\"", "created_at": 1671477152.1549382}, "source.twitter_organic_source.twitter_organic.tweet": {"fqn": ["twitter_organic_source", "twitter_organic", "tweet"], "database": "postgres", "schema": "twitter_organic", "unique_id": "source.twitter_organic_source.twitter_organic.tweet", "package_name": "twitter_organic_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/twitter_organic_source", "path": "models/src_twitter_organic.yml", "original_file_path": "models/src_twitter_organic.yml", "name": "tweet", "source_name": "twitter_organic", "source_description": "", "loader": "Fivetran", "identifier": "tweet", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a tweet in Twitter", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "ID of the associated account in Twitter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "card_uri": {"name": "card_uri", "description": "URI of the associated card in Twitter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Date and time when the tweet was created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "favorite_count": {"name": "favorite_count", "description": "Number of times the tweet has been favorited", "meta": {}, "data_type": null, "quote": null, "tags": []}, "favorited": {"name": "favorited", "description": "Whether the tweet has been favorited", "meta": {}, "data_type": null, "quote": null, "tags": []}, "followers": {"name": "followers", "description": "Number of followers the tweet generated", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_text": {"name": "full_text", "description": "The full text of the tweet", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the tweet in Twitter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "in_reply_to_screen_name": {"name": "in_reply_to_screen_name", "description": "Screen name the tweet is in reply to", "meta": {}, "data_type": null, "quote": null, "tags": []}, "in_reply_to_status_id": {"name": "in_reply_to_status_id", "description": "Status ID the tweet is in reply to", "meta": {}, "data_type": null, "quote": null, "tags": []}, "in_reply_to_user_id": {"name": "in_reply_to_user_id", "description": "User ID the tweet is in reply to", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lang": {"name": "lang", "description": "Language of the tweet", "meta": {}, "data_type": null, "quote": null, "tags": []}, "media_key": {"name": "media_key", "description": "Key of associated media in media library table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "retweet_count": {"name": "retweet_count", "description": "Number of times the tweet has been retweeted", "meta": {}, "data_type": null, "quote": null, "tags": []}, "retweeted": {"name": "retweeted", "description": "Whether the tweet has been retweeted", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source": {"name": "source", "description": "The source of the tweet", "meta": {}, "data_type": null, "quote": null, "tags": []}, "truncated": {"name": "truncated", "description": "Whether the tweet has been truncated", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tweet_type": {"name": "tweet_type", "description": "The type of the tweet", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "The ID of the user who tweeted the tweet", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"twitter_organic\".\"tweet\"", "created_at": 1671477152.155015}, "source.twitter_organic_source.twitter_organic.twitter_user_history": {"fqn": ["twitter_organic_source", "twitter_organic", "twitter_user_history"], "database": "postgres", "schema": "twitter_organic", "unique_id": "source.twitter_organic_source.twitter_organic.twitter_user_history", "package_name": "twitter_organic_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/twitter_organic_source", "path": "models/src_twitter_organic.yml", "original_file_path": "models/src_twitter_organic.yml", "name": "twitter_user_history", "source_name": "twitter_organic", "source_description": "", "loader": "Fivetran", "identifier": "twitter_user_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a version of a Twitter user.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contributors_enabled": {"name": "contributors_enabled", "description": "Whether the user has contributors enabled", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Date and time when the user was created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "default_profile": {"name": "default_profile", "description": "When true, indicates that the user has not altered the theme or background of their user profile.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "default_profile_image": {"name": "default_profile_image", "description": "When true, indicates that the user has not uploaded their own profile image and a default image is used instead.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "The description on the user's profile", "meta": {}, "data_type": null, "quote": null, "tags": []}, "favourites_count": {"name": "favourites_count", "description": "Number of times the user has favorited a tweet", "meta": {}, "data_type": null, "quote": null, "tags": []}, "followers_count": {"name": "followers_count", "description": "Number of followers the user has", "meta": {}, "data_type": null, "quote": null, "tags": []}, "friends_count": {"name": "friends_count", "description": "Number of friends the user has", "meta": {}, "data_type": null, "quote": null, "tags": []}, "geo_enabled": {"name": "geo_enabled", "description": "Whether the user has enabled geotagging", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the user in Twitter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_translation_enabled": {"name": "is_translation_enabled", "description": "Whether the user has translation enabled", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_translator": {"name": "is_translator", "description": "Whether the user is a translator", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lang": {"name": "lang", "description": "The language of the user's account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location": {"name": "location", "description": "The location of the user's account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "profile_background_image_url": {"name": "profile_background_image_url", "description": "URL of the user's profile background image", "meta": {}, "data_type": null, "quote": null, "tags": []}, "profile_background_image_url_https": {"name": "profile_background_image_url_https", "description": "URL of the user's profile background image in HTTPS", "meta": {}, "data_type": null, "quote": null, "tags": []}, "profile_banner_url": {"name": "profile_banner_url", "description": "URL of the user's profile banner", "meta": {}, "data_type": null, "quote": null, "tags": []}, "profile_image_url": {"name": "profile_image_url", "description": "URL of the user's profile image", "meta": {}, "data_type": null, "quote": null, "tags": []}, "profile_image_url_https": {"name": "profile_image_url_https", "description": "URL of the user's profile image in HTTPS", "meta": {}, "data_type": null, "quote": null, "tags": []}, "profile_use_background_image": {"name": "profile_use_background_image", "description": "Whether the user has a custom profile background image", "meta": {}, "data_type": null, "quote": null, "tags": []}, "protected_user": {"name": "protected_user", "description": "Whether the user is protected", "meta": {}, "data_type": null, "quote": null, "tags": []}, "screen_name": {"name": "screen_name", "description": "The screen name of the user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "statuses_count": {"name": "statuses_count", "description": "Number of tweets the user has made", "meta": {}, "data_type": null, "quote": null, "tags": []}, "time_zone": {"name": "time_zone", "description": "The time zone of the user's account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url": {"name": "url", "description": "The URL of the user's page", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utc_offset": {"name": "utc_offset", "description": "The UTC offset of the user's account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "verified": {"name": "verified", "description": "Whether the user has verified their account", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"twitter_organic\".\"twitter_user_history\"", "created_at": 1671477152.15518}, "source.facebook_pages_source.facebook_pages.post_history": {"fqn": ["facebook_pages_source", "facebook_pages", "post_history"], "database": "postgres", "schema": "facebook_pages", "unique_id": "source.facebook_pages_source.facebook_pages.post_history", "package_name": "facebook_pages_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/facebook_pages_source", "path": "models/src_facebook_pages.yml", "original_file_path": "models/src_facebook_pages.yml", "name": "post_history", "source_name": "facebook_pages", "source_description": "", "loader": "Fivetran", "identifier": "post_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a version of a post in Facebook.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The timestamp of when the data was last synced by Fivetran", "meta": {}, "data_type": null, "quote": null, "tags": []}, "allowed_advertising_objects": {"name": "allowed_advertising_objects", "description": "The only objectives under which this post can be advertised.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_time": {"name": "created_time", "description": "The time the post was initially published. For a post about a life event, this is the date and time of the life event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the post.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_eligible_for_promotion": {"name": "is_eligible_for_promotion", "description": "Whether this post is eligible to be promoted on Facebook.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_hidden": {"name": "is_hidden", "description": "Whether this post is hidden.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_instagram_eligible": {"name": "is_instagram_eligible", "description": "Whether this post can be promoted in Instagram.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_published": {"name": "is_published", "description": "Indicates whether a scheduled post was published (applies to scheduled Page Post only, for users post and instantly published posts this value is always true). Note that this value is always false for page posts created as part of the Ad Creation process.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "message": {"name": "message", "description": "The status message in the post.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_id": {"name": "page_id", "description": "The ID of the page on which the post was published.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_id": {"name": "parent_id", "description": "The ID of a parent post for this post, if it exists. For example, if this story is a 'Your Page was mentioned in a post' story, the parent_id is the original post where the mention happened.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "privacy_allow": {"name": "privacy_allow", "description": "If value is CUSTOM, this is a comma-separated ID list of Users and friend lists (if any) that can see the post.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "privacy_deny": {"name": "privacy_deny", "description": "If value is CUSTOM, this is a comma-separated ID list of Users and friend lists (if any) that cannot see the post.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "privacy_description": {"name": "privacy_description", "description": "Text that describes the privacy settings, as they would appear on Facebook.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "privacy_friends": {"name": "privacy_friends", "description": "If value is CUSTOM, this indicates which group of friends can see the post.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "privacy_value": {"name": "privacy_value", "description": "The actual privacy setting.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "promotable_id": {"name": "promotable_id", "description": "ID of post to use for promotion for stories that cannot be promoted directly.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "share_count": {"name": "share_count", "description": "The share count of this post. The share count may include deleted posts and posts you cannot see for privacy reasons", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status_type": {"name": "status_type", "description": "The type of a status update.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_time": {"name": "updated_time", "description": "The time the post was last updated, which occurs when the post was created, edited, or a User comments on a post.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"facebook_pages\".\"post_history\"", "created_at": 1671477152.1552598}, "source.facebook_pages_source.facebook_pages.page": {"fqn": ["facebook_pages_source", "facebook_pages", "page"], "database": "postgres", "schema": "facebook_pages", "unique_id": "source.facebook_pages_source.facebook_pages.page", "package_name": "facebook_pages_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/facebook_pages_source", "path": "models/src_facebook_pages.yml", "original_file_path": "models/src_facebook_pages.yml", "name": "page", "source_name": "facebook_pages", "source_description": "", "loader": "Fivetran", "identifier": "page", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a Facebook page.", "columns": {"_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Whether the record has been deleted", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The timestamp of when the data was last synced by Fivetran", "meta": {}, "data_type": null, "quote": null, "tags": []}, "affiliation": {"name": "affiliation", "description": "Affiliation of this person. Applicable to Pages representing people.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "app_id": {"name": "app_id", "description": "App ID for app-owned Pages and app Pages", "meta": {}, "data_type": null, "quote": null, "tags": []}, "artists_we_like": {"name": "artists_we_like", "description": "Artists the band likes. Applicable to Bands.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attire": {"name": "attire", "description": "Dress code of the business. Applicable to Restaurants or Nightlife. Can be one of Casual, Dressy or Unspecified.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "awards": {"name": "awards", "description": "The awards information of the film. Applicable to Films.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "band_interests": {"name": "band_interests", "description": "Band interests. Applicable to Bands.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "band_members": {"name": "band_members", "description": "Members of the band. Applicable to Bands.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bio": {"name": "bio", "description": "Biography of the band. Applicable to Bands.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "birthday": {"name": "birthday", "description": "Birthday of this person. Applicable to Pages representing people.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "booking_agent": {"name": "booking_agent", "description": "Booking agent of the band. Applicable to Bands.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "built": {"name": "built", "description": "Year vehicle was built. Applicable to Vehicles.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "can_checkin": {"name": "can_checkin", "description": "Whether the Page has check-in functionality enabled.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "can_post": {"name": "can_post", "description": "Indicates whether the current app user can post on this Page.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "category": {"name": "category", "description": "The Page's category. e.g. Product/Service, Computers/Technology.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "category_list": {"name": "category_list", "description": "The Page's sub-categories.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "checkins": {"name": "checkins", "description": "Number of check-ins at a place represented by a Page", "meta": {}, "data_type": null, "quote": null, "tags": []}, "company_overview": {"name": "company_overview", "description": "The company overview. Applicable to Companies.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "culinary_team": {"name": "culinary_team", "description": "Culinary team of the business. Applicable to Restaurants or Nightlife.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "current_location": {"name": "current_location", "description": "Current location of the Page.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "The description of the Page.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "directed_by": {"name": "directed_by", "description": "The director of the film. Applicable to Films.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "display_subtext": {"name": "display_subtext", "description": "Subtext about the Page being viewed. C", "meta": {}, "data_type": null, "quote": null, "tags": []}, "emails": {"name": "emails", "description": "The emails listed in the About section of a Page.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fan_count": {"name": "fan_count", "description": "The number of users who like the Page. For Global Pages this is the count for all Pages across the brand.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "features": {"name": "features", "description": "Features of the vehicle. Applicable to Vehicles.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "food_styles": {"name": "food_styles", "description": "The restaurant's food styles. Applicable to Restaurants", "meta": {}, "data_type": null, "quote": null, "tags": []}, "founded": {"name": "founded", "description": "When the company was founded. Applicable to Pages in the Company category.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "general_info": {"name": "general_info", "description": "General information provided by the Page.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "general_manager": {"name": "general_manager", "description": "General manager of the business. Applicable to Restaurants or Nightlife.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "genre": {"name": "genre", "description": "The genre of the film. Applicable to Films.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "global_brand_page_name": {"name": "global_brand_page_name", "description": "The name of the Page with country codes appended for Global Pages.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "has_added_app": {"name": "has_added_app", "description": "Indicates whether this Page has added the app making the query in a Page tab.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "has_transitioned_to_new_page_experience": {"name": "has_transitioned_to_new_page_experience", "description": "indicates whether a page has transitioned to new page experience or not", "meta": {}, "data_type": null, "quote": null, "tags": []}, "has_whatsapp_number": {"name": "has_whatsapp_number", "description": "Indicates whether WhatsApp number connected to this page is a WhatsApp business number.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hometown": {"name": "hometown", "description": "Hometown of the band. Applicable to Bands", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the Page.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressum": {"name": "impressum", "description": "Legal information about the Page publishers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "influences": {"name": "influences", "description": "Influences on the band. Applicable to Bands.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_always_open": {"name": "is_always_open", "description": "Indicates whether this location is always open.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_chain": {"name": "is_chain", "description": "Indicates whether location is part of a chain.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_community_page": {"name": "is_community_page", "description": "Indicates whether the Page is a community Page.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_eligible_for_branded_content": {"name": "is_eligible_for_branded_content", "description": "Indicates whether the page is eligible for the branded content tool", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_messenger_bot_get_started_enabled": {"name": "is_messenger_bot_get_started_enabled", "description": "Indicates whether the page is a Messenger Platform Bot with Get Started button enabled", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_messenger_platform_bot": {"name": "is_messenger_platform_bot", "description": "Indicates whether the page is a Messenger Platform Bot.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_owned": {"name": "is_owned", "description": "Indicates whether Page is owned.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_permanently_closed": {"name": "is_permanently_closed", "description": "Whether the business corresponding to this Page is permanently closed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_published": {"name": "is_published", "description": "Indicates whether the Page is published and visible to non-admins", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_unclaimed": {"name": "is_unclaimed", "description": "Indicates whether the Page is unclaimed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "members": {"name": "members", "description": "Members of this org. Applicable to Pages representing Team Orgs.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "mission": {"name": "mission", "description": "The company mission. Applicable to Companies", "meta": {}, "data_type": null, "quote": null, "tags": []}, "mpg": {"name": "mpg", "description": "MPG of the vehicle. Applicable to Vehicles.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the Page", "meta": {}, "data_type": null, "quote": null, "tags": []}, "network": {"name": "network", "description": "The TV network for the TV show. Applicable to TV Shows.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "new_like_count": {"name": "new_like_count", "description": "The number of people who have liked the Page, since the last login.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "overall_star_rating": {"name": "overall_star_rating", "description": "Overall page rating based on rating survey from users on a scale of 1-5. This value is normalized and is not guaranteed to be a strict average of user ratings. If there are 0 or a small number of ratings, this field will not be returned.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "personal_info": {"name": "personal_info", "description": "Personal information. Applicable to Pages representing People.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "personal_interests": {"name": "personal_interests", "description": "Personal interests. Applicable to Pages representing People.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pharma_safety_info": {"name": "pharma_safety_info", "description": "Pharmacy safety information. Applicable to Pharmaceutical companies.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "phone": {"name": "phone", "description": "Phone number provided by a Page.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "place_type": {"name": "place_type", "description": "For places, the category of the place. Value can be CITY, COUNTRY, EVENT, GEO_ENTITY, PLACE, RESIDENCE, STATE_PROVINCE, or TEXT.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "plot_outline": {"name": "plot_outline", "description": "The plot outline of the film. Applicable to Films.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "press_contact": {"name": "press_contact", "description": "Press contact information of the band. Applicable to Bands", "meta": {}, "data_type": null, "quote": null, "tags": []}, "price_range": {"name": "price_range", "description": "Price range of the business, such as a restaurant or salon. Values can be one of $, $$, $$$, $$$$, Not Applicable, or null if no value is set.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "produced_by": {"name": "produced_by", "description": "The productor of the film. Applicable to Films.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "products": {"name": "products", "description": "The products of this company. Applicable to Companies", "meta": {}, "data_type": null, "quote": null, "tags": []}, "promotion_eligible": {"name": "promotion_eligible", "description": "Boosted posts eligibility status. Only visible to a page admin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "promotion_ineligible_reason": {"name": "promotion_ineligible_reason", "description": "Reason for which boosted posts are not eligible.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "public_transit": {"name": "public_transit", "description": "Public transit to the business. Applicable to Restaurants or Nightlife.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rating_count": {"name": "rating_count", "description": "Number of ratings for the Page (limited to ratings that are publicly accessible).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "record_label": {"name": "record_label", "description": "Record label of the band. Applicable to Bands.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "release_date": {"name": "release_date", "description": "The film's release date. Applicable to Films.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schedule": {"name": "schedule", "description": "The air schedule of the TV show. Applicable to TV Shows.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "screenplay_by": {"name": "screenplay_by", "description": "The screenwriter of the film. Applicable to Films.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "season": {"name": "season", "description": "The season information of the TV Show. Applicable to TV Shows.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "single_line_address": {"name": "single_line_address", "description": "The Page address, if any, in a simple single line format.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "starring": {"name": "starring", "description": "The cast of the film. Applicable to Films.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "store_number": {"name": "store_number", "description": "Unique store number for this location Page", "meta": {}, "data_type": null, "quote": null, "tags": []}, "studio": {"name": "studio", "description": "The studio for the film production. Applicable to Films", "meta": {}, "data_type": null, "quote": null, "tags": []}, "talking_about_count": {"name": "talking_about_count", "description": "The number of people talking about this Page", "meta": {}, "data_type": null, "quote": null, "tags": []}, "username": {"name": "username", "description": "The alias of the Page. For example, for www.facebook.com/platform the username is 'platform'", "meta": {}, "data_type": null, "quote": null, "tags": []}, "website": {"name": "website", "description": "The URL of the Page's website.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "were_here_count": {"name": "were_here_count", "description": "The number of visits to this Page's location. If the Page setting Show map, check-ins and star ratings on the Page (under Page Settings > Page Info > Address) is disabled, then this value will also be disabled.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "whatsapp_number": {"name": "whatsapp_number", "description": "The Page's WhatsApp number.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "written_by": {"name": "written_by", "description": "The writer of the TV show. Applicable to TV Shows.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"facebook_pages\".\"page\"", "created_at": 1671477152.1553988}, "source.facebook_pages_source.facebook_pages.lifetime_post_metrics_total": {"fqn": ["facebook_pages_source", "facebook_pages", "lifetime_post_metrics_total"], "database": "postgres", "schema": "facebook_pages", "unique_id": "source.facebook_pages_source.facebook_pages.lifetime_post_metrics_total", "package_name": "facebook_pages_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/facebook_pages_source", "path": "models/src_facebook_pages.yml", "original_file_path": "models/src_facebook_pages.yml", "name": "lifetime_post_metrics_total", "source_name": "facebook_pages", "source_description": "", "loader": "Fivetran", "identifier": "lifetime_post_metrics_total", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents the lifetime post metrics for a Page as of a date.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The timestamp of when the data was last synced with Fivetran", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "The date of the metric", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_activity": {"name": "post_activity", "description": "The total amount of activity on the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_clicks": {"name": "post_clicks", "description": "The total amount of clicks on the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_engaged_fan": {"name": "post_engaged_fan", "description": "The total amount of engaged fans on the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_engaged_users": {"name": "post_engaged_users", "description": "The total amount of engaged users on the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_id": {"name": "post_id", "description": "The ID of the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_impressions": {"name": "post_impressions", "description": "The total amount of impressions on the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_impressions_fan": {"name": "post_impressions_fan", "description": "The total amount of impressions on the post by fans", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_impressions_fan_paid": {"name": "post_impressions_fan_paid", "description": "The total amount of impressions on the post by paid fans", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_impressions_nonviral": {"name": "post_impressions_nonviral", "description": "The total amount of non-viral impressions on the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_impressions_organic": {"name": "post_impressions_organic", "description": "The total amount of organic impressions on the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_impressions_paid": {"name": "post_impressions_paid", "description": "The total amount of paid impressions on the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_impressions_viral": {"name": "post_impressions_viral", "description": "The total amount of viral impressions on the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_negative_feedback": {"name": "post_negative_feedback", "description": "The total amount of negative feedback on the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_reactions_anger_total": {"name": "post_reactions_anger_total", "description": "The total amount of reactions with type 'anger' on the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_reactions_haha_total": {"name": "post_reactions_haha_total", "description": "The total amount of reactions with type 'haha' on the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_reactions_like_total": {"name": "post_reactions_like_total", "description": "The total amount of reactions with type 'like' on the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_reactions_love_total": {"name": "post_reactions_love_total", "description": "The total amount of reactions with type 'love' on the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_reactions_sorry_total": {"name": "post_reactions_sorry_total", "description": "The total amount of reactions with type 'sorry' on the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_reactions_wow_total": {"name": "post_reactions_wow_total", "description": "The total amount of reactions with type 'wow' on the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_video_avg_time_watched": {"name": "post_video_avg_time_watched", "description": "The average amount of time watched on the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_video_complete_views_30_s_autoplayed": {"name": "post_video_complete_views_30_s_autoplayed", "description": "The total number of views longer than 30 seconds when the post was played automatically", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_video_complete_views_30_s_clicked_to_play": {"name": "post_video_complete_views_30_s_clicked_to_play", "description": "The total number of views longer than 30 seconds when the post was clicked to play", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_video_complete_views_30_s_organic": {"name": "post_video_complete_views_30_s_organic", "description": "The total number of organic views longer than 30 seconds", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_video_complete_views_30_s_paid": {"name": "post_video_complete_views_30_s_paid", "description": "The total number of paid views longer than 30 seconds", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_video_complete_views_organic": {"name": "post_video_complete_views_organic", "description": "The total number of organic views when the video was completed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_video_complete_views_paid": {"name": "post_video_complete_views_paid", "description": "The total number of paid views when the video was completed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_video_length": {"name": "post_video_length", "description": "The length of the video in seconds", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_video_view_time": {"name": "post_video_view_time", "description": "The total amount of time watched on the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_video_view_time_organic": {"name": "post_video_view_time_organic", "description": "The total amount of time watched on the post by organic users", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_video_views": {"name": "post_video_views", "description": "The total number of views on the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_video_views_10_s": {"name": "post_video_views_10_s", "description": "The total number of views on the post longer than 10 seconds", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_video_views_10_s_autoplayed": {"name": "post_video_views_10_s_autoplayed", "description": "The total number of views on the post longer than 10 seconds when the post was played automatically", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_video_views_10_s_clicked_to_play": {"name": "post_video_views_10_s_clicked_to_play", "description": "The total number of views on the post longer than 10 seconds when the post was clicked to play", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_video_views_10_s_organic": {"name": "post_video_views_10_s_organic", "description": "The total number of organic views on the post longer than 10 seconds", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_video_views_10_s_paid": {"name": "post_video_views_10_s_paid", "description": "The total number of paid views on the post longer than 10 seconds", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_video_views_10_s_sound_on": {"name": "post_video_views_10_s_sound_on", "description": "The total number of views on the post longer than 10 seconds when the sound was on", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_video_views_15_s": {"name": "post_video_views_15_s", "description": "The total number of views on the post longer than 15 seconds", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_video_views_autoplayed": {"name": "post_video_views_autoplayed", "description": "The total number of views on the post when the post was played automatically", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_video_views_clicked_to_play": {"name": "post_video_views_clicked_to_play", "description": "The total number of views on the post when the post was clicked to play", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_video_views_organic": {"name": "post_video_views_organic", "description": "The total number of organic views on the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_video_views_paid": {"name": "post_video_views_paid", "description": "The total number of paid views on the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_video_views_sound_on": {"name": "post_video_views_sound_on", "description": "The total number of views on the post when the sound was on", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"facebook_pages\".\"lifetime_post_metrics_total\"", "created_at": 1671477152.155496}, "source.facebook_pages_source.facebook_pages.daily_page_metrics_total": {"fqn": ["facebook_pages_source", "facebook_pages", "daily_page_metrics_total"], "database": "postgres", "schema": "facebook_pages", "unique_id": "source.facebook_pages_source.facebook_pages.daily_page_metrics_total", "package_name": "facebook_pages_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/facebook_pages_source", "path": "models/src_facebook_pages.yml", "original_file_path": "models/src_facebook_pages.yml", "name": "daily_page_metrics_total", "source_name": "facebook_pages", "source_description": "", "loader": "Fivetran", "identifier": "daily_page_metrics_total", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents the lifetime post metrics for a Page as of a date.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The timestamp of when the data was last synced with Fivetran", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "The date of the metric", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_actions_post_reactions_anger_total": {"name": "page_actions_post_reactions_anger_total", "description": "The total amount of reactions with type 'anger' on posts from the Page", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_actions_post_reactions_haha_total": {"name": "page_actions_post_reactions_haha_total", "description": "The total amount of reactions with type 'haha' on posts from the Page", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_actions_post_reactions_like_total": {"name": "page_actions_post_reactions_like_total", "description": "The total amount of reactions with type 'like' on posts from the Page", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_actions_post_reactions_love_total": {"name": "page_actions_post_reactions_love_total", "description": "The total amount of reactions with type 'love' on posts from the Page", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_actions_post_reactions_sorry_total": {"name": "page_actions_post_reactions_sorry_total", "description": "The total amount of reactions with type 'sorry' on posts from the Page", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_actions_post_reactions_total": {"name": "page_actions_post_reactions_total", "description": "The total amount of reactions on posts from the Page", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_actions_post_reactions_wow_total": {"name": "page_actions_post_reactions_wow_total", "description": "The total amount of reactions with type 'wow' on posts from the Page", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_consumptions": {"name": "page_consumptions", "description": "The number of times people clicked on any Page content.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_content_activity": {"name": "page_content_activity", "description": "The number of people talking about the Page's stories.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_engaged_users": {"name": "page_engaged_users", "description": "The number of people who engaged with your Page. Engagement includes any click.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_fan_adds": {"name": "page_fan_adds", "description": "The number of fans added to the Page.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_fan_removes": {"name": "page_fan_removes", "description": "The number of fans removed from the Page.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_fans": {"name": "page_fans", "description": "The number of fans the page has.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_fans_online_per_day": {"name": "page_fans_online_per_day", "description": "The number of fans who are online per day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_id": {"name": "page_id", "description": "The ID of the Page", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_impressions": {"name": "page_impressions", "description": "The number of times any content from your Page or about your Page entered a person's screen.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_impressions_nonviral": {"name": "page_impressions_nonviral", "description": "The number of times any content from your Page entered a person's screen. This does not include content created about your Page with social information attached. Social information displays when a person's friend interacted with your Page, post or story. This includes when someone's friend likes or follows your Page, engages with a post, shares a photo of your Page and checks into your Page.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_impressions_organic": {"name": "page_impressions_organic", "description": "The number of times any post or story content from your Page or about your Page entered a person's screen through unpaid distribution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_impressions_paid": {"name": "page_impressions_paid", "description": "The number of times any post or story content from your Page or about your Page entered a person's screen through paid distribution such as an ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_impressions_viral": {"name": "page_impressions_viral", "description": "The number of times any content from your Page or about your Page entered a person's screen with social information attached. Social information displays when a person's friend interacted with your Page, post or story. This includes when someone's friend likes or follows your Page, engages with a post, shares a photo of your Page and checks into your Page.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_negative_feedback": {"name": "page_negative_feedback", "description": "The number of times people took a negative action (e.g., un-liked or hid a post).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_places_checkin_mobile": {"name": "page_places_checkin_mobile", "description": "The number of times people checked into a place using mobile phones.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_places_checkin_total": {"name": "page_places_checkin_total", "description": "The number of times people checked into a place.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_post_engagements": {"name": "page_post_engagements", "description": "The number of times people have engaged with your posts through reactions, comments, shares and more.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_posts_impressions": {"name": "page_posts_impressions", "description": "The number of times your Page's posts entered a person's screen. Posts include statuses, photos, links, videos and more.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_posts_impressions_nonviral": {"name": "page_posts_impressions_nonviral", "description": "The number of times your Page's posts entered a person's screen. This does not include content created about your Page with social information attached. Social information displays when a person's friend interacted with you Page or post. This includes when someone's friend likes or follows your Page, engages with a post, shares a photo of your Page and checks into your Page.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_posts_impressions_organic": {"name": "page_posts_impressions_organic", "description": "The number of times your Page's posts entered a person's screen through unpaid distribution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_posts_impressions_paid": {"name": "page_posts_impressions_paid", "description": "The number of times your Page's posts entered a person's screen through paid distribution such as an ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_posts_impressions_viral": {"name": "page_posts_impressions_viral", "description": "The number of times your Page's posts entered a person's screen with social information attached. Social information displays when a person's friend interacted with you Page or post. This includes when someone's friend likes or follows your Page, engages with a post, shares a photo of your Page and checks into your Page.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_total_actions": {"name": "page_total_actions", "description": "The number of clicks on your Page's contact info and call-to-action button.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_video_complete_views_30_s": {"name": "page_video_complete_views_30_s", "description": "The number of times your Page's videos played for at least 30 seconds, or for nearly their total length if they're shorter than 30 seconds. During a single instance of a video playing, we'll exclude any time spent replaying the video.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_video_complete_views_30_s_autoplayed": {"name": "page_video_complete_views_30_s_autoplayed", "description": "The number of times your Page's automatically played videos played for at least 30 seconds, or for nearly their total length if they're shorter than 30 seconds. During a single instance of a video playing, we'll exclude any time spent replaying the video.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_video_complete_views_30_s_click_to_play": {"name": "page_video_complete_views_30_s_click_to_play", "description": "The number of times your Page's videos played for at least 30 seconds, or for nearly their total length if they're shorter than 30 seconds, after people clicked play. During a single instance of a video playing, we'll exclude any time spent replaying the video.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_video_complete_views_30_s_organic": {"name": "page_video_complete_views_30_s_organic", "description": "The number of times your Page's videos played for at least 30 seconds, or for nearly their total length if they're shorter than 30 seconds, by organic reach. During a single instance of a video playing, we'll exclude any time spent replaying the video.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_video_complete_views_30_s_paid": {"name": "page_video_complete_views_30_s_paid", "description": "The number of times your Page's promoted videos played for at least 30 seconds, or for nearly their total length if they're shorter than 30 seconds. For each impression of a video, we'll count video views separately and exclude any time spent replaying the video.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_video_complete_views_30_s_repeat_views": {"name": "page_video_complete_views_30_s_repeat_views", "description": "The number of times your Page's videos replayed for at least 30 seconds, or for nearly their total length if they're shorter than 30 seconds.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_video_repeat_views": {"name": "page_video_repeat_views", "description": "The number of times your Page's videos were replayed for at least 3 seconds, or for nearly their total length if they're shorter than 3 seconds.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_video_view_time": {"name": "page_video_view_time", "description": "The total time, in milliseconds, people viewed your Page's video.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_video_views": {"name": "page_video_views", "description": "The number of times your Page's videos played for at least 3 seconds, or for nearly their total length if they're shorter than 3 seconds. During a single instance of a video playing, we'll exclude any time spent replaying the video.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_video_views_10_s": {"name": "page_video_views_10_s", "description": "The number of times your Page's videos played for at least 10 seconds, or for nearly their total length if they're shorter than 10 seconds. During a single instance of a video playing, we'll exclude any time spent replaying the video.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_video_views_10_s_autoplayed": {"name": "page_video_views_10_s_autoplayed", "description": "The number of times your Page's automatically played videos played for at least 10 seconds, or for nearly their total length if they're shorter than 10 seconds. During a single instance of a video playing, we'll exclude any time spent replaying the video.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_video_views_10_s_click_to_play": {"name": "page_video_views_10_s_click_to_play", "description": "The number of times your Page's videos played for at least 10 seconds, or for nearly their total length if they're shorter than 10 seconds, after people clicked play. During a single instance of a video playing, we'll exclude any time spent replaying the video.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_video_views_10_s_organic": {"name": "page_video_views_10_s_organic", "description": "The number of times your Page's videos played for at least 10 seconds, or for nearly their total length if they're shorter than 10 seconds, by organic reach. During a single instance of a video playing, we'll exclude any time spent replaying the video.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_video_views_10_s_paid": {"name": "page_video_views_10_s_paid", "description": "The number of times your Page's promoted videos played for at least 10 seconds, or for nearly their total length if they're shorter than 10 seconds. For each impression of a video, we'll count video views separately and exclude any time spent replaying the video.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_video_views_10_s_repeat": {"name": "page_video_views_10_s_repeat", "description": "The number of times your Page's videos were replayed for at least 10 seconds, or for nearly their total length if they're shorter than 10 seconds.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_video_views_autoplayed": {"name": "page_video_views_autoplayed", "description": "The number of times your Page's automatically played videos played for at least 3 seconds, or for nearly their total length if they're shorter than 3 seconds. During a single instance of a video playing, we'll exclude any time spent replaying the video.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_video_views_click_to_play": {"name": "page_video_views_click_to_play", "description": "The number of times your Page's videos played for at least 3 seconds, or for nearly their total length if they're shorter than 3 seconds, after people clicked play. During a single instance of a video playing, we'll exclude any time spent replaying the video.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_video_views_organic": {"name": "page_video_views_organic", "description": "The number of times your Page's videos played for at least 3 seconds, or for nearly their total length if they're shorter than 3 seconds, by organic reach. During a single instance of a video playing, we'll exclude any time spent replaying the video.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_video_views_paid": {"name": "page_video_views_paid", "description": "The number of times your Page's promoted videos played for at least 3 seconds, or for nearly their total length if they're shorter than 3 seconds. For each impression of a video, we'll count video views separately and exclude any time spent replaying the video.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_views_external_referrals": {"name": "page_views_external_referrals", "description": "Top referring external domains sending traffic to your Page.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_views_logged_in_total": {"name": "page_views_logged_in_total", "description": "The number of times a Page's profile has been viewed by people logged in to Facebook.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_views_logout": {"name": "page_views_logout", "description": "The number of times a Page's profile has been viewed by people not logged in to Facebook.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_views_total": {"name": "page_views_total", "description": "The number of times a Page's profile has been viewed by people not logged in to Facebook.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"facebook_pages\".\"daily_page_metrics_total\"", "created_at": 1671477152.155627}, "source.instagram_business_source.instagram_business.media_history": {"fqn": ["instagram_business_source", "instagram_business", "media_history"], "database": "postgres", "schema": "instagram_business", "unique_id": "source.instagram_business_source.instagram_business.media_history", "package_name": "instagram_business_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/instagram_business_source", "path": "models/src_instagram_business.yml", "original_file_path": "models/src_instagram_business.yml", "name": "media_history", "source_name": "instagram_business", "source_description": "", "loader": "Fivetran", "identifier": "media_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a version of an Instagram post or story", "columns": {"_fivetran_id": {"name": "_fivetran_id", "description": "Fivetran's internal ID for this record", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "When this record was last synced with Fivetran", "meta": {}, "data_type": null, "quote": null, "tags": []}, "caption": {"name": "caption", "description": "The caption of the post or story", "meta": {}, "data_type": null, "quote": null, "tags": []}, "carousel_album_id": {"name": "carousel_album_id", "description": "The ID of the carousel album this post or story belongs to", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_time": {"name": "created_time", "description": "The timestamp this post or story was created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The media ID of this post or story", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ig_id": {"name": "ig_id", "description": "The Instagram media ID of this post or story", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_comment_enabled": {"name": "is_comment_enabled", "description": "Whether comments are enabled for this post or story", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_story": {"name": "is_story", "description": "Whether this is a story", "meta": {}, "data_type": null, "quote": null, "tags": []}, "media_type": {"name": "media_type", "description": "Media type. Can be CAROUSEL_ALBUM, IMAGE, or VIDEO.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "media_url": {"name": "media_url", "description": "Media URL. Will be omitted from responses if the media contains copyrighted material, or has been flagged for a copyright violation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "permalink": {"name": "permalink", "description": "Permanent URL to the media.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shortcode": {"name": "shortcode", "description": "Shortcode to the media.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "thumbnail_url": {"name": "thumbnail_url", "description": "Media thumbnail URL. Only available on VIDEO media.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "ID of the user who posted this post or story", "meta": {}, "data_type": null, "quote": null, "tags": []}, "username": {"name": "username", "description": "Username of user who created the media.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"instagram_business\".\"media_history\"", "created_at": 1671477152.155701}, "source.instagram_business_source.instagram_business.media_insights": {"fqn": ["instagram_business_source", "instagram_business", "media_insights"], "database": "postgres", "schema": "instagram_business", "unique_id": "source.instagram_business_source.instagram_business.media_insights", "package_name": "instagram_business_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/instagram_business_source", "path": "models/src_instagram_business.yml", "original_file_path": "models/src_instagram_business.yml", "name": "media_insights", "source_name": "instagram_business", "source_description": "", "loader": "Fivetran", "identifier": "media_insights", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents the daily performance of a post or story.", "columns": {"_fivetran_id": {"name": "_fivetran_id", "description": "Fivetran's internal ID for this record", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "When this record was last synced with Fivetran", "meta": {}, "data_type": null, "quote": null, "tags": []}, "carousel_album_engagement": {"name": "carousel_album_engagement", "description": "Total number of likes and IG Comments on the album IG Media object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "carousel_album_impressions": {"name": "carousel_album_impressions", "description": "Total number of times the album IG Media object has been seen", "meta": {}, "data_type": null, "quote": null, "tags": []}, "carousel_album_reach": {"name": "carousel_album_reach", "description": "Total number of unique Instagram accounts that have seen the album IG Media object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "carousel_album_saved": {"name": "carousel_album_saved", "description": "Total number of unique Instagram accounts that have saved the album IG Media object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "carousel_album_video_views": {"name": "carousel_album_video_views", "description": "Total number of unique Instagram accounts that have viewed video IG Media within the album.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "comment_count": {"name": "comment_count", "description": "Total number of comments on the IG Media object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The media ID of this post or story", "meta": {}, "data_type": null, "quote": null, "tags": []}, "like_count": {"name": "like_count", "description": "Total number of likes on the IG Media object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "story_exits": {"name": "story_exits", "description": "Number of times someone exited the story IG Media object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "story_impressions": {"name": "story_impressions", "description": "Total number of times the story IG Media object has been seen.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "story_reach": {"name": "story_reach", "description": "Total number of unique Instagram accounts that have seen the story IG Media object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "story_replies": {"name": "story_replies", "description": "Total number of replies to the story IG Media object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "story_taps_back": {"name": "story_taps_back", "description": "Total number of taps to see this story IG Media object's next photo or video.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "story_taps_forward": {"name": "story_taps_forward", "description": "Total number of taps to see this story IG Media object's previous photo or video.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_photo_engagement": {"name": "video_photo_engagement", "description": "Total number of likes and IG Comments on the video IG Media object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_photo_impressions": {"name": "video_photo_impressions", "description": "Total number of times the video IG Media object has been seen.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_photo_reach": {"name": "video_photo_reach", "description": "Total number of unique Instagram accounts that have seen the video IG Media object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_photo_saved": {"name": "video_photo_saved", "description": "Total number of unique Instagram accounts that have saved the video IG Media object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "video_views": {"name": "video_views", "description": "Total number of times the video IG Media object has been viewed.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"instagram_business\".\"media_insights\"", "created_at": 1671477152.155776}, "source.instagram_business_source.instagram_business.user_history": {"fqn": ["instagram_business_source", "instagram_business", "user_history"], "database": "postgres", "schema": "instagram_business", "unique_id": "source.instagram_business_source.instagram_business.user_history", "package_name": "instagram_business_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/instagram_business_source", "path": "models/src_instagram_business.yml", "original_file_path": "models/src_instagram_business.yml", "name": "user_history", "source_name": "instagram_business", "source_description": "", "loader": "Fivetran", "identifier": "user_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a version of an Instagram user.", "columns": {"_fivetran_id": {"name": "_fivetran_id", "description": "Fivetran's internal ID for this record", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "When this record was last synced with Fivetran", "meta": {}, "data_type": null, "quote": null, "tags": []}, "followers_count": {"name": "followers_count", "description": "Total number of followers of this user.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "follows_count": {"name": "follows_count", "description": "Total number of users this user follows.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The user ID of this user.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ig_id": {"name": "ig_id", "description": "The Instagram user ID of this user.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "media_count": {"name": "media_count", "description": "Total number of media this user has posted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of this user.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "username": {"name": "username", "description": "The username of this user.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "website": {"name": "website", "description": "The website linked in the profile of this user.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"instagram_business\".\"user_history\"", "created_at": 1671477152.15584}}, "macros": {"macro.dbt_postgres.postgres__current_timestamp": {"unique_id": "macro.dbt_postgres.postgres__current_timestamp", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "name": "postgres__current_timestamp", "macro_sql": "{% macro postgres__current_timestamp() -%}\n    now()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.74495, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_string_as_time": {"unique_id": "macro.dbt_postgres.postgres__snapshot_string_as_time", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "name": "postgres__snapshot_string_as_time", "macro_sql": "{% macro postgres__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp without time zone\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.745183, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_get_time": {"unique_id": "macro.dbt_postgres.postgres__snapshot_get_time", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "name": "postgres__snapshot_get_time", "macro_sql": "{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.745304, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp_backcompat": {"unique_id": "macro.dbt_postgres.postgres__current_timestamp_backcompat", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "name": "postgres__current_timestamp_backcompat", "macro_sql": "{% macro postgres__current_timestamp_backcompat() %}\n    current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.745418, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat": {"unique_id": "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "name": "postgres__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro postgres__current_timestamp_in_utc_backcompat() %}\n    (current_timestamp at time zone 'utc')::{{ type_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.745535, "supported_languages": null}, "macro.dbt_postgres.postgres__get_catalog": {"unique_id": "macro.dbt_postgres.postgres__get_catalog", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "postgres__get_catalog", "macro_sql": "{% macro postgres__get_catalog(information_schema, schemas) -%}\n\n  {%- call statement('catalog', fetch_result=True) -%}\n    {#\n      If the user has multiple databases set and the first one is wrong, this will fail.\n      But we won't fail in the case where there are multiple quoting-difference-only dbs, which is better.\n    #}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    select\n        '{{ database }}' as table_database,\n        sch.nspname as table_schema,\n        tbl.relname as table_name,\n        case tbl.relkind\n            when 'v' then 'VIEW'\n            else 'BASE TABLE'\n        end as table_type,\n        tbl_desc.description as table_comment,\n        col.attname as column_name,\n        col.attnum as column_index,\n        pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n        col_desc.description as column_comment,\n        pg_get_userbyid(tbl.relowner) as table_owner\n\n    from pg_catalog.pg_namespace sch\n    join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n    join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n    left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n    left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n\n    where (\n        {%- for schema in schemas -%}\n          upper(sch.nspname) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      and not pg_is_other_temp_schema(sch.oid) -- not a temporary schema belonging to another session\n      and tbl.relpersistence in ('p', 'u') -- [p]ermanent table or [u]nlogged table. Exclude [t]emporary tables\n      and tbl.relkind in ('r', 'v', 'f', 'p') -- o[r]dinary table, [v]iew, [f]oreign table, [p]artitioned table. Other values are [i]ndex, [S]equence, [c]omposite type, [t]OAST table, [m]aterialized view\n      and col.attnum > 0 -- negative numbers are used for system columns such as oid\n      and not col.attisdropped -- column as not been dropped\n\n    order by\n        sch.nspname,\n        tbl.relname,\n        col.attnum\n\n  {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.746725, "supported_languages": null}, "macro.dbt_postgres.postgres_get_relations": {"unique_id": "macro.dbt_postgres.postgres_get_relations", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "name": "postgres_get_relations", "macro_sql": "{% macro postgres_get_relations () -%}\n\n  {#\n      -- in pg_depend, objid is the dependent, refobjid is the referenced object\n      --  > a pg_depend entry indicates that the referenced object cannot be\n      --  > dropped without also dropping the dependent object.\n  #}\n\n  {%- call statement('relations', fetch_result=True) -%}\n    with relation as (\n        select\n            pg_rewrite.ev_class as class,\n            pg_rewrite.oid as id\n        from pg_rewrite\n    ),\n    class as (\n        select\n            oid as id,\n            relname as name,\n            relnamespace as schema,\n            relkind as kind\n        from pg_class\n    ),\n    dependency as (\n        select distinct\n            pg_depend.objid as id,\n            pg_depend.refobjid as ref\n        from pg_depend\n    ),\n    schema as (\n        select\n            pg_namespace.oid as id,\n            pg_namespace.nspname as name\n        from pg_namespace\n        where nspname != 'information_schema' and nspname not like 'pg\\_%'\n    ),\n    referenced as (\n        select\n            relation.id AS id,\n            referenced_class.name ,\n            referenced_class.schema ,\n            referenced_class.kind\n        from relation\n        join class as referenced_class on relation.class=referenced_class.id\n        where referenced_class.kind in ('r', 'v')\n    ),\n    relationships as (\n        select\n            referenced.name as referenced_name,\n            referenced.schema as referenced_schema_id,\n            dependent_class.name as dependent_name,\n            dependent_class.schema as dependent_schema_id,\n            referenced.kind as kind\n        from referenced\n        join dependency on referenced.id=dependency.id\n        join class as dependent_class on dependency.ref=dependent_class.id\n        where\n            (referenced.name != dependent_class.name or\n             referenced.schema != dependent_class.schema)\n    )\n\n    select\n        referenced_schema.name as referenced_schema,\n        relationships.referenced_name as referenced_name,\n        dependent_schema.name as dependent_schema,\n        relationships.dependent_name as dependent_name\n    from relationships\n    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id\n    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id\n    group by referenced_schema, referenced_name, dependent_schema, dependent_name\n    order by referenced_schema, referenced_name, dependent_schema, dependent_name;\n\n  {%- endcall -%}\n\n  {{ return(load_result('relations').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.7474601, "supported_languages": null}, "macro.dbt_postgres.postgres__create_table_as": {"unique_id": "macro.dbt_postgres.postgres__create_table_as", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__create_table_as", "macro_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.752828, "supported_languages": null}, "macro.dbt_postgres.postgres__get_create_index_sql": {"unique_id": "macro.dbt_postgres.postgres__get_create_index_sql", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__get_create_index_sql", "macro_sql": "{% macro postgres__get_create_index_sql(relation, index_dict) -%}\n  {%- set index_config = adapter.parse_index(index_dict) -%}\n  {%- set comma_separated_columns = \", \".join(index_config.columns) -%}\n  {%- set index_name = index_config.render(relation) -%}\n\n  create {% if index_config.unique -%}\n    unique\n  {%- endif %} index if not exists\n  \"{{ index_name }}\"\n  on {{ relation }} {% if index_config.type -%}\n    using {{ index_config.type }}\n  {%- endif %}\n  ({{ comma_separated_columns }});\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.753328, "supported_languages": null}, "macro.dbt_postgres.postgres__create_schema": {"unique_id": "macro.dbt_postgres.postgres__create_schema", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__create_schema", "macro_sql": "{% macro postgres__create_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier().include(database=False) }}\n  {%- endcall -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.753637, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_schema": {"unique_id": "macro.dbt_postgres.postgres__drop_schema", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__drop_schema", "macro_sql": "{% macro postgres__drop_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier().include(database=False) }} cascade\n  {%- endcall -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.7539442, "supported_languages": null}, "macro.dbt_postgres.postgres__get_columns_in_relation": {"unique_id": "macro.dbt_postgres.postgres__get_columns_in_relation", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__get_columns_in_relation", "macro_sql": "{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.7544, "supported_languages": null}, "macro.dbt_postgres.postgres__list_relations_without_caching": {"unique_id": "macro.dbt_postgres.postgres__list_relations_without_caching", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__list_relations_without_caching", "macro_sql": "{% macro postgres__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.754872, "supported_languages": null}, "macro.dbt_postgres.postgres__information_schema_name": {"unique_id": "macro.dbt_postgres.postgres__information_schema_name", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__information_schema_name", "macro_sql": "{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.755039, "supported_languages": null}, "macro.dbt_postgres.postgres__list_schemas": {"unique_id": "macro.dbt_postgres.postgres__list_schemas", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__list_schemas", "macro_sql": "{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.7553768, "supported_languages": null}, "macro.dbt_postgres.postgres__check_schema_exists": {"unique_id": "macro.dbt_postgres.postgres__check_schema_exists", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__check_schema_exists", "macro_sql": "{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if information_schema.database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.755751, "supported_languages": null}, "macro.dbt_postgres.postgres__make_relation_with_suffix": {"unique_id": "macro.dbt_postgres.postgres__make_relation_with_suffix", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__make_relation_with_suffix", "macro_sql": "{% macro postgres__make_relation_with_suffix(base_relation, suffix, dstring) %}\n    {% if dstring %}\n      {% set dt = modules.datetime.datetime.now() %}\n      {% set dtstring = dt.strftime(\"%H%M%S%f\") %}\n      {% set suffix = suffix ~ dtstring %}\n    {% endif %}\n    {% set suffix_length = suffix|length %}\n    {% set relation_max_name_length = base_relation.relation_max_name_length() %}\n    {% if suffix_length > relation_max_name_length %}\n        {% do exceptions.raise_compiler_error('Relation suffix is too long (' ~ suffix_length ~ ' characters). Maximum length is ' ~ relation_max_name_length ~ ' characters.') %}\n    {% endif %}\n    {% set identifier = base_relation.identifier[:relation_max_name_length - suffix_length] ~ suffix %}\n\n    {{ return(base_relation.incorporate(path={\"identifier\": identifier })) }}\n\n  {% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.7565749, "supported_languages": null}, "macro.dbt_postgres.postgres__make_intermediate_relation": {"unique_id": "macro.dbt_postgres.postgres__make_intermediate_relation", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__make_intermediate_relation", "macro_sql": "{% macro postgres__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(postgres__make_relation_with_suffix(base_relation, suffix, dstring=False)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.756768, "supported_languages": null}, "macro.dbt_postgres.postgres__make_temp_relation": {"unique_id": "macro.dbt_postgres.postgres__make_temp_relation", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__make_temp_relation", "macro_sql": "{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set temp_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=True) %}\n    {{ return(temp_relation.incorporate(path={\"schema\": none,\n                                              \"database\": none})) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.757073, "supported_languages": null}, "macro.dbt_postgres.postgres__make_backup_relation": {"unique_id": "macro.dbt_postgres.postgres__make_backup_relation", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__make_backup_relation", "macro_sql": "{% macro postgres__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {% set backup_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=False) %}\n    {{ return(backup_relation.incorporate(type=backup_relation_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.7573419, "supported_languages": null}, "macro.dbt_postgres.postgres_escape_comment": {"unique_id": "macro.dbt_postgres.postgres_escape_comment", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres_escape_comment", "macro_sql": "{% macro postgres_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.757746, "supported_languages": null}, "macro.dbt_postgres.postgres__alter_relation_comment": {"unique_id": "macro.dbt_postgres.postgres__alter_relation_comment", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__alter_relation_comment", "macro_sql": "{% macro postgres__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = postgres_escape_comment(comment) %}\n  comment on {{ relation.type }} {{ relation }} is {{ escaped_comment }};\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.7579598, "supported_languages": null}, "macro.dbt_postgres.postgres__alter_column_comment": {"unique_id": "macro.dbt_postgres.postgres__alter_column_comment", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__alter_column_comment", "macro_sql": "{% macro postgres__alter_column_comment(relation, column_dict) %}\n  {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n  {% for column_name in column_dict if (column_name in existing_columns) %}\n    {% set comment = column_dict[column_name]['description'] %}\n    {% set escaped_comment = postgres_escape_comment(comment) %}\n    comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is {{ escaped_comment }};\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.758537, "supported_languages": null}, "macro.dbt_postgres.postgres__get_show_grant_sql": {"unique_id": "macro.dbt_postgres.postgres__get_show_grant_sql", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__get_show_grant_sql", "macro_sql": "\n\n{%- macro postgres__get_show_grant_sql(relation) -%}\n  select grantee, privilege_type\n  from {{ relation.information_schema('role_table_grants') }}\n      where grantor = current_role\n        and grantee != current_role\n        and table_schema = '{{ relation.schema }}'\n        and table_name = '{{ relation.identifier }}'\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.758743, "supported_languages": null}, "macro.dbt_postgres.postgres__copy_grants": {"unique_id": "macro.dbt_postgres.postgres__copy_grants", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__copy_grants", "macro_sql": "{% macro postgres__copy_grants() %}\n    {{ return(False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.758857, "supported_languages": null}, "macro.dbt_postgres.postgres__get_incremental_default_sql": {"unique_id": "macro.dbt_postgres.postgres__get_incremental_default_sql", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/materializations/incremental_strategies.sql", "original_file_path": "macros/materializations/incremental_strategies.sql", "name": "postgres__get_incremental_default_sql", "macro_sql": "{% macro postgres__get_incremental_default_sql(arg_dict) %}\n\n  {% if arg_dict[\"unique_key\"] %}\n    {% do return(get_incremental_delete_insert_sql(arg_dict)) %}\n  {% else %}\n    {% do return(get_incremental_append_sql(arg_dict)) %}\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_incremental_delete_insert_sql", "macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.7593632, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_merge_sql": {"unique_id": "macro.dbt_postgres.postgres__snapshot_merge_sql", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/materializations/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot_merge.sql", "name": "postgres__snapshot_merge_sql", "macro_sql": "{% macro postgres__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    update {{ target }}\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = {{ target }}.dbt_scd_id::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      and {{ target }}.dbt_valid_to is null;\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.760113, "supported_languages": null}, "macro.dbt_postgres.postgres__dateadd": {"unique_id": "macro.dbt_postgres.postgres__dateadd", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.760401, "supported_languages": null}, "macro.dbt_postgres.postgres__listagg": {"unique_id": "macro.dbt_postgres.postgres__listagg", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "postgres__listagg", "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.761058, "supported_languages": null}, "macro.dbt_postgres.postgres__datediff": {"unique_id": "macro.dbt_postgres.postgres__datediff", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.764189, "supported_languages": null}, "macro.dbt_postgres.postgres__any_value": {"unique_id": "macro.dbt_postgres.postgres__any_value", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%}\n\n    min({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.7644181, "supported_languages": null}, "macro.dbt_postgres.postgres__last_day": {"unique_id": "macro.dbt_postgres.postgres__last_day", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd('month', '3', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc", "macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.764971, "supported_languages": null}, "macro.dbt_postgres.postgres__split_part": {"unique_id": "macro.dbt_postgres.postgres__split_part", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "postgres__split_part", "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__split_part", "macro.dbt._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.765429, "supported_languages": null}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.7665122, "supported_languages": null}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.7667031, "supported_languages": null}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.7668421, "supported_languages": null}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.766979, "supported_languages": null}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.767113, "supported_languages": null}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.767532, "supported_languages": null}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.7678201, "supported_languages": null}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.768113, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.768592, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.768851, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.772152, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.77232, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.7725382, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.773242, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.773428, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.77364, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_code'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.775028, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.776337, "supported_languages": null}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.7801359, "supported_languages": null}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.7804291, "supported_languages": null}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.7806091, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.780813, "supported_languages": null}, "macro.dbt.get_true_sql": {"unique_id": "macro.dbt.get_true_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.781034, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"unique_id": "macro.dbt.default__get_true_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.781163, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.781386, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.78225, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.782441, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.782688, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.7831092, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.7893791, "supported_languages": ["sql"]}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.791661, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.792232, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.792563, "supported_languages": null}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.7930439, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.793408, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.794944, "supported_languages": null}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.7954738, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.7961211, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"unique_id": "macro.dbt.get_merge_update_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.796351, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"unique_id": "macro.dbt.default__get_merge_update_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.797046, "supported_languages": null}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.801173, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.8027442, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.802977, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            );\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.8036852, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.803939, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.804631, "supported_languages": null}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.805381, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"unique_id": "macro.dbt.get_incremental_append_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.806282, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"unique_id": "macro.dbt.default__get_incremental_append_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.806528, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"unique_id": "macro.dbt.get_incremental_delete_insert_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.8067179, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.806973, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"unique_id": "macro.dbt.get_incremental_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.807156, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"unique_id": "macro.dbt.default__get_incremental_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.807408, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.807589, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"predicates\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.8078542, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"unique_id": "macro.dbt.get_incremental_default_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.808037, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"unique_id": "macro.dbt.default__get_incremental_default_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.8081868, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"unique_id": "macro.dbt.get_insert_into_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.8084621, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.8131928, "supported_languages": ["sql"]}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.8182058, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.819414, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.820597, "supported_languages": null}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.821443, "supported_languages": null}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.824137, "supported_languages": ["sql"]}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.824781, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.82497, "supported_languages": null}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.825407, "supported_languages": null}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.825825, "supported_languages": null}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.8284202, "supported_languages": ["sql"]}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.828809, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.829033, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.8305979, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.831029, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.8311858, "supported_languages": null}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.83136, "supported_languages": null}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.8316102, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.834835, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.839373, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.840291, "supported_languages": null}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.840517, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.840985, "supported_languages": null}, "macro.dbt.get_csv_sql": {"unique_id": "macro.dbt.get_csv_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.841175, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"unique_id": "macro.dbt.default__get_csv_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.8413, "supported_languages": null}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.841433, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.841542, "supported_languages": null}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.8417091, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.841822, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.84228, "supported_languages": null}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.842459, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.8436968, "supported_languages": null}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.844161, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.844387, "supported_languages": null}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.844954, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.8452082, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.845488, "supported_languages": null}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.845933, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.846177, "supported_languages": null}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.8465931, "supported_languages": null}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.846955, "supported_languages": null}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.84726, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.847868, "supported_languages": null}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.849347, "supported_languages": null}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.8499682, "supported_languages": null}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.850255, "supported_languages": null}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.851983, "supported_languages": null}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.85315, "supported_languages": null}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.853894, "supported_languages": null}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.854122, "supported_languages": null}, "macro.dbt.except": {"unique_id": "macro.dbt.except", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.854431, "supported_languages": null}, "macro.dbt.default__except": {"unique_id": "macro.dbt.default__except", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.854505, "supported_languages": null}, "macro.dbt.replace": {"unique_id": "macro.dbt.replace", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.8548899, "supported_languages": null}, "macro.dbt.default__replace": {"unique_id": "macro.dbt.default__replace", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.855051, "supported_languages": null}, "macro.dbt.concat": {"unique_id": "macro.dbt.concat", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.855357, "supported_languages": null}, "macro.dbt.default__concat": {"unique_id": "macro.dbt.default__concat", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.855488, "supported_languages": null}, "macro.dbt.length": {"unique_id": "macro.dbt.length", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.855804, "supported_languages": null}, "macro.dbt.default__length": {"unique_id": "macro.dbt.default__length", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.855905, "supported_languages": null}, "macro.dbt.dateadd": {"unique_id": "macro.dbt.dateadd", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.8563, "supported_languages": null}, "macro.dbt.default__dateadd": {"unique_id": "macro.dbt.default__dateadd", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.856458, "supported_languages": null}, "macro.dbt.intersect": {"unique_id": "macro.dbt.intersect", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.856745, "supported_languages": null}, "macro.dbt.default__intersect": {"unique_id": "macro.dbt.default__intersect", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.856821, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"unique_id": "macro.dbt.escape_single_quotes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.8571498, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"unique_id": "macro.dbt.default__escape_single_quotes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.857288, "supported_languages": null}, "macro.dbt.right": {"unique_id": "macro.dbt.right", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.857643, "supported_languages": null}, "macro.dbt.default__right": {"unique_id": "macro.dbt.default__right", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.857845, "supported_languages": null}, "macro.dbt.listagg": {"unique_id": "macro.dbt.listagg", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.858499, "supported_languages": null}, "macro.dbt.default__listagg": {"unique_id": "macro.dbt.default__listagg", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.858898, "supported_languages": null}, "macro.dbt.datediff": {"unique_id": "macro.dbt.datediff", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.8592908, "supported_languages": null}, "macro.dbt.default__datediff": {"unique_id": "macro.dbt.default__datediff", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.859456, "supported_languages": null}, "macro.dbt.safe_cast": {"unique_id": "macro.dbt.safe_cast", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.859801, "supported_languages": null}, "macro.dbt.default__safe_cast": {"unique_id": "macro.dbt.default__safe_cast", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.8599339, "supported_languages": null}, "macro.dbt.hash": {"unique_id": "macro.dbt.hash", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.860254, "supported_languages": null}, "macro.dbt.default__hash": {"unique_id": "macro.dbt.default__hash", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.8604102, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"unique_id": "macro.dbt.cast_bool_to_text", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.860717, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"unique_id": "macro.dbt.default__cast_bool_to_text", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.860867, "supported_languages": null}, "macro.dbt.any_value": {"unique_id": "macro.dbt.any_value", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.861175, "supported_languages": null}, "macro.dbt.default__any_value": {"unique_id": "macro.dbt.default__any_value", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.861278, "supported_languages": null}, "macro.dbt.position": {"unique_id": "macro.dbt.position", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.861637, "supported_languages": null}, "macro.dbt.default__position": {"unique_id": "macro.dbt.default__position", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.861768, "supported_languages": null}, "macro.dbt.string_literal": {"unique_id": "macro.dbt.string_literal", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.8620741, "supported_languages": null}, "macro.dbt.default__string_literal": {"unique_id": "macro.dbt.default__string_literal", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.862175, "supported_languages": null}, "macro.dbt.type_string": {"unique_id": "macro.dbt.type_string", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.863134, "supported_languages": null}, "macro.dbt.default__type_string": {"unique_id": "macro.dbt.default__type_string", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.863282, "supported_languages": null}, "macro.dbt.type_timestamp": {"unique_id": "macro.dbt.type_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.863504, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"unique_id": "macro.dbt.default__type_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.863651, "supported_languages": null}, "macro.dbt.type_float": {"unique_id": "macro.dbt.type_float", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.863809, "supported_languages": null}, "macro.dbt.default__type_float": {"unique_id": "macro.dbt.default__type_float", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.8639529, "supported_languages": null}, "macro.dbt.type_numeric": {"unique_id": "macro.dbt.type_numeric", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.864109, "supported_languages": null}, "macro.dbt.default__type_numeric": {"unique_id": "macro.dbt.default__type_numeric", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.864293, "supported_languages": null}, "macro.dbt.type_bigint": {"unique_id": "macro.dbt.type_bigint", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.86445, "supported_languages": null}, "macro.dbt.default__type_bigint": {"unique_id": "macro.dbt.default__type_bigint", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.864594, "supported_languages": null}, "macro.dbt.type_int": {"unique_id": "macro.dbt.type_int", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.864753, "supported_languages": null}, "macro.dbt.default__type_int": {"unique_id": "macro.dbt.default__type_int", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.8648908, "supported_languages": null}, "macro.dbt.type_boolean": {"unique_id": "macro.dbt.type_boolean", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.865039, "supported_languages": null}, "macro.dbt.default__type_boolean": {"unique_id": "macro.dbt.default__type_boolean", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.865182, "supported_languages": null}, "macro.dbt.array_concat": {"unique_id": "macro.dbt.array_concat", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "name": "array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.86554, "supported_languages": null}, "macro.dbt.default__array_concat": {"unique_id": "macro.dbt.default__array_concat", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "name": "default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.86567, "supported_languages": null}, "macro.dbt.bool_or": {"unique_id": "macro.dbt.bool_or", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.8659809, "supported_languages": null}, "macro.dbt.default__bool_or": {"unique_id": "macro.dbt.default__bool_or", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.866082, "supported_languages": null}, "macro.dbt.last_day": {"unique_id": "macro.dbt.last_day", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.866472, "supported_languages": null}, "macro.dbt.default_last_day": {"unique_id": "macro.dbt.default_last_day", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.866731, "supported_languages": null}, "macro.dbt.default__last_day": {"unique_id": "macro.dbt.default__last_day", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.866869, "supported_languages": null}, "macro.dbt.split_part": {"unique_id": "macro.dbt.split_part", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.867423, "supported_languages": null}, "macro.dbt.default__split_part": {"unique_id": "macro.dbt.default__split_part", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.867584, "supported_languages": null}, "macro.dbt._split_part_negative": {"unique_id": "macro.dbt._split_part_negative", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.868022, "supported_languages": null}, "macro.dbt.date_trunc": {"unique_id": "macro.dbt.date_trunc", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.868365, "supported_languages": null}, "macro.dbt.default__date_trunc": {"unique_id": "macro.dbt.default__date_trunc", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.868489, "supported_languages": null}, "macro.dbt.array_construct": {"unique_id": "macro.dbt.array_construct", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "name": "array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.8689148, "supported_languages": null}, "macro.dbt.default__array_construct": {"unique_id": "macro.dbt.default__array_construct", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "name": "default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.86915, "supported_languages": null}, "macro.dbt.array_append": {"unique_id": "macro.dbt.array_append", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "name": "array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.869496, "supported_languages": null}, "macro.dbt.default__array_append": {"unique_id": "macro.dbt.default__array_append", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "name": "default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.8696241, "supported_languages": null}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.8700428, "supported_languages": null}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.870264, "supported_languages": null}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.870442, "supported_languages": null}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.870631, "supported_languages": null}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.871187, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.8713448, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.871495, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.871596, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"unique_id": "macro.dbt.current_timestamp_backcompat", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.8717551, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"unique_id": "macro.dbt.default__current_timestamp_backcompat", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.8718321, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.871992, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_postgres.postgres__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.872152, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.872677, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.872882, "supported_languages": null}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.8730361, "supported_languages": null}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.873429, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"unique_id": "macro.dbt.make_intermediate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.8764951, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"unique_id": "macro.dbt.default__make_intermediate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.876661, "supported_languages": null}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.876875, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.8771641, "supported_languages": null}, "macro.dbt.make_backup_relation": {"unique_id": "macro.dbt.make_backup_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.877404, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"unique_id": "macro.dbt.default__make_backup_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.877714, "supported_languages": null}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.877894, "supported_languages": null}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.878098, "supported_languages": null}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.8782778, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.878432, "supported_languages": null}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.878624, "supported_languages": null}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.878904, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.879153, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.879689, "supported_languages": null}, "macro.dbt.load_cached_relation": {"unique_id": "macro.dbt.load_cached_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.879974, "supported_languages": null}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.880115, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.8803031, "supported_languages": null}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.880805, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.88121, "supported_languages": null}, "macro.dbt.copy_grants": {"unique_id": "macro.dbt.copy_grants", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.882821, "supported_languages": null}, "macro.dbt.default__copy_grants": {"unique_id": "macro.dbt.default__copy_grants", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.882934, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.883102, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.88321, "supported_languages": null}, "macro.dbt.should_revoke": {"unique_id": "macro.dbt.should_revoke", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.883543, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"unique_id": "macro.dbt.get_show_grant_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.883727, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"unique_id": "macro.dbt.default__get_show_grant_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.883826, "supported_languages": null}, "macro.dbt.get_grant_sql": {"unique_id": "macro.dbt.get_grant_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.884047, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"unique_id": "macro.dbt.default__get_grant_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.884236, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"unique_id": "macro.dbt.get_revoke_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.8844569, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"unique_id": "macro.dbt.default__get_revoke_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.884647, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"unique_id": "macro.dbt.get_dcl_statement_list", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.884863, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"unique_id": "macro.dbt.default__get_dcl_statement_list", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.885509, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"unique_id": "macro.dbt.call_dcl_statements", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.885757, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"unique_id": "macro.dbt.default__call_dcl_statements", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.885995, "supported_languages": null}, "macro.dbt.apply_grants": {"unique_id": "macro.dbt.apply_grants", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.886236, "supported_languages": null}, "macro.dbt.default__apply_grants": {"unique_id": "macro.dbt.default__apply_grants", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.8873549, "supported_languages": null}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.888072, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.8882391, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.888438, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.888601, "supported_languages": null}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.8888671, "supported_languages": null}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.889344, "supported_languages": null}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.890774, "supported_languages": null}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.8910341, "supported_languages": null}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.891215, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.8913631, "supported_languages": null}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.891534, "supported_languages": null}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.8917718, "supported_languages": null}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.891969, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.892258, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.89244, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.892593, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.8942049, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.8944252, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.894728, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.8949099, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.8952372, "supported_languages": null}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.8954618, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.896037, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.896287, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.8970501, "supported_languages": null}, "macro.dbt.build_ref_function": {"unique_id": "macro.dbt.build_ref_function", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {%- set resolved = ref(*_ref) -%}\n        {%- do ref_dict.update({_ref | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef ref(*args,dbt_load_df_function):\n    refs = {{ ref_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.898497, "supported_languages": null}, "macro.dbt.build_source_function": {"unique_id": "macro.dbt.build_source_function", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.898962, "supported_languages": null}, "macro.dbt.build_config_dict": {"unique_id": "macro.dbt.build_config_dict", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {%- for key in model.config.config_keys_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == 'language' -%}\n          {%- set value = 'python' -%}\n        {%- endif -%}\n        {%- set value = model.config[key] -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.8993962, "supported_languages": null}, "macro.dbt.py_script_postfix": {"unique_id": "macro.dbt.py_script_postfix", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = '{{ this.database }}'\n    schema = '{{ this.schema }}'\n    identifier = '{{ this.identifier }}'\n    def __repr__(self):\n        return '{{ this }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.8997838, "supported_languages": null}, "macro.dbt.py_script_comment": {"unique_id": "macro.dbt.py_script_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.8998551, "supported_languages": null}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.9004202, "supported_languages": null}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.9006422, "supported_languages": null}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.9009228, "supported_languages": null}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.9011872, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.901603, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.902066, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.902588, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.9032881, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.9036748, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.903981, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.905046, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.906024, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.9069061, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.907954, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.9086459, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.9089751, "supported_languages": null}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.909728, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.910534, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.9110432, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.911492, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.912139, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"unique_id": "macro.dbt_utils.default__test_accepted_range", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.912603, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.9131799, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"unique_id": "macro.dbt_utils.default__test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.9135501, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.9140632, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.914589, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.9152498, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.915871, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.916471, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.916805, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.91727, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.917631, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"unique_id": "macro.dbt_utils.test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.918325, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"unique_id": "macro.dbt_utils.default__test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.91914, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.920065, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.920959, "supported_languages": null}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.921737, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.922602, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"unique_id": "macro.dbt_utils.test_not_empty_string", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "name": "test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.9231622, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"unique_id": "macro.dbt_utils.default__test_not_empty_string", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "name": "default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.92346, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.9266748, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.9282272, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.9285812, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.9287438, "supported_languages": null}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.9292538, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.9295921, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.929784, "supported_languages": null}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.9301, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.9302669, "supported_languages": null}, "macro.dbt_utils.slugify": {"unique_id": "macro.dbt_utils.slugify", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "name": "slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.930953, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.931817, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.932547, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.933117, "supported_languages": null}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.933347, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.933718, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.9341052, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.934446, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.935159, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.936049, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.936911, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.937331, "supported_languages": null}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.937525, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.93802, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.938742, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.939571, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.940033, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.940313, "supported_languages": null}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.9415329, "supported_languages": null}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.942892, "supported_languages": null}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.944203, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.9458072, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"unique_id": "macro.dbt_utils.safe_divide", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "name": "safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.946177, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"unique_id": "macro.dbt_utils.default__safe_divide", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "name": "default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.946311, "supported_languages": null}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.949271, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.952611, "supported_languages": null}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.953003, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.9532459, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"unique_id": "macro.dbt_utils.deduplicate", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.954026, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"unique_id": "macro.dbt_utils.default__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.9542358, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"unique_id": "macro.dbt_utils.redshift__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.954428, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"unique_id": "macro.dbt_utils.postgres__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.9546208, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"unique_id": "macro.dbt_utils.snowflake__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.954777, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"unique_id": "macro.dbt_utils.bigquery__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.9549398, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.9553962, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.955629, "supported_languages": null}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.9560618, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.956575, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.956981, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.9573, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.9589179, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.959268, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.960018, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.9605172, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.961621, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.9630651, "supported_languages": null}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.964143, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.96496, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.965476, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.966198, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.967604, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.968056, "supported_languages": null}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt.safe_cast(expr, dbt.type_numeric() ) }} %\n                {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.968504, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.968687, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.9691288, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.969702, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"unique_id": "macro.dbt_utils.generate_surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "name": "generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.9702039, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"unique_id": "macro.dbt_utils.default__generate_surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "name": "default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{% if var('surrogate_key_treat_nulls_as_empty_strings', False) %}\n    {% set default_null_value = \"\" %}\n{% else %}\n    {% set default_null_value = '_dbt_utils_surrogate_key_null_'%}\n{% endif %}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.9708312, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"unique_id": "macro.dbt_utils.get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.9712708, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"unique_id": "macro.dbt_utils.default__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.9714031, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.9715369, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"unique_id": "macro.dbt_utils.get_single_value", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "name": "get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.972092, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"unique_id": "macro.dbt_utils.default__get_single_value", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "name": "default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.9730308, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.974088, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.9743612, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.974903, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.975678, "supported_languages": null}, "macro.linkedin_pages_source.get_ugc_post_share_statistic_columns": {"unique_id": "macro.linkedin_pages_source.get_ugc_post_share_statistic_columns", "package_name": "linkedin_pages_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/linkedin_pages_source", "path": "macros/get_ugc_post_share_statistic_columns.sql", "original_file_path": "macros/get_ugc_post_share_statistic_columns.sql", "name": "get_ugc_post_share_statistic_columns", "macro_sql": "{% macro get_ugc_post_share_statistic_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"share_statistic_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ugc_post_id\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.9762402, "supported_languages": null}, "macro.linkedin_pages_source.get_ugc_post_share_content_media_columns": {"unique_id": "macro.linkedin_pages_source.get_ugc_post_share_content_media_columns", "package_name": "linkedin_pages_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/linkedin_pages_source", "path": "macros/get_ugc_post_share_content_media_columns.sql", "original_file_path": "macros/get_ugc_post_share_content_media_columns.sql", "name": "get_ugc_post_share_content_media_columns", "macro_sql": "{% macro get_ugc_post_share_content_media_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"description_attributes\", \"datatype\": dbt.type_string()},\n    {\"name\": \"description_inferred_locale\", \"datatype\": dbt.type_string()},\n    {\"name\": \"description_text\", \"datatype\": dbt.type_string()},\n    {\"name\": \"landing_page_title\", \"datatype\": dbt.type_string()},\n    {\"name\": \"landing_page_url\", \"datatype\": dbt.type_string()},\n    {\"name\": \"last_modified_time\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"media\", \"datatype\": dbt.type_string()},\n    {\"name\": \"original_url\", \"datatype\": dbt.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"thumbnails\", \"datatype\": dbt.type_string()},\n    {\"name\": \"title_attributes\", \"datatype\": dbt.type_string()},\n    {\"name\": \"title_inferred_locale\", \"datatype\": dbt.type_string()},\n    {\"name\": \"title_text\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ugc_post_id\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.977917, "supported_languages": null}, "macro.linkedin_pages_source.get_organization_ugc_post_columns": {"unique_id": "macro.linkedin_pages_source.get_organization_ugc_post_columns", "package_name": "linkedin_pages_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/linkedin_pages_source", "path": "macros/get_organization_ugc_post_columns.sql", "original_file_path": "macros/get_organization_ugc_post_columns.sql", "name": "get_organization_ugc_post_columns", "macro_sql": "{% macro get_organization_ugc_post_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"organization_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"ugc_post_id\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.978461, "supported_languages": null}, "macro.linkedin_pages_source.get_share_statistic_columns": {"unique_id": "macro.linkedin_pages_source.get_share_statistic_columns", "package_name": "linkedin_pages_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/linkedin_pages_source", "path": "macros/get_share_statistic_columns.sql", "original_file_path": "macros/get_share_statistic_columns.sql", "name": "get_share_statistic_columns", "macro_sql": "{% macro get_share_statistic_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_organization_entity_urn\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_share_entity_urn\", \"datatype\": dbt.type_string()},\n    {\"name\": \"click_count\", \"datatype\": dbt.type_int()},\n    {\"name\": \"comment_count\", \"datatype\": dbt.type_int()},\n    {\"name\": \"engagement\", \"datatype\": dbt.type_float()},\n    {\"name\": \"impression_count\", \"datatype\": dbt.type_int()},\n    {\"name\": \"like_count\", \"datatype\": dbt.type_int()},\n    {\"name\": \"share_count\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.979656, "supported_languages": null}, "macro.linkedin_pages_source.get_organization_columns": {"unique_id": "macro.linkedin_pages_source.get_organization_columns", "package_name": "linkedin_pages_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/linkedin_pages_source", "path": "macros/get_organization_columns.sql", "original_file_path": "macros/get_organization_columns.sql", "name": "get_organization_columns", "macro_sql": "{% macro get_organization_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"cover_photo_v_2_crop_info_height\", \"datatype\": dbt.type_int()},\n    {\"name\": \"cover_photo_v_2_crop_info_width\", \"datatype\": dbt.type_int()},\n    {\"name\": \"cover_photo_v_2_crop_info_x\", \"datatype\": dbt.type_int()},\n    {\"name\": \"cover_photo_v_2_crop_info_y\", \"datatype\": dbt.type_int()},\n    {\"name\": \"cover_photo_v_2_cropped\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cover_photo_v_2_original\", \"datatype\": dbt.type_string()},\n    {\"name\": \"default_locale_country\", \"datatype\": dbt.type_string()},\n    {\"name\": \"default_locale_language\", \"datatype\": dbt.type_string()},\n    {\"name\": \"description_localized\", \"datatype\": dbt.type_string()},\n    {\"name\": \"description_preferred_locale_country\", \"datatype\": dbt.type_string()},\n    {\"name\": \"description_preferred_locale_language\", \"datatype\": dbt.type_string()},\n    {\"name\": \"founded_on_day\", \"datatype\": dbt.type_int()},\n    {\"name\": \"founded_on_month\", \"datatype\": dbt.type_int()},\n    {\"name\": \"founded_on_year\", \"datatype\": dbt.type_int()},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"localized_description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"localized_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"localized_website\", \"datatype\": dbt.type_string()},\n    {\"name\": \"logo_v_2_crop_info_height\", \"datatype\": dbt.type_int()},\n    {\"name\": \"logo_v_2_crop_info_width\", \"datatype\": dbt.type_int()},\n    {\"name\": \"logo_v_2_crop_info_x\", \"datatype\": dbt.type_int()},\n    {\"name\": \"logo_v_2_crop_info_y\", \"datatype\": dbt.type_int()},\n    {\"name\": \"logo_v_2_cropped\", \"datatype\": dbt.type_string()},\n    {\"name\": \"logo_v_2_original\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name_localized\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name_preferred_locale_country\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name_preferred_locale_language\", \"datatype\": dbt.type_string()},\n    {\"name\": \"organization_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"organization_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"overview_photo_v_2_crop_info_height\", \"datatype\": dbt.type_int()},\n    {\"name\": \"overview_photo_v_2_crop_info_width\", \"datatype\": dbt.type_int()},\n    {\"name\": \"overview_photo_v_2_crop_info_x\", \"datatype\": dbt.type_int()},\n    {\"name\": \"overview_photo_v_2_crop_info_y\", \"datatype\": dbt.type_int()},\n    {\"name\": \"overview_photo_v_2_cropped\", \"datatype\": dbt.type_string()},\n    {\"name\": \"overview_photo_v_2_original\", \"datatype\": dbt.type_string()},\n    {\"name\": \"parent_relationship_parent_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"parent_relationship_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"parent_relationship_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"primary_organization_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"school_attributes_hierarchy_classification\", \"datatype\": dbt.type_string()},\n    {\"name\": \"school_attributes_legacy_school\", \"datatype\": dbt.type_string()},\n    {\"name\": \"school_attributes_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"school_attributes_year_level\", \"datatype\": dbt.type_string()},\n    {\"name\": \"staff_count_range\", \"datatype\": dbt.type_string()},\n    {\"name\": \"vanity_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"version_tag\", \"datatype\": dbt.type_string()},\n    {\"name\": \"website_localized\", \"datatype\": dbt.type_string()},\n    {\"name\": \"website_preferred_locale_country\", \"datatype\": dbt.type_string()},\n    {\"name\": \"website_preferred_locale_language\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.986426, "supported_languages": null}, "macro.linkedin_pages_source.get_ugc_post_history_columns": {"unique_id": "macro.linkedin_pages_source.get_ugc_post_history_columns", "package_name": "linkedin_pages_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/linkedin_pages_source", "path": "macros/get_ugc_post_history_columns.sql", "original_file_path": "macros/get_ugc_post_history_columns.sql", "name": "get_ugc_post_history_columns", "macro_sql": "{% macro get_ugc_post_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"author\", \"datatype\": dbt.type_string()},\n    {\"name\": \"client_application\", \"datatype\": dbt.type_string()},\n    {\"name\": \"container_entity\", \"datatype\": dbt.type_string()},\n    {\"name\": \"content_certification_record\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_actor\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_time\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"deleted_actor\", \"datatype\": dbt.type_string()},\n    {\"name\": \"deleted_time\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"distribution_distributed_via_follow_feed\", \"datatype\": \"boolean\"},\n    {\"name\": \"distribution_external_distribution_channels\", \"datatype\": dbt.type_string()},\n    {\"name\": \"distribution_feed_distribution\", \"datatype\": dbt.type_string()},\n    {\"name\": \"first_published_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"last_modified_actor\", \"datatype\": dbt.type_string()},\n    {\"name\": \"last_modified_time\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"lifecycle_state\", \"datatype\": dbt.type_string()},\n    {\"name\": \"response_context_parent\", \"datatype\": dbt.type_string()},\n    {\"name\": \"response_context_root\", \"datatype\": dbt.type_string()},\n    {\"name\": \"specific_content_primary_landing_page_url\", \"datatype\": dbt.type_string()},\n    {\"name\": \"specific_content_share_commentary_attributes\", \"datatype\": dbt.type_string()},\n    {\"name\": \"specific_content_share_commentary_inferred_locale\", \"datatype\": dbt.type_string()},\n    {\"name\": \"specific_content_share_commentary_text\", \"datatype\": dbt.type_string()},\n    {\"name\": \"specific_content_share_media_category\", \"datatype\": dbt.type_string()},\n    {\"name\": \"target_audience_targeted_entities\", \"datatype\": dbt.type_string()},\n    {\"name\": \"version_tag\", \"datatype\": dbt.type_string()},\n    {\"name\": \"visibility\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.989429, "supported_languages": null}, "macro.spark_utils.get_tables": {"unique_id": "macro.spark_utils.get_tables", "package_name": "spark_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "name": "get_tables", "macro_sql": "{% macro get_tables(table_regex_pattern='.*') %}\n\n  {% set tables = [] %}\n  {% for database in spark__list_schemas('not_used') %}\n    {% for table in spark__list_relations_without_caching(database[0]) %}\n      {% set db_tablename = database[0] ~ \".\" ~ table[1] %}\n      {% set is_match = modules.re.match(table_regex_pattern, db_tablename) %}\n      {% if is_match %}\n        {% call statement('table_detail', fetch_result=True) -%}\n          describe extended {{ db_tablename }}\n        {% endcall %}\n\n        {% set table_type = load_result('table_detail').table|reverse|selectattr(0, 'in', ('type', 'TYPE', 'Type'))|first %}\n        {% if table_type[1]|lower != 'view' %}\n          {{ tables.append(db_tablename) }}\n        {% endif %}\n      {% endif %}\n    {% endfor %}\n  {% endfor %}\n  {{ return(tables) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.9942589, "supported_languages": null}, "macro.spark_utils.get_delta_tables": {"unique_id": "macro.spark_utils.get_delta_tables", "package_name": "spark_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "name": "get_delta_tables", "macro_sql": "{% macro get_delta_tables(table_regex_pattern='.*') %}\n\n  {% set delta_tables = [] %}\n  {% for db_tablename in get_tables(table_regex_pattern) %}\n    {% call statement('table_detail', fetch_result=True) -%}\n      describe extended {{ db_tablename }}\n    {% endcall %}\n\n    {% set table_type = load_result('table_detail').table|reverse|selectattr(0, 'in', ('provider', 'PROVIDER', 'Provider'))|first %}\n    {% if table_type[1]|lower == 'delta' %}\n      {{ delta_tables.append(db_tablename) }}\n    {% endif %}\n  {% endfor %}\n  {{ return(delta_tables) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.spark_utils.get_tables", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.994932, "supported_languages": null}, "macro.spark_utils.get_statistic_columns": {"unique_id": "macro.spark_utils.get_statistic_columns", "package_name": "spark_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "name": "get_statistic_columns", "macro_sql": "{% macro get_statistic_columns(table) %}\n\n  {% call statement('input_columns', fetch_result=True) %}\n    SHOW COLUMNS IN {{ table }}\n  {% endcall %}\n  {% set input_columns = load_result('input_columns').table %}\n\n  {% set output_columns = [] %}\n  {% for column in input_columns %}\n    {% call statement('column_information', fetch_result=True) %}\n      DESCRIBE TABLE {{ table }} `{{ column[0] }}`\n    {% endcall %}\n    {% if not load_result('column_information').table[1][1].startswith('struct') and not load_result('column_information').table[1][1].startswith('array')  %}\n      {{ output_columns.append('`' ~ column[0] ~ '`') }}\n    {% endif %}\n  {% endfor %}\n  {{ return(output_columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.9958022, "supported_languages": null}, "macro.spark_utils.spark_optimize_delta_tables": {"unique_id": "macro.spark_utils.spark_optimize_delta_tables", "package_name": "spark_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "name": "spark_optimize_delta_tables", "macro_sql": "{% macro spark_optimize_delta_tables(table_regex_pattern='.*') %}\n\n  {% for table in get_delta_tables(table_regex_pattern) %}\n    {% set start=modules.datetime.datetime.now() %}\n    {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Optimizing \" ~ table) }}\n    {% do run_query(\"optimize \" ~ table) %}\n    {% set end=modules.datetime.datetime.now() %}\n    {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ table ~ \" in \" ~ total_seconds ~ \"s\") }}\n  {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.spark_utils.get_delta_tables", "macro.dbt_utils.log_info", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.9965172, "supported_languages": null}, "macro.spark_utils.spark_vacuum_delta_tables": {"unique_id": "macro.spark_utils.spark_vacuum_delta_tables", "package_name": "spark_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "name": "spark_vacuum_delta_tables", "macro_sql": "{% macro spark_vacuum_delta_tables(table_regex_pattern='.*') %}\n\n  {% for table in get_delta_tables(table_regex_pattern) %}\n    {% set start=modules.datetime.datetime.now() %}\n    {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Vacuuming \" ~ table) }}\n    {% do run_query(\"vacuum \" ~ table) %}\n    {% set end=modules.datetime.datetime.now() %}\n    {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ table ~ \" in \" ~ total_seconds ~ \"s\") }}\n  {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.spark_utils.get_delta_tables", "macro.dbt_utils.log_info", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.9972281, "supported_languages": null}, "macro.spark_utils.spark_analyze_tables": {"unique_id": "macro.spark_utils.spark_analyze_tables", "package_name": "spark_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "name": "spark_analyze_tables", "macro_sql": "{% macro spark_analyze_tables(table_regex_pattern='.*') %}\n\n  {% for table in get_tables(table_regex_pattern) %}\n    {% set start=modules.datetime.datetime.now() %}\n    {% set columns = get_statistic_columns(table) | join(',') %}\n    {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Analyzing \" ~ table) }}\n    {% if columns != '' %}\n      {% do run_query(\"analyze table \" ~ table ~ \" compute statistics for columns \" ~ columns) %}\n    {% endif %}\n    {% set end=modules.datetime.datetime.now() %}\n    {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ table ~ \" in \" ~ total_seconds ~ \"s\") }}\n  {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.spark_utils.get_tables", "macro.spark_utils.get_statistic_columns", "macro.dbt_utils.log_info", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.998153, "supported_languages": null}, "macro.spark_utils.spark__concat": {"unique_id": "macro.spark_utils.spark__concat", "package_name": "spark_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/dbt_utils/cross_db_utils/concat.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/concat.sql", "name": "spark__concat", "macro_sql": "{% macro spark__concat(fields) -%}\n    concat({{ fields|join(', ') }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.998445, "supported_languages": null}, "macro.spark_utils.spark__type_numeric": {"unique_id": "macro.spark_utils.spark__type_numeric", "package_name": "spark_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/dbt_utils/cross_db_utils/datatypes.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/datatypes.sql", "name": "spark__type_numeric", "macro_sql": "{% macro spark__type_numeric() %}\n    decimal(28, 6)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477150.9986382, "supported_languages": null}, "macro.spark_utils.spark__dateadd": {"unique_id": "macro.spark_utils.spark__dateadd", "package_name": "spark_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/dbt_utils/cross_db_utils/dateadd.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/dateadd.sql", "name": "spark__dateadd", "macro_sql": "{% macro spark__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {%- set clock_component -%}\n        {# make sure the dates + timestamps are real, otherwise raise an error asap #}\n        to_unix_timestamp({{ spark_utils.assert_not_null('to_timestamp', from_date_or_timestamp) }})\n        - to_unix_timestamp({{ spark_utils.assert_not_null('date', from_date_or_timestamp) }})\n    {%- endset -%}\n\n    {%- if datepart in ['day', 'week'] -%}\n        \n        {%- set multiplier = 7 if datepart == 'week' else 1 -%}\n\n        to_timestamp(\n            to_unix_timestamp(\n                date_add(\n                    {{ spark_utils.assert_not_null('date', from_date_or_timestamp) }},\n                    cast({{interval}} * {{multiplier}} as int)\n                )\n            ) + {{clock_component}}\n        )\n\n    {%- elif datepart in ['month', 'quarter', 'year'] -%}\n    \n        {%- set multiplier -%} \n            {%- if datepart == 'month' -%} 1\n            {%- elif datepart == 'quarter' -%} 3\n            {%- elif datepart == 'year' -%} 12\n            {%- endif -%}\n        {%- endset -%}\n\n        to_timestamp(\n            to_unix_timestamp(\n                add_months(\n                    {{ spark_utils.assert_not_null('date', from_date_or_timestamp) }},\n                    cast({{interval}} * {{multiplier}} as int)\n                )\n            ) + {{clock_component}}\n        )\n\n    {%- elif datepart in ('hour', 'minute', 'second', 'millisecond', 'microsecond') -%}\n    \n        {%- set multiplier -%} \n            {%- if datepart == 'hour' -%} 3600\n            {%- elif datepart == 'minute' -%} 60\n            {%- elif datepart == 'second' -%} 1\n            {%- elif datepart == 'millisecond' -%} (1/1000000)\n            {%- elif datepart == 'microsecond' -%} (1/1000000)\n            {%- endif -%}\n        {%- endset -%}\n\n        to_timestamp(\n            {{ spark_utils.assert_not_null('to_unix_timestamp', from_date_or_timestamp) }}\n            + cast({{interval}} * {{multiplier}} as int)\n        )\n\n    {%- else -%}\n\n        {{ exceptions.raise_compiler_error(\"macro dateadd not implemented for datepart ~ '\" ~ datepart ~ \"' ~ on Spark\") }}\n\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.spark_utils.assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.001406, "supported_languages": null}, "macro.spark_utils.spark__datediff": {"unique_id": "macro.spark_utils.spark__datediff", "package_name": "spark_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/dbt_utils/cross_db_utils/datediff.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/datediff.sql", "name": "spark__datediff", "macro_sql": "{% macro spark__datediff(first_date, second_date, datepart) %}\n\n    {%- if datepart in ['day', 'week', 'month', 'quarter', 'year'] -%}\n    \n        {# make sure the dates are real, otherwise raise an error asap #}\n        {% set first_date = spark_utils.assert_not_null('date', first_date) %}\n        {% set second_date = spark_utils.assert_not_null('date', second_date) %}\n    \n    {%- endif -%}\n    \n    {%- if datepart == 'day' -%}\n    \n        datediff({{second_date}}, {{first_date}})\n    \n    {%- elif datepart == 'week' -%}\n    \n        case when {{first_date}} < {{second_date}}\n            then floor(datediff({{second_date}}, {{first_date}})/7)\n            else ceil(datediff({{second_date}}, {{first_date}})/7)\n            end\n        \n        -- did we cross a week boundary (Sunday)?\n        + case\n            when {{first_date}} < {{second_date}} and dayofweek({{second_date}}) < dayofweek({{first_date}}) then 1\n            when {{first_date}} > {{second_date}} and dayofweek({{second_date}}) > dayofweek({{first_date}}) then -1\n            else 0 end\n\n    {%- elif datepart == 'month' -%}\n\n        case when {{first_date}} < {{second_date}}\n            then floor(months_between(date({{second_date}}), date({{first_date}})))\n            else ceil(months_between(date({{second_date}}), date({{first_date}})))\n            end\n        \n        -- did we cross a month boundary?\n        + case\n            when {{first_date}} < {{second_date}} and dayofmonth({{second_date}}) < dayofmonth({{first_date}}) then 1\n            when {{first_date}} > {{second_date}} and dayofmonth({{second_date}}) > dayofmonth({{first_date}}) then -1\n            else 0 end\n        \n    {%- elif datepart == 'quarter' -%}\n    \n        case when {{first_date}} < {{second_date}}\n            then floor(months_between(date({{second_date}}), date({{first_date}}))/3)\n            else ceil(months_between(date({{second_date}}), date({{first_date}}))/3)\n            end\n        \n        -- did we cross a quarter boundary?\n        + case\n            when {{first_date}} < {{second_date}} and (\n                (dayofyear({{second_date}}) - (quarter({{second_date}}) * 365/4))\n                < (dayofyear({{first_date}}) - (quarter({{first_date}}) * 365/4))\n            ) then 1\n            when {{first_date}} > {{second_date}} and (\n                (dayofyear({{second_date}}) - (quarter({{second_date}}) * 365/4))\n                > (dayofyear({{first_date}}) - (quarter({{first_date}}) * 365/4))\n            ) then -1\n            else 0 end\n\n    {%- elif datepart == 'year' -%}\n    \n        year({{second_date}}) - year({{first_date}})\n\n    {%- elif datepart in ('hour', 'minute', 'second', 'millisecond', 'microsecond') -%}\n    \n        {%- set divisor -%} \n            {%- if datepart == 'hour' -%} 3600\n            {%- elif datepart == 'minute' -%} 60\n            {%- elif datepart == 'second' -%} 1\n            {%- elif datepart == 'millisecond' -%} (1/1000)\n            {%- elif datepart == 'microsecond' -%} (1/1000000)\n            {%- endif -%}\n        {%- endset -%}\n\n        case when {{first_date}} < {{second_date}}\n            then ceil((\n                {# make sure the timestamps are real, otherwise raise an error asap #}\n                {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', second_date)) }}\n                - {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', first_date)) }}\n            ) / {{divisor}})\n            else floor((\n                {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', second_date)) }}\n                - {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', first_date)) }}\n            ) / {{divisor}})\n            end\n            \n            {% if datepart == 'millisecond' %}\n                + cast(date_format({{second_date}}, 'SSS') as int)\n                - cast(date_format({{first_date}}, 'SSS') as int)\n            {% endif %}\n            \n            {% if datepart == 'microsecond' %}    \n                {% set capture_str = '[0-9]{4}-[0-9]{2}-[0-9]{2}.[0-9]{2}:[0-9]{2}:[0-9]{2}.([0-9]{6})' %}\n                -- Spark doesn't really support microseconds, so this is a massive hack!\n                -- It will only work if the timestamp-string is of the format\n                -- 'yyyy-MM-dd-HH mm.ss.SSSSSS'\n                + cast(regexp_extract({{second_date}}, '{{capture_str}}', 1) as int)\n                - cast(regexp_extract({{first_date}}, '{{capture_str}}', 1) as int)    \n            {% endif %}\n\n    {%- else -%}\n\n        {{ exceptions.raise_compiler_error(\"macro datediff not implemented for datepart ~ '\" ~ datepart ~ \"' ~ on Spark\") }}\n\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.spark_utils.assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.008419, "supported_languages": null}, "macro.spark_utils.spark__current_timestamp": {"unique_id": "macro.spark_utils.spark__current_timestamp", "package_name": "spark_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "name": "spark__current_timestamp", "macro_sql": "{% macro spark__current_timestamp() %}\n    current_timestamp()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.008645, "supported_languages": null}, "macro.spark_utils.spark__current_timestamp_in_utc": {"unique_id": "macro.spark_utils.spark__current_timestamp_in_utc", "package_name": "spark_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "name": "spark__current_timestamp_in_utc", "macro_sql": "{% macro spark__current_timestamp_in_utc() %}\n    unix_timestamp()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.0087209, "supported_languages": null}, "macro.spark_utils.spark__split_part": {"unique_id": "macro.spark_utils.spark__split_part", "package_name": "spark_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/dbt_utils/cross_db_utils/split_part.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/split_part.sql", "name": "spark__split_part", "macro_sql": "{% macro spark__split_part(string_text, delimiter_text, part_number) %}\n\n    {% set delimiter_expr %}\n    \n        -- escape if starts with a special character\n        case when regexp_extract({{ delimiter_text }}, '([^A-Za-z0-9])(.*)', 1) != '_'\n            then concat('\\\\', {{ delimiter_text }})\n            else {{ delimiter_text }} end\n    \n    {% endset %}\n\n    {% set split_part_expr %}\n    \n    split(\n        {{ string_text }},\n        {{ delimiter_expr }}\n        )[({{ part_number - 1 }})]\n    \n    {% endset %}\n    \n    {{ return(split_part_expr) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.009347, "supported_languages": null}, "macro.spark_utils.spark__get_relations_by_pattern": {"unique_id": "macro.spark_utils.spark__get_relations_by_pattern", "package_name": "spark_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "name": "spark__get_relations_by_pattern", "macro_sql": "{% macro spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n        show table extended in {{ schema_pattern }} like '{{ table_pattern }}'\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n    {%- set tbl_relations = [] -%}\n    {%- for row in table_list['table'] -%}\n        {%- set tbl_relation = api.Relation.create(\n            database=None,\n            schema=row[0],\n            identifier=row[1],\n            type=('view' if 'Type: VIEW' in row[3] else 'table')\n        ) -%}\n        {%- do tbl_relations.append(tbl_relation) -%}\n    {%- endfor -%}\n\n    {{ return(tbl_relations) }}\n    {%- else -%}\n    {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.0109189, "supported_languages": null}, "macro.spark_utils.spark__get_relations_by_prefix": {"unique_id": "macro.spark_utils.spark__get_relations_by_prefix", "package_name": "spark_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "name": "spark__get_relations_by_prefix", "macro_sql": "{% macro spark__get_relations_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {% set table_pattern = table_pattern ~ '*' %}\n    {{ return(spark_utils.spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.011251, "supported_languages": null}, "macro.spark_utils.spark__get_tables_by_pattern": {"unique_id": "macro.spark_utils.spark__get_tables_by_pattern", "package_name": "spark_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "name": "spark__get_tables_by_pattern", "macro_sql": "{% macro spark__get_tables_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(spark_utils.spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.011519, "supported_languages": null}, "macro.spark_utils.spark__get_tables_by_prefix": {"unique_id": "macro.spark_utils.spark__get_tables_by_prefix", "package_name": "spark_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "name": "spark__get_tables_by_prefix", "macro_sql": "{% macro spark__get_tables_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(spark_utils.spark__get_relations_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.011786, "supported_languages": null}, "macro.spark_utils.assert_not_null": {"unique_id": "macro.spark_utils.assert_not_null", "package_name": "spark_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/etc/assert_not_null.sql", "original_file_path": "macros/etc/assert_not_null.sql", "name": "assert_not_null", "macro_sql": "{% macro assert_not_null(function, arg) -%}\n  {{ return(adapter.dispatch('assert_not_null', 'spark_utils')(function, arg)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.spark_utils.default__assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.0121658, "supported_languages": null}, "macro.spark_utils.default__assert_not_null": {"unique_id": "macro.spark_utils.default__assert_not_null", "package_name": "spark_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/etc/assert_not_null.sql", "original_file_path": "macros/etc/assert_not_null.sql", "name": "default__assert_not_null", "macro_sql": "{% macro default__assert_not_null(function, arg) %}\n\n    coalesce({{function}}({{arg}}), nvl2({{function}}({{arg}}), assert_true({{function}}({{arg}}) is not null), null))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.012365, "supported_languages": null}, "macro.spark_utils.spark__convert_timezone": {"unique_id": "macro.spark_utils.spark__convert_timezone", "package_name": "spark_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/spark_utils", "path": "macros/snowplow/convert_timezone.sql", "original_file_path": "macros/snowplow/convert_timezone.sql", "name": "spark__convert_timezone", "macro_sql": "{% macro spark__convert_timezone(in_tz, out_tz, in_timestamp) %}\n    from_utc_timestamp(to_utc_timestamp({{in_timestamp}}, {{in_tz}}), {{out_tz}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.012633, "supported_languages": null}, "macro.fivetran_utils.enabled_vars": {"unique_id": "macro.fivetran_utils.enabled_vars", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/enabled_vars.sql", "original_file_path": "macros/enabled_vars.sql", "name": "enabled_vars", "macro_sql": "{% macro enabled_vars(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, True) == False %}\n    {{ return(False) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(True) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.0130932, "supported_languages": null}, "macro.fivetran_utils.percentile": {"unique_id": "macro.fivetran_utils.percentile", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "percentile", "macro_sql": "{% macro percentile(percentile_field, partition_field, percent) -%}\n\n{{ adapter.dispatch('percentile', 'fivetran_utils') (percentile_field, partition_field, percent) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.postgres__percentile"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.014018, "supported_languages": null}, "macro.fivetran_utils.default__percentile": {"unique_id": "macro.fivetran_utils.default__percentile", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "default__percentile", "macro_sql": "{% macro default__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.014178, "supported_languages": null}, "macro.fivetran_utils.redshift__percentile": {"unique_id": "macro.fivetran_utils.redshift__percentile", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "redshift__percentile", "macro_sql": "{% macro redshift__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.014337, "supported_languages": null}, "macro.fivetran_utils.bigquery__percentile": {"unique_id": "macro.fivetran_utils.bigquery__percentile", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "bigquery__percentile", "macro_sql": "{% macro bigquery__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.0144992, "supported_languages": null}, "macro.fivetran_utils.postgres__percentile": {"unique_id": "macro.fivetran_utils.postgres__percentile", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "postgres__percentile", "macro_sql": "{% macro postgres__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n    /* have to group by partition field */\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.0146492, "supported_languages": null}, "macro.fivetran_utils.spark__percentile": {"unique_id": "macro.fivetran_utils.spark__percentile", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "spark__percentile", "macro_sql": "{% macro spark__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.014805, "supported_languages": null}, "macro.fivetran_utils.pivot_json_extract": {"unique_id": "macro.fivetran_utils.pivot_json_extract", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/pivot_json_extract.sql", "original_file_path": "macros/pivot_json_extract.sql", "name": "pivot_json_extract", "macro_sql": "{% macro pivot_json_extract(string, list_of_properties) %}\n\n{%- for property in list_of_properties -%}\n{%- if property is mapping -%}\nreplace( {{ fivetran_utils.json_extract(string, property.name) }}, '\"', '') as {{ property.alias if property.alias else property.name | replace(' ', '_') | replace('.', '_') | lower }}\n\n{%- else -%}\nreplace( {{ fivetran_utils.json_extract(string, property) }}, '\"', '') as {{ property | replace(' ', '_') | lower }}\n\n{%- endif -%}\n{%- if not loop.last -%},{%- endif %}\n{% endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.json_extract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.015708, "supported_languages": null}, "macro.fivetran_utils.persist_pass_through_columns": {"unique_id": "macro.fivetran_utils.persist_pass_through_columns", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/persist_pass_through_columns.sql", "original_file_path": "macros/persist_pass_through_columns.sql", "name": "persist_pass_through_columns", "macro_sql": "{% macro persist_pass_through_columns(pass_through_variable, identifier=none, transform='') %}\n\n{% if var(pass_through_variable, none) %}\n    {% for field in var(pass_through_variable) %}\n        , {{ transform ~ '(' ~ (identifier ~ '.' if identifier else '') ~ (field.alias if field.alias else field.name) ~ ')' }} as {{ field.alias if field.alias else field.name }}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.016406, "supported_languages": null}, "macro.fivetran_utils.json_parse": {"unique_id": "macro.fivetran_utils.json_parse", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "json_parse", "macro_sql": "{% macro json_parse(string, string_path) -%}\n\n{{ adapter.dispatch('json_parse', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.postgres__json_parse"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.017486, "supported_languages": null}, "macro.fivetran_utils.default__json_parse": {"unique_id": "macro.fivetran_utils.default__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "default__json_parse", "macro_sql": "{% macro default__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.017728, "supported_languages": null}, "macro.fivetran_utils.redshift__json_parse": {"unique_id": "macro.fivetran_utils.redshift__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "redshift__json_parse", "macro_sql": "{% macro redshift__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.0179698, "supported_languages": null}, "macro.fivetran_utils.bigquery__json_parse": {"unique_id": "macro.fivetran_utils.bigquery__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "bigquery__json_parse", "macro_sql": "{% macro bigquery__json_parse(string, string_path) %}\n\n \n  json_extract_scalar({{string}}, '$.{%- for s in string_path -%}{{ s }}{%- if not loop.last -%}.{%- endif -%}{%- endfor -%} ')\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.018206, "supported_languages": null}, "macro.fivetran_utils.postgres__json_parse": {"unique_id": "macro.fivetran_utils.postgres__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "postgres__json_parse", "macro_sql": "{% macro postgres__json_parse(string, string_path) %}\n\n  {{string}}::json #>> '{ {%- for s in string_path -%}{{ s }}{%- if not loop.last -%},{%- endif -%}{%- endfor -%} }'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.018441, "supported_languages": null}, "macro.fivetran_utils.snowflake__json_parse": {"unique_id": "macro.fivetran_utils.snowflake__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "snowflake__json_parse", "macro_sql": "{% macro snowflake__json_parse(string, string_path) %}\n\n  parse_json( {{string}} ) {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.0187001, "supported_languages": null}, "macro.fivetran_utils.spark__json_parse": {"unique_id": "macro.fivetran_utils.spark__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "spark__json_parse", "macro_sql": "{% macro spark__json_parse(string, string_path) %}\n\n  {{string}} : {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.018965, "supported_languages": null}, "macro.fivetran_utils.max_bool": {"unique_id": "macro.fivetran_utils.max_bool", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "name": "max_bool", "macro_sql": "{% macro max_bool(boolean_field) -%}\n\n{{ adapter.dispatch('max_bool', 'fivetran_utils') (boolean_field) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__max_bool"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.019348, "supported_languages": null}, "macro.fivetran_utils.default__max_bool": {"unique_id": "macro.fivetran_utils.default__max_bool", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "name": "default__max_bool", "macro_sql": "{% macro default__max_bool(boolean_field)  %}\n\n    bool_or( {{ boolean_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.0194461, "supported_languages": null}, "macro.fivetran_utils.snowflake__max_bool": {"unique_id": "macro.fivetran_utils.snowflake__max_bool", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "name": "snowflake__max_bool", "macro_sql": "{% macro snowflake__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.019541, "supported_languages": null}, "macro.fivetran_utils.bigquery__max_bool": {"unique_id": "macro.fivetran_utils.bigquery__max_bool", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "name": "bigquery__max_bool", "macro_sql": "{% macro bigquery__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.01964, "supported_languages": null}, "macro.fivetran_utils.calculated_fields": {"unique_id": "macro.fivetran_utils.calculated_fields", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/calculated_fields.sql", "original_file_path": "macros/calculated_fields.sql", "name": "calculated_fields", "macro_sql": "{% macro calculated_fields(variable) -%}\n\n{% if var(variable, none) %}\n    {% for field in var(variable) %}\n        , {{ field.transform_sql }} as {{ field.name }} \n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.020071, "supported_languages": null}, "macro.fivetran_utils.seed_data_helper": {"unique_id": "macro.fivetran_utils.seed_data_helper", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/seed_data_helper.sql", "original_file_path": "macros/seed_data_helper.sql", "name": "seed_data_helper", "macro_sql": "{% macro seed_data_helper(seed_name, warehouses) %}\n\n{% if target.type in warehouses %}\n    {% for w in warehouses %}\n        {% if target.type == w %}\n            {{ return(ref(seed_name ~ \"_\" ~ w ~ \"\")) }}\n        {% endif %}\n    {% endfor %}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.0206962, "supported_languages": null}, "macro.fivetran_utils.fill_pass_through_columns": {"unique_id": "macro.fivetran_utils.fill_pass_through_columns", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/fill_pass_through_columns.sql", "original_file_path": "macros/fill_pass_through_columns.sql", "name": "fill_pass_through_columns", "macro_sql": "{% macro fill_pass_through_columns(pass_through_variable) %}\n\n{% if var(pass_through_variable) %}\n    {% for field in var(pass_through_variable) %}\n        {% if field is mapping %}\n            {% if field.transform_sql %}\n                , {{ field.transform_sql }} as {{ field.alias if field.alias else field.name }}\n            {% else %}\n                , {{ field.alias if field.alias else field.name }}\n            {% endif %}\n        {% else %}\n        , {{ field }}\n        {% endif %}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.0215108, "supported_languages": null}, "macro.fivetran_utils.string_agg": {"unique_id": "macro.fivetran_utils.string_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "string_agg", "macro_sql": "{% macro string_agg(field_to_agg, delimiter) -%}\n\n{{ adapter.dispatch('string_agg', 'fivetran_utils') (field_to_agg, delimiter) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__string_agg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.0220249, "supported_languages": null}, "macro.fivetran_utils.default__string_agg": {"unique_id": "macro.fivetran_utils.default__string_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "default__string_agg", "macro_sql": "{% macro default__string_agg(field_to_agg, delimiter) %}\n    string_agg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.022152, "supported_languages": null}, "macro.fivetran_utils.snowflake__string_agg": {"unique_id": "macro.fivetran_utils.snowflake__string_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "snowflake__string_agg", "macro_sql": "{% macro snowflake__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.022274, "supported_languages": null}, "macro.fivetran_utils.redshift__string_agg": {"unique_id": "macro.fivetran_utils.redshift__string_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "redshift__string_agg", "macro_sql": "{% macro redshift__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.0224, "supported_languages": null}, "macro.fivetran_utils.spark__string_agg": {"unique_id": "macro.fivetran_utils.spark__string_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "spark__string_agg", "macro_sql": "{% macro spark__string_agg(field_to_agg, delimiter) %}\n    -- collect set will remove duplicates\n    replace(replace(replace(cast( collect_set({{ field_to_agg }}) as string), '[', ''), ']', ''), ', ', {{ delimiter }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.0225952, "supported_languages": null}, "macro.fivetran_utils.timestamp_diff": {"unique_id": "macro.fivetran_utils.timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "timestamp_diff", "macro_sql": "{% macro timestamp_diff(first_date, second_date, datepart) %}\n  {{ adapter.dispatch('timestamp_diff', 'fivetran_utils')(first_date, second_date, datepart) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.postgres__timestamp_diff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.0253, "supported_languages": null}, "macro.fivetran_utils.default__timestamp_diff": {"unique_id": "macro.fivetran_utils.default__timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "default__timestamp_diff", "macro_sql": "{% macro default__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.025464, "supported_languages": null}, "macro.fivetran_utils.redshift__timestamp_diff": {"unique_id": "macro.fivetran_utils.redshift__timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "redshift__timestamp_diff", "macro_sql": "{% macro redshift__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.0256178, "supported_languages": null}, "macro.fivetran_utils.bigquery__timestamp_diff": {"unique_id": "macro.fivetran_utils.bigquery__timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "bigquery__timestamp_diff", "macro_sql": "{% macro bigquery__timestamp_diff(first_date, second_date, datepart) %}\n\n    timestamp_diff(\n        {{second_date}},\n        {{first_date}},\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.025769, "supported_languages": null}, "macro.fivetran_utils.postgres__timestamp_diff": {"unique_id": "macro.fivetran_utils.postgres__timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "postgres__timestamp_diff", "macro_sql": "{% macro postgres__timestamp_diff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.027412, "supported_languages": null}, "macro.fivetran_utils.try_cast": {"unique_id": "macro.fivetran_utils.try_cast", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "try_cast", "macro_sql": "{% macro try_cast(field, type) %}\n    {{ adapter.dispatch('try_cast', 'fivetran_utils') (field, type) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.postgres__try_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.028275, "supported_languages": null}, "macro.fivetran_utils.default__safe_cast": {"unique_id": "macro.fivetran_utils.default__safe_cast", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.028409, "supported_languages": null}, "macro.fivetran_utils.redshift__try_cast": {"unique_id": "macro.fivetran_utils.redshift__try_cast", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "redshift__try_cast", "macro_sql": "{% macro redshift__try_cast(field, type) %}\n{%- if type == 'numeric' -%}\n\n    case\n        when trim({{field}}) ~ '^(0|[1-9][0-9]*)$' then trim({{field}})\n        else null\n    end::{{type}}\n\n{% else %}\n    {{ exceptions.raise_compiler_error(\n            \"non-numeric datatypes are not currently supported\") }}\n\n{% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.028689, "supported_languages": null}, "macro.fivetran_utils.postgres__try_cast": {"unique_id": "macro.fivetran_utils.postgres__try_cast", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "postgres__try_cast", "macro_sql": "{% macro postgres__try_cast(field, type) %}\n{%- if type == 'numeric' -%}\n\n    case\n        when replace(cast({{field}} as varchar),cast(' ' as varchar),cast('' as varchar)) ~ '^(0|[1-9][0-9]*)$' \n        then replace(cast({{field}} as varchar),cast(' ' as varchar),cast('' as varchar))\n        else null\n    end::{{type}}\n\n{% else %}\n    {{ exceptions.raise_compiler_error(\n            \"non-numeric datatypes are not currently supported\") }}\n\n{% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.0289679, "supported_languages": null}, "macro.fivetran_utils.snowflake__try_cast": {"unique_id": "macro.fivetran_utils.snowflake__try_cast", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "snowflake__try_cast", "macro_sql": "{% macro snowflake__try_cast(field, type) %}\n    try_cast(cast({{field}} as varchar) as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.0290968, "supported_languages": null}, "macro.fivetran_utils.bigquery__try_cast": {"unique_id": "macro.fivetran_utils.bigquery__try_cast", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "bigquery__try_cast", "macro_sql": "{% macro bigquery__try_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.029218, "supported_languages": null}, "macro.fivetran_utils.spark__try_cast": {"unique_id": "macro.fivetran_utils.spark__try_cast", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "spark__try_cast", "macro_sql": "{% macro spark__try_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.0293398, "supported_languages": null}, "macro.fivetran_utils.source_relation": {"unique_id": "macro.fivetran_utils.source_relation", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/source_relation.sql", "original_file_path": "macros/source_relation.sql", "name": "source_relation", "macro_sql": "{% macro source_relation(union_schema_variable='union_schemas', union_database_variable='union_databases') -%}\n\n{{ adapter.dispatch('source_relation', 'fivetran_utils') (union_schema_variable, union_database_variable) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__source_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.0298822, "supported_languages": null}, "macro.fivetran_utils.default__source_relation": {"unique_id": "macro.fivetran_utils.default__source_relation", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/source_relation.sql", "original_file_path": "macros/source_relation.sql", "name": "default__source_relation", "macro_sql": "{% macro default__source_relation(union_schema_variable, union_database_variable) %}\n\n{% if var(union_schema_variable, none)  %}\n, case\n    {% for schema in var(union_schema_variable) %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.{{ schema|lower }}.%' then '{{ schema|lower }}'\n    {% endfor %}\n  end as source_relation\n{% elif var(union_database_variable, none) %}\n, case\n    {% for database in var(union_database_variable) %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%{{ database|lower }}.%' then '{{ database|lower }}'\n    {% endfor %}\n  end as source_relation\n{% else %}\n, cast('' as {{ dbt.type_string() }}) as source_relation\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.030446, "supported_languages": null}, "macro.fivetran_utils.first_value": {"unique_id": "macro.fivetran_utils.first_value", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "name": "first_value", "macro_sql": "{% macro first_value(first_value_field, partition_field, order_by_field, order=\"asc\") -%}\n\n{{ adapter.dispatch('first_value', 'fivetran_utils') (first_value_field, partition_field, order_by_field, order) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__first_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.0309818, "supported_languages": null}, "macro.fivetran_utils.default__first_value": {"unique_id": "macro.fivetran_utils.default__first_value", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "name": "default__first_value", "macro_sql": "{% macro default__first_value(first_value_field, partition_field, order_by_field, order=\"asc\")  %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.0311801, "supported_languages": null}, "macro.fivetran_utils.redshift__first_value": {"unique_id": "macro.fivetran_utils.redshift__first_value", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "name": "redshift__first_value", "macro_sql": "{% macro redshift__first_value(first_value_field, partition_field, order_by_field, order=\"asc\") %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} , {{ partition_field }} rows unbounded preceding )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.03139, "supported_languages": null}, "macro.fivetran_utils.add_dbt_source_relation": {"unique_id": "macro.fivetran_utils.add_dbt_source_relation", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/add_dbt_source_relation.sql", "original_file_path": "macros/add_dbt_source_relation.sql", "name": "add_dbt_source_relation", "macro_sql": "{% macro add_dbt_source_relation() %}\n\n{% if var('union_schemas', none) or var('union_databases', none) %}\n, _dbt_source_relation\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.031716, "supported_languages": null}, "macro.fivetran_utils.add_pass_through_columns": {"unique_id": "macro.fivetran_utils.add_pass_through_columns", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/add_pass_through_columns.sql", "original_file_path": "macros/add_pass_through_columns.sql", "name": "add_pass_through_columns", "macro_sql": "{% macro add_pass_through_columns(base_columns, pass_through_var) %}\n\n  {% if pass_through_var %}\n\n    {% for column in pass_through_var %}\n\n    {% if column is mapping %}\n\n      {% if column.alias %}\n\n        {% do base_columns.append({ \"name\": column.name, \"alias\": column.alias, \"datatype\": column.datatype if column.datatype else dbt.type_string()}) %}\n\n      {% else %}\n\n        {% do base_columns.append({ \"name\": column.name, \"datatype\": column.datatype if column.datatype else dbt.type_string()}) %}\n        \n      {% endif %}\n\n    {% else %}\n\n      {% do base_columns.append({ \"name\": column, \"datatype\": dbt.type_string()}) %}\n\n    {% endif %}\n\n    {% endfor %}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.0328882, "supported_languages": null}, "macro.fivetran_utils.union_relations": {"unique_id": "macro.fivetran_utils.union_relations", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, aliases=none, column_override=none, include=[], exclude=[], source_column_name=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n    {%- set source_column_name = source_column_name if source_column_name is not none else '_dbt_source_relation' -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ aliases[loop.index0] if aliases else relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.036661, "supported_languages": null}, "macro.fivetran_utils.union_tables": {"unique_id": "macro.fivetran_utils.union_tables", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "name": "union_tables", "macro_sql": "{%- macro union_tables(tables, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_table') -%}\n\n    {%- do exceptions.warn(\"Warning: the `union_tables` macro is no longer supported and will be deprecated in a future release of dbt-utils. Use the `union_relations` macro instead\") -%}\n\n    {{ return(dbt_utils.union_relations(tables, column_override, include, exclude, source_column_name)) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.037023, "supported_languages": null}, "macro.fivetran_utils.snowflake_seed_data": {"unique_id": "macro.fivetran_utils.snowflake_seed_data", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/snowflake_seed_data.sql", "original_file_path": "macros/snowflake_seed_data.sql", "name": "snowflake_seed_data", "macro_sql": "{% macro snowflake_seed_data(seed_name) %}\n\n{% if target.type == 'snowflake' %}\n{{ return(ref(seed_name ~ '_snowflake')) }}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.037469, "supported_languages": null}, "macro.fivetran_utils.fill_staging_columns": {"unique_id": "macro.fivetran_utils.fill_staging_columns", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "name": "fill_staging_columns", "macro_sql": "{% macro fill_staging_columns(source_columns, staging_columns) -%}\n\n{%- set source_column_names = source_columns|map(attribute='name')|map('lower')|list -%}\n\n{%- for column in staging_columns %}\n    {% if column.name|lower in source_column_names -%}\n        {{ fivetran_utils.quote_column(column) }} as \n        {%- if 'alias' in column %} {{ column.alias }} {% else %} {{ fivetran_utils.quote_column(column) }} {%- endif -%}\n    {%- else -%}\n        cast(null as {{ column.datatype }})\n        {%- if 'alias' in column %} as {{ column.alias }} {% else %} as {{ fivetran_utils.quote_column(column) }} {% endif -%}\n    {%- endif -%}\n    {%- if not loop.last -%} , {% endif -%}\n{% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.quote_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.038989, "supported_languages": null}, "macro.fivetran_utils.quote_column": {"unique_id": "macro.fivetran_utils.quote_column", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "name": "quote_column", "macro_sql": "{% macro quote_column(column) %}\n    {% if 'quote' in column %}\n        {% if column.quote %}\n            {% if target.type in ('bigquery', 'spark') %}\n            `{{ column.name }}`\n            {% elif target.type == 'snowflake' %}\n            \"{{ column.name | upper }}\"\n            {% else %}\n            \"{{ column.name }}\"\n            {% endif %}\n        {% else %}\n        {{ column.name }}\n        {% endif %}\n    {% else %}\n    {{ column.name }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.03952, "supported_languages": null}, "macro.fivetran_utils.json_extract": {"unique_id": "macro.fivetran_utils.json_extract", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "json_extract", "macro_sql": "{% macro json_extract(string, string_path) -%}\n\n{{ adapter.dispatch('json_extract', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.postgres__json_extract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.040119, "supported_languages": null}, "macro.fivetran_utils.default__json_extract": {"unique_id": "macro.fivetran_utils.default__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "default__json_extract", "macro_sql": "{% macro default__json_extract(string, string_path) %}\n\n  json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} )\n \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.040271, "supported_languages": null}, "macro.fivetran_utils.snowflake__json_extract": {"unique_id": "macro.fivetran_utils.snowflake__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "snowflake__json_extract", "macro_sql": "{% macro snowflake__json_extract(string, string_path) %}\n\n  json_extract_path_text(try_parse_json( {{string}} ), {{ \"'\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.0404391, "supported_languages": null}, "macro.fivetran_utils.redshift__json_extract": {"unique_id": "macro.fivetran_utils.redshift__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "redshift__json_extract", "macro_sql": "{% macro redshift__json_extract(string, string_path) %}\n\n  case when is_valid_json( {{string}} ) then json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} ) else null end\n \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.0406132, "supported_languages": null}, "macro.fivetran_utils.bigquery__json_extract": {"unique_id": "macro.fivetran_utils.bigquery__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "bigquery__json_extract", "macro_sql": "{% macro bigquery__json_extract(string, string_path) %}\n\n  json_extract_scalar({{string}}, {{ \"'$.\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.04076, "supported_languages": null}, "macro.fivetran_utils.postgres__json_extract": {"unique_id": "macro.fivetran_utils.postgres__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "postgres__json_extract", "macro_sql": "{% macro postgres__json_extract(string, string_path) %}\n\n  {{string}}::json->>{{\"'\" ~ string_path ~ \"'\" }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.040905, "supported_languages": null}, "macro.fivetran_utils.collect_freshness": {"unique_id": "macro.fivetran_utils.collect_freshness", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/collect_freshness.sql", "original_file_path": "macros/collect_freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.04163, "supported_languages": null}, "macro.fivetran_utils.default__collect_freshness": {"unique_id": "macro.fivetran_utils.default__collect_freshness", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/collect_freshness.sql", "original_file_path": "macros/collect_freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n\n  {%- set enabled_array = [] -%}\n  {% for node in graph.sources.values() %}\n    {% if node.identifier == source.identifier %}\n      {% if (node.meta['is_enabled'] | default(true)) %}\n        {%- do enabled_array.append(1) -%}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n  {% set is_enabled = (enabled_array != []) %}\n\n    select\n      {% if is_enabled %}\n      max({{ loaded_at_field }})\n      {% else %} \n      {{ current_timestamp() }} {% endif %} as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n\n    {% if is_enabled %}\n    from {{ source }}\n      {% if filter %}\n      where {{ filter }}\n      {% endif %}\n    {% endif %}\n\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.042571, "supported_languages": null}, "macro.fivetran_utils.timestamp_add": {"unique_id": "macro.fivetran_utils.timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "timestamp_add", "macro_sql": "{% macro timestamp_add(datepart, interval, from_timestamp) -%}\n\n{{ adapter.dispatch('timestamp_add', 'fivetran_utils') (datepart, interval, from_timestamp) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.postgres__timestamp_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.043301, "supported_languages": null}, "macro.fivetran_utils.default__timestamp_add": {"unique_id": "macro.fivetran_utils.default__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "default__timestamp_add", "macro_sql": "{% macro default__timestamp_add(datepart, interval, from_timestamp) %}\n\n    timestampadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.043461, "supported_languages": null}, "macro.fivetran_utils.bigquery__timestamp_add": {"unique_id": "macro.fivetran_utils.bigquery__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "bigquery__timestamp_add", "macro_sql": "{% macro bigquery__timestamp_add(datepart, interval, from_timestamp) %}\n\n        timestamp_add({{ from_timestamp }}, interval  {{ interval }} {{ datepart }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.0436108, "supported_languages": null}, "macro.fivetran_utils.redshift__timestamp_add": {"unique_id": "macro.fivetran_utils.redshift__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "redshift__timestamp_add", "macro_sql": "{% macro redshift__timestamp_add(datepart, interval, from_timestamp) %}\n\n        dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.043762, "supported_languages": null}, "macro.fivetran_utils.postgres__timestamp_add": {"unique_id": "macro.fivetran_utils.postgres__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "postgres__timestamp_add", "macro_sql": "{% macro postgres__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ from_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.043915, "supported_languages": null}, "macro.fivetran_utils.spark__timestamp_add": {"unique_id": "macro.fivetran_utils.spark__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "spark__timestamp_add", "macro_sql": "{% macro spark__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ dbt.dateadd(datepart, interval, from_timestamp) }}\n        \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.0441442, "supported_languages": null}, "macro.fivetran_utils.ceiling": {"unique_id": "macro.fivetran_utils.ceiling", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "name": "ceiling", "macro_sql": "{% macro ceiling(num) -%}\n\n{{ adapter.dispatch('ceiling', 'fivetran_utils') (num) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__ceiling"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.04446, "supported_languages": null}, "macro.fivetran_utils.default__ceiling": {"unique_id": "macro.fivetran_utils.default__ceiling", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "name": "default__ceiling", "macro_sql": "{% macro default__ceiling(num) %}\n    ceiling({{ num }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.044559, "supported_languages": null}, "macro.fivetran_utils.snowflake__ceiling": {"unique_id": "macro.fivetran_utils.snowflake__ceiling", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "name": "snowflake__ceiling", "macro_sql": "{% macro snowflake__ceiling(num) %}\n    ceil({{ num }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.044656, "supported_languages": null}, "macro.fivetran_utils.remove_prefix_from_columns": {"unique_id": "macro.fivetran_utils.remove_prefix_from_columns", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/remove_prefix_from_columns.sql", "original_file_path": "macros/remove_prefix_from_columns.sql", "name": "remove_prefix_from_columns", "macro_sql": "{% macro remove_prefix_from_columns(columns, prefix='', exclude=[]) %}\n\n        {%- for col in columns if col.name not in exclude -%}\n        {%- if col.name[:prefix|length]|lower == prefix -%}\n        {{ col.name }} as {{ col.name[prefix|length:] }}\n        {%- else -%}\n        {{ col.name }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n        {% endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.045344, "supported_languages": null}, "macro.fivetran_utils.union_data": {"unique_id": "macro.fivetran_utils.union_data", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/union_data.sql", "original_file_path": "macros/union_data.sql", "name": "union_data", "macro_sql": "{% macro union_data(table_identifier, database_variable, schema_variable, default_database, default_schema, default_variable, union_schema_variable='union_schemas', union_database_variable='union_databases') -%}\n\n{{ adapter.dispatch('union_data', 'fivetran_utils') (\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema, \n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__union_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.046688, "supported_languages": null}, "macro.fivetran_utils.default__union_data": {"unique_id": "macro.fivetran_utils.default__union_data", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/union_data.sql", "original_file_path": "macros/union_data.sql", "name": "default__union_data", "macro_sql": "{% macro default__union_data(\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema, \n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) %}\n\n{% if var(union_schema_variable, none) %}\n\n    {% set relations = [] %}\n    \n    {% if var(union_schema_variable) is string %}\n    {% set trimmed = var(union_schema_variable)|trim('[')|trim(']') %}\n    {% set schemas = trimmed.split(',')|map('trim',\" \")|map('trim','\"')|map('trim',\"'\") %}\n    {% else %}\n    {% set schemas = var(union_schema_variable) %}\n    {% endif %}\n\n    {% for schema in var(union_schema_variable) %}\n    {% set relation=adapter.get_relation(\n        database=source(schema, table_identifier).database if var('has_defined_sources', false) else var(database_variable, default_database),\n        schema=source(schema, table_identifier).schema if var('has_defined_sources', false) else schema,\n        identifier=source(schema, table_identifier).identifier if var('has_defined_sources', false) else table_identifier\n    ) -%}\n    \n    {% set relation_exists=relation is not none %}\n\n    {% if relation_exists %}\n\n    {% do relations.append(relation) %}\n    \n    {% endif %}\n\n    {% endfor %}\n\n    {{ dbt_utils.union_relations(relations) }}\n\n{% elif var(union_database_variable, none) %}\n\n    {% set relations = [] %}\n\n    {% for database in var(union_database_variable) %}\n\n    {% set relation=adapter.get_relation(\n        database=source(schema, table_identifier).database if var('has_defined_sources', false) else database,\n        schema=source(schema, table_identifier).schema if var('has_defined_sources', false) else var(schema_variable, default_schema),\n        identifier=source(schema, table_identifier).identifier if var('has_defined_sources', false) else table_identifier\n    ) -%}\n\n    {% set relation_exists=relation is not none %}\n\n    {% if relation_exists %}\n\n    {% do relations.append(relation) %}\n    \n    {% endif %}\n\n    {% endfor %}\n\n    {{ dbt_utils.union_relations(relations) }}\n\n{% else %}\n\n    select * \n    from {{ var(default_variable) }}\n\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.049, "supported_languages": null}, "macro.fivetran_utils.dummy_coalesce_value": {"unique_id": "macro.fivetran_utils.dummy_coalesce_value", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/dummy_coalesce_value.sql", "original_file_path": "macros/dummy_coalesce_value.sql", "name": "dummy_coalesce_value", "macro_sql": "{% macro dummy_coalesce_value(column) %}\n\n{% set coalesce_value = {\n 'STRING': \"'DUMMY_STRING'\",\n 'BOOLEAN': 'null',\n 'INT': 999999999,\n 'FLOAT': 999999999.99,\n 'TIMESTAMP': 'cast(\"2099-12-31\" as timestamp)',\n 'DATE': 'cast(\"2099-12-31\" as date)',\n} %}\n\n{% if column.is_float() %}\n{{ return(coalesce_value['FLOAT']) }}\n\n{% elif column.is_numeric() %}\n{{ return(coalesce_value['INT']) }}\n\n{% elif column.is_string() %}\n{{ return(coalesce_value['STRING']) }}\n\n{% elif column.data_type|lower == 'boolean' %}\n{{ return(coalesce_value['BOOLEAN']) }}\n\n{% elif 'timestamp' in column.data_type|lower %}\n{{ return(coalesce_value['TIMESTAMP']) }}\n\n{% elif 'date' in column.data_type|lower %}\n{{ return(coalesce_value['DATE']) }}\n\n{% elif 'int' in column.data_type|lower %}\n{{ return(coalesce_value['INT']) }}\n\n{% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.05042, "supported_languages": null}, "macro.fivetran_utils.array_agg": {"unique_id": "macro.fivetran_utils.array_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "name": "array_agg", "macro_sql": "{% macro array_agg(field_to_agg) -%}\n\n{{ adapter.dispatch('array_agg', 'fivetran_utils') (field_to_agg) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__array_agg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.050752, "supported_languages": null}, "macro.fivetran_utils.default__array_agg": {"unique_id": "macro.fivetran_utils.default__array_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "name": "default__array_agg", "macro_sql": "{% macro default__array_agg(field_to_agg) %}\n    array_agg({{ field_to_agg }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.050851, "supported_languages": null}, "macro.fivetran_utils.redshift__array_agg": {"unique_id": "macro.fivetran_utils.redshift__array_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "name": "redshift__array_agg", "macro_sql": "{% macro redshift__array_agg(field_to_agg) %}\n    listagg({{ field_to_agg }}, ',')\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.0509481, "supported_languages": null}, "macro.fivetran_utils.empty_variable_warning": {"unique_id": "macro.fivetran_utils.empty_variable_warning", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/empty_variable_warning.sql", "original_file_path": "macros/empty_variable_warning.sql", "name": "empty_variable_warning", "macro_sql": "{% macro empty_variable_warning(variable, downstream_model) %}\n\n{% if not var(variable) %}\n{{ log(\n    \"\"\"\n    Warning: You have passed an empty list to the \"\"\" ~ variable ~ \"\"\".\n    As a result, you won't see the history of any columns in the \"\"\" ~ downstream_model ~ \"\"\" model.\n    \"\"\",\n    info=True\n) }}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.051394, "supported_languages": null}, "macro.fivetran_utils.enabled_vars_one_true": {"unique_id": "macro.fivetran_utils.enabled_vars_one_true", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/fivetran_utils", "path": "macros/enabled_vars_one_true.sql", "original_file_path": "macros/enabled_vars_one_true.sql", "name": "enabled_vars_one_true", "macro_sql": "{% macro enabled_vars_one_true(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, False) == True %}\n    {{ return(True) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(False) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.051841, "supported_languages": null}, "macro.twitter_organic_source.get_organic_tweet_report_columns": {"unique_id": "macro.twitter_organic_source.get_organic_tweet_report_columns", "package_name": "twitter_organic_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/twitter_organic_source", "path": "macros/get_organic_tweet_report_columns.sql", "original_file_path": "macros/get_organic_tweet_report_columns.sql", "name": "get_organic_tweet_report_columns", "macro_sql": "{% macro get_organic_tweet_report_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"app_clicks\", \"datatype\": dbt.type_int()},\n    {\"name\": \"card_engagements\", \"datatype\": dbt.type_int()},\n    {\"name\": \"carousel_swipes\", \"datatype\": dbt.type_int()},\n    {\"name\": \"clicks\", \"datatype\": dbt.type_int()},\n    {\"name\": \"date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"engagements\", \"datatype\": dbt.type_int()},\n    {\"name\": \"follows\", \"datatype\": dbt.type_int()},\n    {\"name\": \"impressions\", \"datatype\": dbt.type_int()},\n    {\"name\": \"likes\", \"datatype\": dbt.type_int()},\n    {\"name\": \"organic_tweet_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"placement\", \"datatype\": dbt.type_string()},\n    {\"name\": \"poll_card_vote\", \"datatype\": dbt.type_int()},\n    {\"name\": \"qualified_impressions\", \"datatype\": dbt.type_int()},\n    {\"name\": \"replies\", \"datatype\": dbt.type_int()},\n    {\"name\": \"retweets\", \"datatype\": dbt.type_int()},\n    {\"name\": \"tweets_send\", \"datatype\": dbt.type_int()},\n    {\"name\": \"unfollows\", \"datatype\": dbt.type_int()},\n    {\"name\": \"url_clicks\", \"datatype\": dbt.type_int()},\n    {\"name\": \"video_15_s_views\", \"datatype\": dbt.type_int()},\n    {\"name\": \"video_3_s_100_pct_views\", \"datatype\": dbt.type_int()},\n    {\"name\": \"video_6_s_views\", \"datatype\": dbt.type_int()},\n    {\"name\": \"video_content_starts\", \"datatype\": dbt.type_int()},\n    {\"name\": \"video_cta_clicks\", \"datatype\": dbt.type_int()},\n    {\"name\": \"video_total_views\", \"datatype\": dbt.type_int()},\n    {\"name\": \"video_views_100\", \"datatype\": dbt.type_int()},\n    {\"name\": \"video_views_25\", \"datatype\": dbt.type_int()},\n    {\"name\": \"video_views_50\", \"datatype\": dbt.type_int()},\n    {\"name\": \"video_views_75\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.05507, "supported_languages": null}, "macro.twitter_organic_source.get_tweet_columns": {"unique_id": "macro.twitter_organic_source.get_tweet_columns", "package_name": "twitter_organic_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/twitter_organic_source", "path": "macros/get_tweet_columns.sql", "original_file_path": "macros/get_tweet_columns.sql", "name": "get_tweet_columns", "macro_sql": "{% macro get_tweet_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"card_uri\", \"datatype\": dbt.type_string()},\n    {\"name\": \"coordinates_coordinates\", \"datatype\": dbt.type_string()},\n    {\"name\": \"coordinates_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"favorite_count\", \"datatype\": dbt.type_int()},\n    {\"name\": \"favorited\", \"datatype\": \"boolean\"},\n    {\"name\": \"followers\", \"datatype\": \"boolean\"},\n    {\"name\": \"full_text\", \"datatype\": dbt.type_string()},\n    {\"name\": \"geo_coordinates\", \"datatype\": dbt.type_string()},\n    {\"name\": \"geo_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"in_reply_to_screen_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"in_reply_to_status_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"in_reply_to_user_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lang\", \"datatype\": dbt.type_string()},\n    {\"name\": \"media_key\", \"datatype\": dbt.type_string()},\n    {\"name\": \"retweet_count\", \"datatype\": dbt.type_int()},\n    {\"name\": \"retweeted\", \"datatype\": \"boolean\"},\n    {\"name\": \"source\", \"datatype\": dbt.type_string()},\n    {\"name\": \"truncated\", \"datatype\": \"boolean\"},\n    {\"name\": \"tweet_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"user_id\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.05758, "supported_languages": null}, "macro.twitter_organic_source.get_twitter_user_history_columns": {"unique_id": "macro.twitter_organic_source.get_twitter_user_history_columns", "package_name": "twitter_organic_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/twitter_organic_source", "path": "macros/get_twitter_user_history_columns.sql", "original_file_path": "macros/get_twitter_user_history_columns.sql", "name": "get_twitter_user_history_columns", "macro_sql": "{% macro get_twitter_user_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"contributors_enabled\", \"datatype\": \"boolean\"},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"default_profile\", \"datatype\": \"boolean\"},\n    {\"name\": \"default_profile_image\", \"datatype\": \"boolean\"},\n    {\"name\": \"description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"favourites_count\", \"datatype\": dbt.type_int()},\n    {\"name\": \"followers_count\", \"datatype\": dbt.type_int()},\n    {\"name\": \"friends_count\", \"datatype\": dbt.type_int()},\n    {\"name\": \"geo_enabled\", \"datatype\": \"boolean\"},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"is_translation_enabled\", \"datatype\": \"boolean\"},\n    {\"name\": \"is_translator\", \"datatype\": \"boolean\"},\n    {\"name\": \"lang\", \"datatype\": dbt.type_string()},\n    {\"name\": \"listed_count\", \"datatype\": dbt.type_int()},\n    {\"name\": \"location\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"profile_background_image_url\", \"datatype\": dbt.type_string()},\n    {\"name\": \"profile_background_image_url_https\", \"datatype\": dbt.type_string()},\n    {\"name\": \"profile_background_tile\", \"datatype\": \"boolean\"},\n    {\"name\": \"profile_banner_url\", \"datatype\": dbt.type_string()},\n    {\"name\": \"profile_image_url\", \"datatype\": dbt.type_string()},\n    {\"name\": \"profile_image_url_https\", \"datatype\": dbt.type_string()},\n    {\"name\": \"profile_use_background_image\", \"datatype\": dbt.type_string()},\n    {\"name\": \"protected_user\", \"datatype\": \"boolean\"},\n    {\"name\": \"screen_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"statuses_count\", \"datatype\": dbt.type_int()},\n    {\"name\": \"time_zone\", \"datatype\": dbt.type_string()},\n    {\"name\": \"url\", \"datatype\": dbt.type_string()},\n    {\"name\": \"utc_offset\", \"datatype\": dbt.type_int()},\n    {\"name\": \"verified\", \"datatype\": \"boolean\"}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.060813, "supported_languages": null}, "macro.twitter_organic_source.get_account_history_columns": {"unique_id": "macro.twitter_organic_source.get_account_history_columns", "package_name": "twitter_organic_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/twitter_organic_source", "path": "macros/get_account_history_columns.sql", "original_file_path": "macros/get_account_history_columns.sql", "name": "get_account_history_columns", "macro_sql": "{% macro get_account_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"approval_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"business_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"business_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"industry_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"salt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"timezone\", \"datatype\": dbt.type_string()},\n    {\"name\": \"timezone_switch_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.062273, "supported_languages": null}, "macro.facebook_pages_source.get_lifetime_post_metrics_total_columns": {"unique_id": "macro.facebook_pages_source.get_lifetime_post_metrics_total_columns", "package_name": "facebook_pages_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/facebook_pages_source", "path": "macros/get_lifetime_post_metrics_total_columns.sql", "original_file_path": "macros/get_lifetime_post_metrics_total_columns.sql", "name": "get_lifetime_post_metrics_total_columns", "macro_sql": "{% macro get_lifetime_post_metrics_total_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"post_activity\", \"datatype\": dbt.type_int()},\n    {\"name\": \"post_clicks\", \"datatype\": dbt.type_int()},\n    {\"name\": \"post_engaged_fan\", \"datatype\": dbt.type_int()},\n    {\"name\": \"post_engaged_users\", \"datatype\": dbt.type_int()},\n    {\"name\": \"post_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"post_impressions\", \"datatype\": dbt.type_int()},\n    {\"name\": \"post_impressions_fan\", \"datatype\": dbt.type_int()},\n    {\"name\": \"post_impressions_fan_paid\", \"datatype\": dbt.type_int()},\n    {\"name\": \"post_impressions_nonviral\", \"datatype\": dbt.type_int()},\n    {\"name\": \"post_impressions_organic\", \"datatype\": dbt.type_int()},\n    {\"name\": \"post_impressions_paid\", \"datatype\": dbt.type_int()},\n    {\"name\": \"post_impressions_viral\", \"datatype\": dbt.type_int()},\n    {\"name\": \"post_negative_feedback\", \"datatype\": dbt.type_int()},\n    {\"name\": \"post_reactions_anger_total\", \"datatype\": dbt.type_int()},\n    {\"name\": \"post_reactions_haha_total\", \"datatype\": dbt.type_int()},\n    {\"name\": \"post_reactions_like_total\", \"datatype\": dbt.type_int()},\n    {\"name\": \"post_reactions_love_total\", \"datatype\": dbt.type_int()},\n    {\"name\": \"post_reactions_sorry_total\", \"datatype\": dbt.type_int()},\n    {\"name\": \"post_reactions_wow_total\", \"datatype\": dbt.type_int()},\n    {\"name\": \"post_video_avg_time_watched\", \"datatype\": dbt.type_int()},\n    {\"name\": \"post_video_complete_views_30_s_autoplayed\", \"datatype\": dbt.type_int()},\n    {\"name\": \"post_video_complete_views_30_s_clicked_to_play\", \"datatype\": dbt.type_int()},\n    {\"name\": \"post_video_complete_views_30_s_organic\", \"datatype\": dbt.type_int()},\n    {\"name\": \"post_video_complete_views_30_s_paid\", \"datatype\": dbt.type_int()},\n    {\"name\": \"post_video_complete_views_organic\", \"datatype\": dbt.type_int()},\n    {\"name\": \"post_video_complete_views_paid\", \"datatype\": dbt.type_int()},\n    {\"name\": \"post_video_length\", \"datatype\": dbt.type_int()},\n    {\"name\": \"post_video_view_time\", \"datatype\": dbt.type_int()},\n    {\"name\": \"post_video_view_time_organic\", \"datatype\": dbt.type_int()},\n    {\"name\": \"post_video_views\", \"datatype\": dbt.type_int()},\n    {\"name\": \"post_video_views_10_s\", \"datatype\": dbt.type_int()},\n    {\"name\": \"post_video_views_10_s_autoplayed\", \"datatype\": dbt.type_int()},\n    {\"name\": \"post_video_views_10_s_clicked_to_play\", \"datatype\": dbt.type_int()},\n    {\"name\": \"post_video_views_10_s_organic\", \"datatype\": dbt.type_int()},\n    {\"name\": \"post_video_views_10_s_paid\", \"datatype\": dbt.type_int()},\n    {\"name\": \"post_video_views_10_s_sound_on\", \"datatype\": dbt.type_int()},\n    {\"name\": \"post_video_views_15_s\", \"datatype\": dbt.type_int()},\n    {\"name\": \"post_video_views_autoplayed\", \"datatype\": dbt.type_int()},\n    {\"name\": \"post_video_views_clicked_to_play\", \"datatype\": dbt.type_int()},\n    {\"name\": \"post_video_views_organic\", \"datatype\": dbt.type_int()},\n    {\"name\": \"post_video_views_paid\", \"datatype\": dbt.type_int()},\n    {\"name\": \"post_video_views_sound_on\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.067209, "supported_languages": null}, "macro.facebook_pages_source.get_page_columns": {"unique_id": "macro.facebook_pages_source.get_page_columns", "package_name": "facebook_pages_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/facebook_pages_source", "path": "macros/get_page_columns.sql", "original_file_path": "macros/get_page_columns.sql", "name": "get_page_columns", "macro_sql": "{% macro get_page_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"affiliation\", \"datatype\": dbt.type_string()},\n    {\"name\": \"app_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"artists_we_like\", \"datatype\": dbt.type_string()},\n    {\"name\": \"attire\", \"datatype\": dbt.type_string()},\n    {\"name\": \"awards\", \"datatype\": dbt.type_string()},\n    {\"name\": \"band_interests\", \"datatype\": dbt.type_string()},\n    {\"name\": \"band_members\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bio\", \"datatype\": dbt.type_string()},\n    {\"name\": \"birthday\", \"datatype\": dbt.type_string()},\n    {\"name\": \"booking_agent\", \"datatype\": dbt.type_string()},\n    {\"name\": \"built\", \"datatype\": dbt.type_string()},\n    {\"name\": \"can_checkin\", \"datatype\": \"boolean\"},\n    {\"name\": \"can_post\", \"datatype\": \"boolean\"},\n    {\"name\": \"category\", \"datatype\": dbt.type_string()},\n    {\"name\": \"category_list\", \"datatype\": dbt.type_string()},\n    {\"name\": \"checkins\", \"datatype\": dbt.type_int()},\n    {\"name\": \"company_overview\", \"datatype\": dbt.type_string()},\n    {\"name\": \"culinary_team\", \"datatype\": dbt.type_string()},\n    {\"name\": \"current_location\", \"datatype\": dbt.type_string()},\n    {\"name\": \"description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"directed_by\", \"datatype\": dbt.type_string()},\n    {\"name\": \"display_subtext\", \"datatype\": dbt.type_string()},\n    {\"name\": \"emails\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fan_count\", \"datatype\": dbt.type_int()},\n    {\"name\": \"features\", \"datatype\": dbt.type_string()},\n    {\"name\": \"food_styles\", \"datatype\": dbt.type_string()},\n    {\"name\": \"founded\", \"datatype\": dbt.type_string()},\n    {\"name\": \"general_info\", \"datatype\": dbt.type_string()},\n    {\"name\": \"general_manager\", \"datatype\": dbt.type_string()},\n    {\"name\": \"genre\", \"datatype\": dbt.type_string()},\n    {\"name\": \"global_brand_page_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"has_added_app\", \"datatype\": \"boolean\"},\n    {\"name\": \"has_transitioned_to_new_page_experience\", \"datatype\": \"boolean\"},\n    {\"name\": \"has_whatsapp_number\", \"datatype\": \"boolean\"},\n    {\"name\": \"hometown\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"impressum\", \"datatype\": dbt.type_string()},\n    {\"name\": \"influences\", \"datatype\": dbt.type_string()},\n    {\"name\": \"is_always_open\", \"datatype\": \"boolean\"},\n    {\"name\": \"is_chain\", \"datatype\": \"boolean\"},\n    {\"name\": \"is_community_page\", \"datatype\": \"boolean\"},\n    {\"name\": \"is_eligible_for_branded_content\", \"datatype\": \"boolean\"},\n    {\"name\": \"is_messenger_bot_get_started_enabled\", \"datatype\": \"boolean\"},\n    {\"name\": \"is_messenger_platform_bot\", \"datatype\": \"boolean\"},\n    {\"name\": \"is_owned\", \"datatype\": \"boolean\"},\n    {\"name\": \"is_permanently_closed\", \"datatype\": \"boolean\"},\n    {\"name\": \"is_published\", \"datatype\": \"boolean\"},\n    {\"name\": \"is_unclaimed\", \"datatype\": \"boolean\"},\n    {\"name\": \"members\", \"datatype\": dbt.type_string()},\n    {\"name\": \"mission\", \"datatype\": dbt.type_string()},\n    {\"name\": \"mpg\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"network\", \"datatype\": dbt.type_string()},\n    {\"name\": \"new_like_count\", \"datatype\": dbt.type_int()},\n    {\"name\": \"overall_star_rating\", \"datatype\": dbt.type_float()},\n    {\"name\": \"personal_info\", \"datatype\": dbt.type_string()},\n    {\"name\": \"personal_interests\", \"datatype\": dbt.type_string()},\n    {\"name\": \"pharma_safety_info\", \"datatype\": dbt.type_string()},\n    {\"name\": \"phone\", \"datatype\": dbt.type_string()},\n    {\"name\": \"place_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"plot_outline\", \"datatype\": dbt.type_string()},\n    {\"name\": \"press_contact\", \"datatype\": dbt.type_string()},\n    {\"name\": \"price_range\", \"datatype\": dbt.type_string()},\n    {\"name\": \"produced_by\", \"datatype\": dbt.type_string()},\n    {\"name\": \"products\", \"datatype\": dbt.type_string()},\n    {\"name\": \"promotion_eligible\", \"datatype\": \"boolean\"},\n    {\"name\": \"promotion_ineligible_reason\", \"datatype\": dbt.type_string()},\n    {\"name\": \"public_transit\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rating_count\", \"datatype\": dbt.type_int()},\n    {\"name\": \"record_label\", \"datatype\": dbt.type_string()},\n    {\"name\": \"release_date\", \"datatype\": dbt.type_string()},\n    {\"name\": \"schedule\", \"datatype\": dbt.type_string()},\n    {\"name\": \"screenplay_by\", \"datatype\": dbt.type_string()},\n    {\"name\": \"season\", \"datatype\": dbt.type_string()},\n    {\"name\": \"single_line_address\", \"datatype\": dbt.type_string()},\n    {\"name\": \"starring\", \"datatype\": dbt.type_string()},\n    {\"name\": \"store_number\", \"datatype\": dbt.type_int()},\n    {\"name\": \"studio\", \"datatype\": dbt.type_string()},\n    {\"name\": \"talking_about_count\", \"datatype\": dbt.type_int()},\n    {\"name\": \"username\", \"datatype\": dbt.type_string()},\n    {\"name\": \"website\", \"datatype\": dbt.type_string()},\n    {\"name\": \"were_here_count\", \"datatype\": dbt.type_int()},\n    {\"name\": \"whatsapp_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"written_by\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.077425, "supported_languages": null}, "macro.facebook_pages_source.get_post_history_columns": {"unique_id": "macro.facebook_pages_source.get_post_history_columns", "package_name": "facebook_pages_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/facebook_pages_source", "path": "macros/get_post_history_columns.sql", "original_file_path": "macros/get_post_history_columns.sql", "name": "get_post_history_columns", "macro_sql": "{% macro get_post_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"allowed_advertising_objects\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_time\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"is_eligible_for_promotion\", \"datatype\": \"boolean\"},\n    {\"name\": \"is_hidden\", \"datatype\": \"boolean\"},\n    {\"name\": \"is_instagram_eligible\", \"datatype\": \"boolean\"},\n    {\"name\": \"is_published\", \"datatype\": \"boolean\"},\n    {\"name\": \"message\", \"datatype\": dbt.type_string()},\n    {\"name\": \"page_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"parent_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"privacy_allow\", \"datatype\": dbt.type_string()},\n    {\"name\": \"privacy_deny\", \"datatype\": dbt.type_string()},\n    {\"name\": \"privacy_description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"privacy_friends\", \"datatype\": dbt.type_string()},\n    {\"name\": \"privacy_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"promotable_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"share_count\", \"datatype\": dbt.type_int()},\n    {\"name\": \"status_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_time\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.079586, "supported_languages": null}, "macro.facebook_pages_source.get_daily_page_metrics_total_columns": {"unique_id": "macro.facebook_pages_source.get_daily_page_metrics_total_columns", "package_name": "facebook_pages_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/facebook_pages_source", "path": "macros/get_daily_page_metrics_total_columns.sql", "original_file_path": "macros/get_daily_page_metrics_total_columns.sql", "name": "get_daily_page_metrics_total_columns", "macro_sql": "{% macro get_daily_page_metrics_total_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"page_actions_post_reactions_anger_total\", \"datatype\": dbt.type_int()},\n    {\"name\": \"page_actions_post_reactions_haha_total\", \"datatype\": dbt.type_int()},\n    {\"name\": \"page_actions_post_reactions_like_total\", \"datatype\": dbt.type_int()},\n    {\"name\": \"page_actions_post_reactions_love_total\", \"datatype\": dbt.type_int()},\n    {\"name\": \"page_actions_post_reactions_sorry_total\", \"datatype\": dbt.type_int()},\n    {\"name\": \"page_actions_post_reactions_total\", \"datatype\": dbt.type_int()},\n    {\"name\": \"page_actions_post_reactions_wow_total\", \"datatype\": dbt.type_int()},\n    {\"name\": \"page_consumptions\", \"datatype\": dbt.type_int()},\n    {\"name\": \"page_content_activity\", \"datatype\": dbt.type_int()},\n    {\"name\": \"page_engaged_users\", \"datatype\": dbt.type_int()},\n    {\"name\": \"page_fan_adds\", \"datatype\": dbt.type_int()},\n    {\"name\": \"page_fan_removes\", \"datatype\": dbt.type_int()},\n    {\"name\": \"page_fans\", \"datatype\": dbt.type_int()},\n    {\"name\": \"page_fans_online_per_day\", \"datatype\": dbt.type_int()},\n    {\"name\": \"page_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"page_impressions\", \"datatype\": dbt.type_int()},\n    {\"name\": \"page_impressions_nonviral\", \"datatype\": dbt.type_int()},\n    {\"name\": \"page_impressions_organic\", \"datatype\": dbt.type_int()},\n    {\"name\": \"page_impressions_paid\", \"datatype\": dbt.type_int()},\n    {\"name\": \"page_impressions_viral\", \"datatype\": dbt.type_int()},\n    {\"name\": \"page_negative_feedback\", \"datatype\": dbt.type_int()},\n    {\"name\": \"page_places_checkin_mobile\", \"datatype\": dbt.type_int()},\n    {\"name\": \"page_places_checkin_total\", \"datatype\": dbt.type_int()},\n    {\"name\": \"page_post_engagements\", \"datatype\": dbt.type_int()},\n    {\"name\": \"page_posts_impressions\", \"datatype\": dbt.type_int()},\n    {\"name\": \"page_posts_impressions_nonviral\", \"datatype\": dbt.type_int()},\n    {\"name\": \"page_posts_impressions_organic\", \"datatype\": dbt.type_int()},\n    {\"name\": \"page_posts_impressions_paid\", \"datatype\": dbt.type_int()},\n    {\"name\": \"page_posts_impressions_viral\", \"datatype\": dbt.type_int()},\n    {\"name\": \"page_total_actions\", \"datatype\": dbt.type_int()},\n    {\"name\": \"page_video_complete_views_30_s\", \"datatype\": dbt.type_int()},\n    {\"name\": \"page_video_complete_views_30_s_autoplayed\", \"datatype\": dbt.type_int()},\n    {\"name\": \"page_video_complete_views_30_s_click_to_play\", \"datatype\": dbt.type_int()},\n    {\"name\": \"page_video_complete_views_30_s_organic\", \"datatype\": dbt.type_int()},\n    {\"name\": \"page_video_complete_views_30_s_paid\", \"datatype\": dbt.type_int()},\n    {\"name\": \"page_video_complete_views_30_s_repeat_views\", \"datatype\": dbt.type_int()},\n    {\"name\": \"page_video_repeat_views\", \"datatype\": dbt.type_int()},\n    {\"name\": \"page_video_view_time\", \"datatype\": dbt.type_int()},\n    {\"name\": \"page_video_views\", \"datatype\": dbt.type_int()},\n    {\"name\": \"page_video_views_10_s\", \"datatype\": dbt.type_int()},\n    {\"name\": \"page_video_views_10_s_autoplayed\", \"datatype\": dbt.type_int()},\n    {\"name\": \"page_video_views_10_s_click_to_play\", \"datatype\": dbt.type_int()},\n    {\"name\": \"page_video_views_10_s_organic\", \"datatype\": dbt.type_int()},\n    {\"name\": \"page_video_views_10_s_paid\", \"datatype\": dbt.type_int()},\n    {\"name\": \"page_video_views_10_s_repeat\", \"datatype\": dbt.type_int()},\n    {\"name\": \"page_video_views_autoplayed\", \"datatype\": dbt.type_int()},\n    {\"name\": \"page_video_views_click_to_play\", \"datatype\": dbt.type_int()},\n    {\"name\": \"page_video_views_organic\", \"datatype\": dbt.type_int()},\n    {\"name\": \"page_video_views_paid\", \"datatype\": dbt.type_int()},\n    {\"name\": \"page_views_external_referrals\", \"datatype\": dbt.type_int()},\n    {\"name\": \"page_views_logged_in_total\", \"datatype\": dbt.type_int()},\n    {\"name\": \"page_views_logout\", \"datatype\": dbt.type_int()},\n    {\"name\": \"page_views_total\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.086001, "supported_languages": null}, "macro.instagram_business_source.get_media_history_columns": {"unique_id": "macro.instagram_business_source.get_media_history_columns", "package_name": "instagram_business_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/instagram_business_source", "path": "macros/get_media_history_columns.sql", "original_file_path": "macros/get_media_history_columns.sql", "name": "get_media_history_columns", "macro_sql": "{% macro get_media_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"caption\", \"datatype\": dbt.type_string()},\n    {\"name\": \"carousel_album_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"created_time\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"ig_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"is_comment_enabled\", \"datatype\": \"boolean\"},\n    {\"name\": \"is_story\", \"datatype\": \"boolean\"},\n    {\"name\": \"media_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"media_url\", \"datatype\": dbt.type_string()},\n    {\"name\": \"permalink\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shortcode\", \"datatype\": dbt.type_string()},\n    {\"name\": \"thumbnail_url\", \"datatype\": dbt.type_string()},\n    {\"name\": \"user_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"username\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.087735, "supported_languages": null}, "macro.instagram_business_source.get_media_insights_columns": {"unique_id": "macro.instagram_business_source.get_media_insights_columns", "package_name": "instagram_business_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/instagram_business_source", "path": "macros/get_media_insights_columns.sql", "original_file_path": "macros/get_media_insights_columns.sql", "name": "get_media_insights_columns", "macro_sql": "{% macro get_media_insights_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"carousel_album_engagement\", \"datatype\": dbt.type_int()},\n    {\"name\": \"carousel_album_impressions\", \"datatype\": dbt.type_int()},\n    {\"name\": \"carousel_album_reach\", \"datatype\": dbt.type_int()},\n    {\"name\": \"carousel_album_saved\", \"datatype\": dbt.type_int()},\n    {\"name\": \"carousel_album_video_views\", \"datatype\": dbt.type_int()},\n    {\"name\": \"comment_count\", \"datatype\": dbt.type_int()},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"like_count\", \"datatype\": dbt.type_int()},\n    {\"name\": \"story_exits\", \"datatype\": dbt.type_int()},\n    {\"name\": \"story_impressions\", \"datatype\": dbt.type_int()},\n    {\"name\": \"story_reach\", \"datatype\": dbt.type_int()},\n    {\"name\": \"story_replies\", \"datatype\": dbt.type_int()},\n    {\"name\": \"story_taps_back\", \"datatype\": dbt.type_int()},\n    {\"name\": \"story_taps_forward\", \"datatype\": dbt.type_int()},\n    {\"name\": \"video_photo_engagement\", \"datatype\": dbt.type_int()},\n    {\"name\": \"video_photo_impressions\", \"datatype\": dbt.type_int()},\n    {\"name\": \"video_photo_reach\", \"datatype\": dbt.type_int()},\n    {\"name\": \"video_photo_saved\", \"datatype\": dbt.type_int()},\n    {\"name\": \"video_views\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.090013, "supported_languages": null}, "macro.instagram_business_source.get_user_history_columns": {"unique_id": "macro.instagram_business_source.get_user_history_columns", "package_name": "instagram_business_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/instagram_business_source", "path": "macros/get_user_history_columns.sql", "original_file_path": "macros/get_user_history_columns.sql", "name": "get_user_history_columns", "macro_sql": "{% macro get_user_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"followers_count\", \"datatype\": dbt.type_int()},\n    {\"name\": \"follows_count\", \"datatype\": dbt.type_int()},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"ig_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"media_count\", \"datatype\": dbt.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"username\", \"datatype\": dbt.type_string()},\n    {\"name\": \"website\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.091202, "supported_languages": null}, "macro.social_media_reporting.get_staging_files": {"unique_id": "macro.social_media_reporting.get_staging_files", "package_name": "social_media_reporting", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/social_media_reporting", "path": "macros/get_staging_files.sql", "original_file_path": "macros/get_staging_files.sql", "name": "get_staging_files", "macro_sql": "{% macro get_staging_files() %}\n\n    {% set staging_file = [] %}\n\n    {% if var('social_media_rollup__twitter_enabled') %} \n    {% set _ = staging_file.append(ref('social_media_reporting__twitter_posts_reporting')) %}\n    {% endif %}\n\n    {% if var('social_media_rollup__facebook_enabled') %} \n    {% set _ = staging_file.append(ref('social_media_reporting__facebook_posts_reporting')) %}\n    {% endif %}\n\n    {% if var('social_media_rollup__linkedin_enabled') %} \n    {% set _ = staging_file.append(ref('social_media_reporting__linkedin_posts_reporting')) %}\n    {% endif %}\n\n    {% if var('social_media_rollup__instagram_enabled') %} \n    {% set _ = staging_file.append(ref('social_media_reporting__instagram_posts_reporting')) %}\n    {% endif %}\n\n\n    {{ return(staging_file) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1671477151.0922601, "supported_languages": null}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}, "twitter_organic_source._fivetran_synced": {"unique_id": "twitter_organic_source._fivetran_synced", "package_name": "twitter_organic_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/twitter_organic_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "_fivetran_synced", "block_contents": "When the record was last synced by Fivetran."}, "twitter_organic_source.is_most_recent_record": {"unique_id": "twitter_organic_source.is_most_recent_record", "package_name": "twitter_organic_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/social_media_reporting/dbt_social_media_reporting/integration_tests/dbt_packages/twitter_organic_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "is_most_recent_record", "block_contents": "Boolean representing whether a record is the most recent version of that record. All records should have this value set to True given we filter on it."}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"seed.social_media_rollup_integration_tests.instagram_business_media_insights_data": [], "seed.social_media_rollup_integration_tests.linkedin_pages_share_statistic_data": [], "seed.social_media_rollup_integration_tests.linkedin_pages_ugc_post_share_content_media_data": [], "seed.social_media_rollup_integration_tests.linkedin_pages_organization_ugc_post_data": [], "seed.social_media_rollup_integration_tests.twitter_organic_tweet_data": [], "seed.social_media_rollup_integration_tests.instagram_business_user_history_data": [], "seed.social_media_rollup_integration_tests.twitter_organic_organic_tweet_report_data": [], "seed.social_media_rollup_integration_tests.linkedin_pages_ugc_post_history_data": [], "seed.social_media_rollup_integration_tests.facebook_pages_lifetime_post_metrics_total_data": [], "seed.social_media_rollup_integration_tests.linkedin_pages_organization_data": [], "seed.social_media_rollup_integration_tests.instagram_business_media_history_data": [], "seed.social_media_rollup_integration_tests.facebook_pages_post_history_data": [], "seed.social_media_rollup_integration_tests.facebook_pages_page_data": [], "seed.social_media_rollup_integration_tests.twitter_organic_twitter_user_history_data": [], "seed.social_media_rollup_integration_tests.facebook_pages_daily_page_metrics_total_data": [], "seed.social_media_rollup_integration_tests.twitter_organic_account_history_data": [], "seed.social_media_rollup_integration_tests.linkedin_pages_ugc_post_share_statistic_data": [], "model.instagram_business.instagram_business__posts": ["model.instagram_business_source.stg_instagram_business__media_history", "model.instagram_business_source.stg_instagram_business__media_insights", "model.instagram_business_source.stg_instagram_business__user_history"], "model.twitter_organic.twitter_organic__tweets": ["model.twitter_organic.int_twitter_organic__latest_account", "model.twitter_organic.int_twitter_organic__latest_user", "model.twitter_organic_source.stg_twitter_organic__organic_tweet_report", "model.twitter_organic_source.stg_twitter_organic__tweet"], "model.twitter_organic.int_twitter_organic__latest_account": ["model.twitter_organic_source.stg_twitter_organic__account_history"], "model.twitter_organic.int_twitter_organic__latest_user": ["model.twitter_organic_source.stg_twitter_organic__twitter_user_history"], "model.linkedin_pages_source.stg_linkedin_pages__share_statistic": ["model.linkedin_pages_source.stg_linkedin_pages__share_statistic_tmp", "model.linkedin_pages_source.stg_linkedin_pages__share_statistic_tmp"], "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_content_media": ["model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_media_tmp", "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_media_tmp"], "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_history": ["model.linkedin_pages_source.stg_linkedin_pages__ugc_post_history_tmp", "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_history_tmp"], "model.linkedin_pages_source.stg_linkedin_pages__organization": ["model.linkedin_pages_source.stg_linkedin_pages__organization_tmp", "model.linkedin_pages_source.stg_linkedin_pages__organization_tmp"], "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_statistic": ["model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_statistic_tmp", "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_statistic_tmp"], "model.linkedin_pages_source.stg_linkedin_pages__organization_ugc_post": ["model.linkedin_pages_source.stg_linkedin_pages__organization_ugc_post_tmp", "model.linkedin_pages_source.stg_linkedin_pages__organization_ugc_post_tmp"], "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_history_tmp": ["seed.social_media_rollup_integration_tests.linkedin_pages_ugc_post_history_data"], "model.linkedin_pages_source.stg_linkedin_pages__organization_tmp": ["seed.social_media_rollup_integration_tests.linkedin_pages_organization_data", "seed.social_media_rollup_integration_tests.linkedin_pages_organization_data"], "model.linkedin_pages_source.stg_linkedin_pages__organization_ugc_post_tmp": ["seed.social_media_rollup_integration_tests.linkedin_pages_organization_ugc_post_data"], "model.linkedin_pages_source.stg_linkedin_pages__share_statistic_tmp": ["seed.social_media_rollup_integration_tests.linkedin_pages_share_statistic_data"], "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_statistic_tmp": ["seed.social_media_rollup_integration_tests.linkedin_pages_ugc_post_share_statistic_data"], "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_media_tmp": ["seed.social_media_rollup_integration_tests.linkedin_pages_ugc_post_share_content_media_data"], "model.facebook_pages.facebook_pages__pages_report": ["model.facebook_pages_source.stg_facebook_pages__daily_page_metrics_total", "model.facebook_pages_source.stg_facebook_pages__page"], "model.facebook_pages.facebook_pages__posts_report": ["model.facebook_pages.int_facebook_pages__lastest_post", "model.facebook_pages_source.stg_facebook_pages__lifetime_post_metrics_total", "model.facebook_pages_source.stg_facebook_pages__page"], "model.facebook_pages.int_facebook_pages__lastest_post": ["model.facebook_pages_source.stg_facebook_pages__post_history"], "model.twitter_organic_source.stg_twitter_organic__twitter_user_history": ["model.twitter_organic_source.stg_twitter_organic__twitter_user_history_tmp", "model.twitter_organic_source.stg_twitter_organic__twitter_user_history_tmp"], "model.twitter_organic_source.stg_twitter_organic__tweet": ["model.twitter_organic_source.stg_twitter_organic__tweet_tmp", "model.twitter_organic_source.stg_twitter_organic__tweet_tmp"], "model.twitter_organic_source.stg_twitter_organic__account_history": ["model.twitter_organic_source.stg_twitter_organic__account_history_tmp", "model.twitter_organic_source.stg_twitter_organic__account_history_tmp"], "model.twitter_organic_source.stg_twitter_organic__organic_tweet_report": ["model.twitter_organic_source.stg_twitter_organic__organic_tweet_report_tmp", "model.twitter_organic_source.stg_twitter_organic__organic_tweet_report_tmp"], "model.twitter_organic_source.stg_twitter_organic__tweet_tmp": ["seed.social_media_rollup_integration_tests.twitter_organic_tweet_data"], "model.twitter_organic_source.stg_twitter_organic__twitter_user_history_tmp": ["seed.social_media_rollup_integration_tests.twitter_organic_twitter_user_history_data"], "model.twitter_organic_source.stg_twitter_organic__account_history_tmp": ["seed.social_media_rollup_integration_tests.twitter_organic_account_history_data"], "model.twitter_organic_source.stg_twitter_organic__organic_tweet_report_tmp": ["seed.social_media_rollup_integration_tests.twitter_organic_organic_tweet_report_data"], "model.facebook_pages_source.stg_facebook_pages__post_history": ["model.facebook_pages_source.stg_facebook_pages__post_history_tmp", "model.facebook_pages_source.stg_facebook_pages__post_history_tmp"], "model.facebook_pages_source.stg_facebook_pages__page": ["model.facebook_pages_source.stg_facebook_pages__page_tmp", "model.facebook_pages_source.stg_facebook_pages__page_tmp"], "model.facebook_pages_source.stg_facebook_pages__daily_page_metrics_total": ["model.facebook_pages_source.stg_facebook_pages__daily_page_metrics_total_tmp", "model.facebook_pages_source.stg_facebook_pages__daily_page_metrics_total_tmp"], "model.facebook_pages_source.stg_facebook_pages__lifetime_post_metrics_total": ["model.facebook_pages_source.stg_facebook_pages__lifetime_post_metrics_total_tmp", "model.facebook_pages_source.stg_facebook_pages__lifetime_post_metrics_total_tmp"], "model.facebook_pages_source.stg_facebook_pages__lifetime_post_metrics_total_tmp": ["seed.social_media_rollup_integration_tests.facebook_pages_lifetime_post_metrics_total_data"], "model.facebook_pages_source.stg_facebook_pages__page_tmp": ["seed.social_media_rollup_integration_tests.facebook_pages_page_data"], "model.facebook_pages_source.stg_facebook_pages__daily_page_metrics_total_tmp": ["seed.social_media_rollup_integration_tests.facebook_pages_daily_page_metrics_total_data"], "model.facebook_pages_source.stg_facebook_pages__post_history_tmp": ["seed.social_media_rollup_integration_tests.facebook_pages_post_history_data"], "model.linkedin_pages.linkedin_pages__posts": ["model.linkedin_pages.int_linkedin_pages__latest_post", "model.linkedin_pages.int_linkedin_pages__latest_post_history", "model.linkedin_pages_source.stg_linkedin_pages__organization", "model.linkedin_pages_source.stg_linkedin_pages__organization_ugc_post", "model.linkedin_pages_source.stg_linkedin_pages__share_statistic", "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_content_media"], "model.linkedin_pages.int_linkedin_pages__latest_post_history": ["model.linkedin_pages_source.stg_linkedin_pages__ugc_post_history"], "model.linkedin_pages.int_linkedin_pages__latest_post": ["model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_statistic"], "model.instagram_business_source.stg_instagram_business__user_history": ["model.instagram_business_source.stg_instagram_business__user_history_tmp", "model.instagram_business_source.stg_instagram_business__user_history_tmp"], "model.instagram_business_source.stg_instagram_business__media_insights": ["model.instagram_business_source.stg_instagram_business__media_insights_tmp", "model.instagram_business_source.stg_instagram_business__media_insights_tmp"], "model.instagram_business_source.stg_instagram_business__media_history": ["model.instagram_business_source.stg_instagram_business__media_history_tmp", "model.instagram_business_source.stg_instagram_business__media_history_tmp"], "model.instagram_business_source.stg_instagram_business__media_insights_tmp": ["seed.social_media_rollup_integration_tests.instagram_business_media_insights_data"], "model.instagram_business_source.stg_instagram_business__user_history_tmp": ["seed.social_media_rollup_integration_tests.instagram_business_user_history_data"], "model.instagram_business_source.stg_instagram_business__media_history_tmp": ["seed.social_media_rollup_integration_tests.instagram_business_media_history_data"], "model.social_media_reporting.social_media_reporting__rollup_report": ["model.social_media_reporting.social_media_reporting__facebook_posts_reporting", "model.social_media_reporting.social_media_reporting__instagram_posts_reporting", "model.social_media_reporting.social_media_reporting__linkedin_posts_reporting", "model.social_media_reporting.social_media_reporting__twitter_posts_reporting"], "model.social_media_reporting.social_media_reporting__twitter_posts_reporting": ["model.twitter_organic.twitter_organic__tweets"], "model.social_media_reporting.social_media_reporting__facebook_posts_reporting": ["model.facebook_pages.facebook_pages__posts_report"], "model.social_media_reporting.social_media_reporting__instagram_posts_reporting": ["model.instagram_business.instagram_business__posts"], "model.social_media_reporting.social_media_reporting__linkedin_posts_reporting": ["model.linkedin_pages.linkedin_pages__posts"], "test.instagram_business.not_null_instagram_business__posts_post_id.8daa517f7d": ["model.instagram_business.instagram_business__posts"], "test.instagram_business.dbt_utils_unique_combination_of_columns_instagram_business__posts_post_id__source_relation.5a8087988b": ["model.instagram_business.instagram_business__posts"], "test.twitter_organic.dbt_utils_unique_combination_of_columns_twitter_organic__tweets_date_day__organic_tweet_id__source_relation.b4415b6f20": ["model.twitter_organic.twitter_organic__tweets"], "test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__organization_ugc_post_organization_id__ugc_post_id__source_relation.74490569e1": ["model.linkedin_pages_source.stg_linkedin_pages__organization_ugc_post"], "test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__organization_organization_id__source_relation.edd32b54a1": ["model.linkedin_pages_source.stg_linkedin_pages__organization"], "test.linkedin_pages_source.not_null_stg_linkedin_pages__share_statistic_organization_entity_urn.150c878c76": ["model.linkedin_pages_source.stg_linkedin_pages__share_statistic"], "test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__share_statistic_share_statistic_id__source_relation.452f64d50a": ["model.linkedin_pages_source.stg_linkedin_pages__share_statistic"], "test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__ugc_post_history_ugc_post_id__last_modified_timestamp__source_relation.8192e4952b": ["model.linkedin_pages_source.stg_linkedin_pages__ugc_post_history"], "test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__ugc_post_share_content_media_ugc_post_id__last_modified_timestamp__source_relation.f629d7cf4d": ["model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_content_media"], "test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__ugc_post_share_statistic_share_statistic_id__source_relation.10bd19bf37": ["model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_statistic"], "test.facebook_pages.not_null_facebook_pages__posts_report_date_day.ec0cb997b7": ["model.facebook_pages.facebook_pages__posts_report"], "test.facebook_pages.dbt_utils_unique_combination_of_columns_facebook_pages__posts_report_post_id__date_day__source_relation.19483d54fa": ["model.facebook_pages.facebook_pages__posts_report"], "test.facebook_pages.not_null_facebook_pages__pages_report_page_id.42b740bfbe": ["model.facebook_pages.facebook_pages__pages_report"], "test.facebook_pages.not_null_facebook_pages__pages_report_date_day.0d88b4b154": ["model.facebook_pages.facebook_pages__pages_report"], "test.facebook_pages.dbt_utils_unique_combination_of_columns_facebook_pages__pages_report_page_id__date_day__source_relation.f6275f55a9": ["model.facebook_pages.facebook_pages__pages_report"], "test.twitter_organic_source.not_null_stg_twitter_organic__account_history_account_id.a77a3afb85": ["model.twitter_organic_source.stg_twitter_organic__account_history"], "test.twitter_organic_source.dbt_utils_unique_combination_of_columns_stg_twitter_organic__account_history_account_id__updated_timestamp__source_relation.41e71af7e1": ["model.twitter_organic_source.stg_twitter_organic__account_history"], "test.twitter_organic_source.not_null_stg_twitter_organic__organic_tweet_report_account_id.2e0dfb4d1a": ["model.twitter_organic_source.stg_twitter_organic__organic_tweet_report"], "test.twitter_organic_source.not_null_stg_twitter_organic__organic_tweet_report_organic_tweet_id.300639fcfb": ["model.twitter_organic_source.stg_twitter_organic__organic_tweet_report"], "test.twitter_organic_source.dbt_utils_unique_combination_of_columns_stg_twitter_organic__organic_tweet_report_account_id__organic_tweet_id__date_day__source_relation.4a121854e5": ["model.twitter_organic_source.stg_twitter_organic__organic_tweet_report"], "test.twitter_organic_source.not_null_stg_twitter_organic__tweet_account_id.babfc0e1e9": ["model.twitter_organic_source.stg_twitter_organic__tweet"], "test.twitter_organic_source.not_null_stg_twitter_organic__tweet_organic_tweet_id.1d21df5ac1": ["model.twitter_organic_source.stg_twitter_organic__tweet"], "test.twitter_organic_source.dbt_utils_unique_combination_of_columns_stg_twitter_organic__tweet_organic_tweet_id__source_relation.9c43fbcfa6": ["model.twitter_organic_source.stg_twitter_organic__tweet"], "test.twitter_organic_source.not_null_stg_twitter_organic__twitter_user_history_user_id.5d6e14a6ce": ["model.twitter_organic_source.stg_twitter_organic__twitter_user_history"], "test.twitter_organic_source.dbt_utils_unique_combination_of_columns_stg_twitter_organic__twitter_user_history_user_id__source_relation.577d45a09a": ["model.twitter_organic_source.stg_twitter_organic__twitter_user_history"], "test.facebook_pages_source.not_null_stg_facebook_pages__daily_page_metrics_total_date_day.880eb929d5": ["model.facebook_pages_source.stg_facebook_pages__daily_page_metrics_total"], "test.facebook_pages_source.not_null_stg_facebook_pages__daily_page_metrics_total_page_id.937414eaf3": ["model.facebook_pages_source.stg_facebook_pages__daily_page_metrics_total"], "test.facebook_pages_source.dbt_utils_unique_combination_of_columns_stg_facebook_pages__daily_page_metrics_total_page_id__date_day__source_relation.b90aa3f043": ["model.facebook_pages_source.stg_facebook_pages__daily_page_metrics_total"], "test.facebook_pages_source.not_null_stg_facebook_pages__lifetime_post_metrics_total_date_day.de0419d721": ["model.facebook_pages_source.stg_facebook_pages__lifetime_post_metrics_total"], "test.facebook_pages_source.not_null_stg_facebook_pages__lifetime_post_metrics_total_post_id.66563712ec": ["model.facebook_pages_source.stg_facebook_pages__lifetime_post_metrics_total"], "test.facebook_pages_source.dbt_utils_unique_combination_of_columns_stg_facebook_pages__lifetime_post_metrics_total_post_id__date_day__source_relation.c12787b228": ["model.facebook_pages_source.stg_facebook_pages__lifetime_post_metrics_total"], "test.facebook_pages_source.not_null_stg_facebook_pages__page_page_id.3839292889": ["model.facebook_pages_source.stg_facebook_pages__page"], "test.facebook_pages_source.dbt_utils_unique_combination_of_columns_stg_facebook_pages__page_page_id__source_relation.32a7459a05": ["model.facebook_pages_source.stg_facebook_pages__page"], "test.facebook_pages_source.not_null_stg_facebook_pages__post_history_post_id.fd3293856c": ["model.facebook_pages_source.stg_facebook_pages__post_history"], "test.facebook_pages_source.dbt_utils_unique_combination_of_columns_stg_facebook_pages__post_history_post_id__updated_timestamp__source_relation.67de991272": ["model.facebook_pages_source.stg_facebook_pages__post_history"], "test.linkedin_pages.dbt_utils_unique_combination_of_columns_linkedin_pages__posts_ugc_post_id__source_relation.d7c3d11ad1": ["model.linkedin_pages.linkedin_pages__posts"], "test.instagram_business_source.not_null_stg_instagram_business__media_history__fivetran_id.cfe4889ca2": ["model.instagram_business_source.stg_instagram_business__media_history"], "test.instagram_business_source.not_null_stg_instagram_business__media_history_post_id.878653b6a5": ["model.instagram_business_source.stg_instagram_business__media_history"], "test.instagram_business_source.dbt_utils_unique_combination_of_columns_stg_instagram_business__media_history__fivetran_id__post_id__source_relation.57e3622790": ["model.instagram_business_source.stg_instagram_business__media_history"], "test.instagram_business_source.not_null_stg_instagram_business__media_insights__fivetran_id.5cc95a9508": ["model.instagram_business_source.stg_instagram_business__media_insights"], "test.instagram_business_source.not_null_stg_instagram_business__media_insights_post_id.f6e59f012e": ["model.instagram_business_source.stg_instagram_business__media_insights"], "test.instagram_business_source.dbt_utils_unique_combination_of_columns_stg_instagram_business__media_insights__fivetran_id__post_id__source_relation.0f78b7064e": ["model.instagram_business_source.stg_instagram_business__media_insights"], "test.instagram_business_source.not_null_stg_instagram_business__user_history__fivetran_id.726c530904": ["model.instagram_business_source.stg_instagram_business__user_history"], "test.instagram_business_source.not_null_stg_instagram_business__user_history_user_id.72a7df3526": ["model.instagram_business_source.stg_instagram_business__user_history"], "test.instagram_business_source.dbt_utils_unique_combination_of_columns_stg_instagram_business__user_history__fivetran_id__user_id__source_relation.1fc678e6cf": ["model.instagram_business_source.stg_instagram_business__user_history"], "test.social_media_reporting.dbt_utils_unique_combination_of_columns_social_media_reporting__rollup_report_post_id__platform__source_relation.9985a561ef": ["model.social_media_reporting.social_media_reporting__rollup_report"], "source.linkedin_pages_source.linkedin_pages.share_statistic": [], "source.linkedin_pages_source.linkedin_pages.ugc_post_share_statistic": [], "source.linkedin_pages_source.linkedin_pages.ugc_post_history": [], "source.linkedin_pages_source.linkedin_pages.ugc_post_share_content_media": [], "source.linkedin_pages_source.linkedin_pages.organization": [], "source.linkedin_pages_source.linkedin_pages.organization_ugc_post": [], "source.twitter_organic_source.twitter_organic.account_history": [], "source.twitter_organic_source.twitter_organic.organic_tweet_report": [], "source.twitter_organic_source.twitter_organic.tweet": [], "source.twitter_organic_source.twitter_organic.twitter_user_history": [], "source.facebook_pages_source.facebook_pages.post_history": [], "source.facebook_pages_source.facebook_pages.page": [], "source.facebook_pages_source.facebook_pages.lifetime_post_metrics_total": [], "source.facebook_pages_source.facebook_pages.daily_page_metrics_total": [], "source.instagram_business_source.instagram_business.media_history": [], "source.instagram_business_source.instagram_business.media_insights": [], "source.instagram_business_source.instagram_business.user_history": []}, "child_map": {"seed.social_media_rollup_integration_tests.instagram_business_media_insights_data": ["model.instagram_business_source.stg_instagram_business__media_insights_tmp"], "seed.social_media_rollup_integration_tests.linkedin_pages_share_statistic_data": ["model.linkedin_pages_source.stg_linkedin_pages__share_statistic_tmp"], "seed.social_media_rollup_integration_tests.linkedin_pages_ugc_post_share_content_media_data": ["model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_media_tmp"], "seed.social_media_rollup_integration_tests.linkedin_pages_organization_ugc_post_data": ["model.linkedin_pages_source.stg_linkedin_pages__organization_ugc_post_tmp"], "seed.social_media_rollup_integration_tests.twitter_organic_tweet_data": ["model.twitter_organic_source.stg_twitter_organic__tweet_tmp"], "seed.social_media_rollup_integration_tests.instagram_business_user_history_data": ["model.instagram_business_source.stg_instagram_business__user_history_tmp"], "seed.social_media_rollup_integration_tests.twitter_organic_organic_tweet_report_data": ["model.twitter_organic_source.stg_twitter_organic__organic_tweet_report_tmp"], "seed.social_media_rollup_integration_tests.linkedin_pages_ugc_post_history_data": ["model.linkedin_pages_source.stg_linkedin_pages__ugc_post_history_tmp"], "seed.social_media_rollup_integration_tests.facebook_pages_lifetime_post_metrics_total_data": ["model.facebook_pages_source.stg_facebook_pages__lifetime_post_metrics_total_tmp"], "seed.social_media_rollup_integration_tests.linkedin_pages_organization_data": ["model.linkedin_pages_source.stg_linkedin_pages__organization_tmp", "model.linkedin_pages_source.stg_linkedin_pages__organization_tmp"], "seed.social_media_rollup_integration_tests.instagram_business_media_history_data": ["model.instagram_business_source.stg_instagram_business__media_history_tmp"], "seed.social_media_rollup_integration_tests.facebook_pages_post_history_data": ["model.facebook_pages_source.stg_facebook_pages__post_history_tmp"], "seed.social_media_rollup_integration_tests.facebook_pages_page_data": ["model.facebook_pages_source.stg_facebook_pages__page_tmp"], "seed.social_media_rollup_integration_tests.twitter_organic_twitter_user_history_data": ["model.twitter_organic_source.stg_twitter_organic__twitter_user_history_tmp"], "seed.social_media_rollup_integration_tests.facebook_pages_daily_page_metrics_total_data": ["model.facebook_pages_source.stg_facebook_pages__daily_page_metrics_total_tmp"], "seed.social_media_rollup_integration_tests.twitter_organic_account_history_data": ["model.twitter_organic_source.stg_twitter_organic__account_history_tmp"], "seed.social_media_rollup_integration_tests.linkedin_pages_ugc_post_share_statistic_data": ["model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_statistic_tmp"], "model.instagram_business.instagram_business__posts": ["model.social_media_reporting.social_media_reporting__instagram_posts_reporting", "test.instagram_business.dbt_utils_unique_combination_of_columns_instagram_business__posts_post_id__source_relation.5a8087988b", "test.instagram_business.not_null_instagram_business__posts_post_id.8daa517f7d"], "model.twitter_organic.twitter_organic__tweets": ["model.social_media_reporting.social_media_reporting__twitter_posts_reporting", "test.twitter_organic.dbt_utils_unique_combination_of_columns_twitter_organic__tweets_date_day__organic_tweet_id__source_relation.b4415b6f20"], "model.twitter_organic.int_twitter_organic__latest_account": ["model.twitter_organic.twitter_organic__tweets"], "model.twitter_organic.int_twitter_organic__latest_user": ["model.twitter_organic.twitter_organic__tweets"], "model.linkedin_pages_source.stg_linkedin_pages__share_statistic": ["model.linkedin_pages.linkedin_pages__posts", "test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__share_statistic_share_statistic_id__source_relation.452f64d50a", "test.linkedin_pages_source.not_null_stg_linkedin_pages__share_statistic_organization_entity_urn.150c878c76"], "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_content_media": ["model.linkedin_pages.linkedin_pages__posts", "test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__ugc_post_share_content_media_ugc_post_id__last_modified_timestamp__source_relation.f629d7cf4d"], "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_history": ["model.linkedin_pages.int_linkedin_pages__latest_post_history", "test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__ugc_post_history_ugc_post_id__last_modified_timestamp__source_relation.8192e4952b"], "model.linkedin_pages_source.stg_linkedin_pages__organization": ["model.linkedin_pages.linkedin_pages__posts", "test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__organization_organization_id__source_relation.edd32b54a1"], "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_statistic": ["model.linkedin_pages.int_linkedin_pages__latest_post", "test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__ugc_post_share_statistic_share_statistic_id__source_relation.10bd19bf37"], "model.linkedin_pages_source.stg_linkedin_pages__organization_ugc_post": ["model.linkedin_pages.linkedin_pages__posts", "test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__organization_ugc_post_organization_id__ugc_post_id__source_relation.74490569e1"], "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_history_tmp": ["model.linkedin_pages_source.stg_linkedin_pages__ugc_post_history", "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_history"], "model.linkedin_pages_source.stg_linkedin_pages__organization_tmp": ["model.linkedin_pages_source.stg_linkedin_pages__organization", "model.linkedin_pages_source.stg_linkedin_pages__organization"], "model.linkedin_pages_source.stg_linkedin_pages__organization_ugc_post_tmp": ["model.linkedin_pages_source.stg_linkedin_pages__organization_ugc_post", "model.linkedin_pages_source.stg_linkedin_pages__organization_ugc_post"], "model.linkedin_pages_source.stg_linkedin_pages__share_statistic_tmp": ["model.linkedin_pages_source.stg_linkedin_pages__share_statistic", "model.linkedin_pages_source.stg_linkedin_pages__share_statistic"], "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_statistic_tmp": ["model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_statistic", "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_statistic"], "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_media_tmp": ["model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_content_media", "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_content_media"], "model.facebook_pages.facebook_pages__pages_report": ["test.facebook_pages.dbt_utils_unique_combination_of_columns_facebook_pages__pages_report_page_id__date_day__source_relation.f6275f55a9", "test.facebook_pages.not_null_facebook_pages__pages_report_date_day.0d88b4b154", "test.facebook_pages.not_null_facebook_pages__pages_report_page_id.42b740bfbe"], "model.facebook_pages.facebook_pages__posts_report": ["model.social_media_reporting.social_media_reporting__facebook_posts_reporting", "test.facebook_pages.dbt_utils_unique_combination_of_columns_facebook_pages__posts_report_post_id__date_day__source_relation.19483d54fa", "test.facebook_pages.not_null_facebook_pages__posts_report_date_day.ec0cb997b7"], "model.facebook_pages.int_facebook_pages__lastest_post": ["model.facebook_pages.facebook_pages__posts_report"], "model.twitter_organic_source.stg_twitter_organic__twitter_user_history": ["model.twitter_organic.int_twitter_organic__latest_user", "test.twitter_organic_source.dbt_utils_unique_combination_of_columns_stg_twitter_organic__twitter_user_history_user_id__source_relation.577d45a09a", "test.twitter_organic_source.not_null_stg_twitter_organic__twitter_user_history_user_id.5d6e14a6ce"], "model.twitter_organic_source.stg_twitter_organic__tweet": ["model.twitter_organic.twitter_organic__tweets", "test.twitter_organic_source.dbt_utils_unique_combination_of_columns_stg_twitter_organic__tweet_organic_tweet_id__source_relation.9c43fbcfa6", "test.twitter_organic_source.not_null_stg_twitter_organic__tweet_account_id.babfc0e1e9", "test.twitter_organic_source.not_null_stg_twitter_organic__tweet_organic_tweet_id.1d21df5ac1"], "model.twitter_organic_source.stg_twitter_organic__account_history": ["model.twitter_organic.int_twitter_organic__latest_account", "test.twitter_organic_source.dbt_utils_unique_combination_of_columns_stg_twitter_organic__account_history_account_id__updated_timestamp__source_relation.41e71af7e1", "test.twitter_organic_source.not_null_stg_twitter_organic__account_history_account_id.a77a3afb85"], "model.twitter_organic_source.stg_twitter_organic__organic_tweet_report": ["model.twitter_organic.twitter_organic__tweets", "test.twitter_organic_source.dbt_utils_unique_combination_of_columns_stg_twitter_organic__organic_tweet_report_account_id__organic_tweet_id__date_day__source_relation.4a121854e5", "test.twitter_organic_source.not_null_stg_twitter_organic__organic_tweet_report_account_id.2e0dfb4d1a", "test.twitter_organic_source.not_null_stg_twitter_organic__organic_tweet_report_organic_tweet_id.300639fcfb"], "model.twitter_organic_source.stg_twitter_organic__tweet_tmp": ["model.twitter_organic_source.stg_twitter_organic__tweet", "model.twitter_organic_source.stg_twitter_organic__tweet"], "model.twitter_organic_source.stg_twitter_organic__twitter_user_history_tmp": ["model.twitter_organic_source.stg_twitter_organic__twitter_user_history", "model.twitter_organic_source.stg_twitter_organic__twitter_user_history"], "model.twitter_organic_source.stg_twitter_organic__account_history_tmp": ["model.twitter_organic_source.stg_twitter_organic__account_history", "model.twitter_organic_source.stg_twitter_organic__account_history"], "model.twitter_organic_source.stg_twitter_organic__organic_tweet_report_tmp": ["model.twitter_organic_source.stg_twitter_organic__organic_tweet_report", "model.twitter_organic_source.stg_twitter_organic__organic_tweet_report"], "model.facebook_pages_source.stg_facebook_pages__post_history": ["model.facebook_pages.int_facebook_pages__lastest_post", "test.facebook_pages_source.dbt_utils_unique_combination_of_columns_stg_facebook_pages__post_history_post_id__updated_timestamp__source_relation.67de991272", "test.facebook_pages_source.not_null_stg_facebook_pages__post_history_post_id.fd3293856c"], "model.facebook_pages_source.stg_facebook_pages__page": ["model.facebook_pages.facebook_pages__pages_report", "model.facebook_pages.facebook_pages__posts_report", "test.facebook_pages_source.dbt_utils_unique_combination_of_columns_stg_facebook_pages__page_page_id__source_relation.32a7459a05", "test.facebook_pages_source.not_null_stg_facebook_pages__page_page_id.3839292889"], "model.facebook_pages_source.stg_facebook_pages__daily_page_metrics_total": ["model.facebook_pages.facebook_pages__pages_report", "test.facebook_pages_source.dbt_utils_unique_combination_of_columns_stg_facebook_pages__daily_page_metrics_total_page_id__date_day__source_relation.b90aa3f043", "test.facebook_pages_source.not_null_stg_facebook_pages__daily_page_metrics_total_date_day.880eb929d5", "test.facebook_pages_source.not_null_stg_facebook_pages__daily_page_metrics_total_page_id.937414eaf3"], "model.facebook_pages_source.stg_facebook_pages__lifetime_post_metrics_total": ["model.facebook_pages.facebook_pages__posts_report", "test.facebook_pages_source.dbt_utils_unique_combination_of_columns_stg_facebook_pages__lifetime_post_metrics_total_post_id__date_day__source_relation.c12787b228", "test.facebook_pages_source.not_null_stg_facebook_pages__lifetime_post_metrics_total_date_day.de0419d721", "test.facebook_pages_source.not_null_stg_facebook_pages__lifetime_post_metrics_total_post_id.66563712ec"], "model.facebook_pages_source.stg_facebook_pages__lifetime_post_metrics_total_tmp": ["model.facebook_pages_source.stg_facebook_pages__lifetime_post_metrics_total", "model.facebook_pages_source.stg_facebook_pages__lifetime_post_metrics_total"], "model.facebook_pages_source.stg_facebook_pages__page_tmp": ["model.facebook_pages_source.stg_facebook_pages__page", "model.facebook_pages_source.stg_facebook_pages__page"], "model.facebook_pages_source.stg_facebook_pages__daily_page_metrics_total_tmp": ["model.facebook_pages_source.stg_facebook_pages__daily_page_metrics_total", "model.facebook_pages_source.stg_facebook_pages__daily_page_metrics_total"], "model.facebook_pages_source.stg_facebook_pages__post_history_tmp": ["model.facebook_pages_source.stg_facebook_pages__post_history", "model.facebook_pages_source.stg_facebook_pages__post_history"], "model.linkedin_pages.linkedin_pages__posts": ["model.social_media_reporting.social_media_reporting__linkedin_posts_reporting", "test.linkedin_pages.dbt_utils_unique_combination_of_columns_linkedin_pages__posts_ugc_post_id__source_relation.d7c3d11ad1"], "model.linkedin_pages.int_linkedin_pages__latest_post_history": ["model.linkedin_pages.linkedin_pages__posts"], "model.linkedin_pages.int_linkedin_pages__latest_post": ["model.linkedin_pages.linkedin_pages__posts"], "model.instagram_business_source.stg_instagram_business__user_history": ["model.instagram_business.instagram_business__posts", "test.instagram_business_source.dbt_utils_unique_combination_of_columns_stg_instagram_business__user_history__fivetran_id__user_id__source_relation.1fc678e6cf", "test.instagram_business_source.not_null_stg_instagram_business__user_history__fivetran_id.726c530904", "test.instagram_business_source.not_null_stg_instagram_business__user_history_user_id.72a7df3526"], "model.instagram_business_source.stg_instagram_business__media_insights": ["model.instagram_business.instagram_business__posts", "test.instagram_business_source.dbt_utils_unique_combination_of_columns_stg_instagram_business__media_insights__fivetran_id__post_id__source_relation.0f78b7064e", "test.instagram_business_source.not_null_stg_instagram_business__media_insights__fivetran_id.5cc95a9508", "test.instagram_business_source.not_null_stg_instagram_business__media_insights_post_id.f6e59f012e"], "model.instagram_business_source.stg_instagram_business__media_history": ["model.instagram_business.instagram_business__posts", "test.instagram_business_source.dbt_utils_unique_combination_of_columns_stg_instagram_business__media_history__fivetran_id__post_id__source_relation.57e3622790", "test.instagram_business_source.not_null_stg_instagram_business__media_history__fivetran_id.cfe4889ca2", "test.instagram_business_source.not_null_stg_instagram_business__media_history_post_id.878653b6a5"], "model.instagram_business_source.stg_instagram_business__media_insights_tmp": ["model.instagram_business_source.stg_instagram_business__media_insights", "model.instagram_business_source.stg_instagram_business__media_insights"], "model.instagram_business_source.stg_instagram_business__user_history_tmp": ["model.instagram_business_source.stg_instagram_business__user_history", "model.instagram_business_source.stg_instagram_business__user_history"], "model.instagram_business_source.stg_instagram_business__media_history_tmp": ["model.instagram_business_source.stg_instagram_business__media_history", "model.instagram_business_source.stg_instagram_business__media_history"], "model.social_media_reporting.social_media_reporting__rollup_report": ["test.social_media_reporting.dbt_utils_unique_combination_of_columns_social_media_reporting__rollup_report_post_id__platform__source_relation.9985a561ef"], "model.social_media_reporting.social_media_reporting__twitter_posts_reporting": ["model.social_media_reporting.social_media_reporting__rollup_report"], "model.social_media_reporting.social_media_reporting__facebook_posts_reporting": ["model.social_media_reporting.social_media_reporting__rollup_report"], "model.social_media_reporting.social_media_reporting__instagram_posts_reporting": ["model.social_media_reporting.social_media_reporting__rollup_report"], "model.social_media_reporting.social_media_reporting__linkedin_posts_reporting": ["model.social_media_reporting.social_media_reporting__rollup_report"], "test.instagram_business.not_null_instagram_business__posts_post_id.8daa517f7d": [], "test.instagram_business.dbt_utils_unique_combination_of_columns_instagram_business__posts_post_id__source_relation.5a8087988b": [], "test.twitter_organic.dbt_utils_unique_combination_of_columns_twitter_organic__tweets_date_day__organic_tweet_id__source_relation.b4415b6f20": [], "test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__organization_ugc_post_organization_id__ugc_post_id__source_relation.74490569e1": [], "test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__organization_organization_id__source_relation.edd32b54a1": [], "test.linkedin_pages_source.not_null_stg_linkedin_pages__share_statistic_organization_entity_urn.150c878c76": [], "test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__share_statistic_share_statistic_id__source_relation.452f64d50a": [], "test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__ugc_post_history_ugc_post_id__last_modified_timestamp__source_relation.8192e4952b": [], "test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__ugc_post_share_content_media_ugc_post_id__last_modified_timestamp__source_relation.f629d7cf4d": [], "test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__ugc_post_share_statistic_share_statistic_id__source_relation.10bd19bf37": [], "test.facebook_pages.not_null_facebook_pages__posts_report_date_day.ec0cb997b7": [], "test.facebook_pages.dbt_utils_unique_combination_of_columns_facebook_pages__posts_report_post_id__date_day__source_relation.19483d54fa": [], "test.facebook_pages.not_null_facebook_pages__pages_report_page_id.42b740bfbe": [], "test.facebook_pages.not_null_facebook_pages__pages_report_date_day.0d88b4b154": [], "test.facebook_pages.dbt_utils_unique_combination_of_columns_facebook_pages__pages_report_page_id__date_day__source_relation.f6275f55a9": [], "test.twitter_organic_source.not_null_stg_twitter_organic__account_history_account_id.a77a3afb85": [], "test.twitter_organic_source.dbt_utils_unique_combination_of_columns_stg_twitter_organic__account_history_account_id__updated_timestamp__source_relation.41e71af7e1": [], "test.twitter_organic_source.not_null_stg_twitter_organic__organic_tweet_report_account_id.2e0dfb4d1a": [], "test.twitter_organic_source.not_null_stg_twitter_organic__organic_tweet_report_organic_tweet_id.300639fcfb": [], "test.twitter_organic_source.dbt_utils_unique_combination_of_columns_stg_twitter_organic__organic_tweet_report_account_id__organic_tweet_id__date_day__source_relation.4a121854e5": [], "test.twitter_organic_source.not_null_stg_twitter_organic__tweet_account_id.babfc0e1e9": [], "test.twitter_organic_source.not_null_stg_twitter_organic__tweet_organic_tweet_id.1d21df5ac1": [], "test.twitter_organic_source.dbt_utils_unique_combination_of_columns_stg_twitter_organic__tweet_organic_tweet_id__source_relation.9c43fbcfa6": [], "test.twitter_organic_source.not_null_stg_twitter_organic__twitter_user_history_user_id.5d6e14a6ce": [], "test.twitter_organic_source.dbt_utils_unique_combination_of_columns_stg_twitter_organic__twitter_user_history_user_id__source_relation.577d45a09a": [], "test.facebook_pages_source.not_null_stg_facebook_pages__daily_page_metrics_total_date_day.880eb929d5": [], "test.facebook_pages_source.not_null_stg_facebook_pages__daily_page_metrics_total_page_id.937414eaf3": [], "test.facebook_pages_source.dbt_utils_unique_combination_of_columns_stg_facebook_pages__daily_page_metrics_total_page_id__date_day__source_relation.b90aa3f043": [], "test.facebook_pages_source.not_null_stg_facebook_pages__lifetime_post_metrics_total_date_day.de0419d721": [], "test.facebook_pages_source.not_null_stg_facebook_pages__lifetime_post_metrics_total_post_id.66563712ec": [], "test.facebook_pages_source.dbt_utils_unique_combination_of_columns_stg_facebook_pages__lifetime_post_metrics_total_post_id__date_day__source_relation.c12787b228": [], "test.facebook_pages_source.not_null_stg_facebook_pages__page_page_id.3839292889": [], "test.facebook_pages_source.dbt_utils_unique_combination_of_columns_stg_facebook_pages__page_page_id__source_relation.32a7459a05": [], "test.facebook_pages_source.not_null_stg_facebook_pages__post_history_post_id.fd3293856c": [], "test.facebook_pages_source.dbt_utils_unique_combination_of_columns_stg_facebook_pages__post_history_post_id__updated_timestamp__source_relation.67de991272": [], "test.linkedin_pages.dbt_utils_unique_combination_of_columns_linkedin_pages__posts_ugc_post_id__source_relation.d7c3d11ad1": [], "test.instagram_business_source.not_null_stg_instagram_business__media_history__fivetran_id.cfe4889ca2": [], "test.instagram_business_source.not_null_stg_instagram_business__media_history_post_id.878653b6a5": [], "test.instagram_business_source.dbt_utils_unique_combination_of_columns_stg_instagram_business__media_history__fivetran_id__post_id__source_relation.57e3622790": [], "test.instagram_business_source.not_null_stg_instagram_business__media_insights__fivetran_id.5cc95a9508": [], "test.instagram_business_source.not_null_stg_instagram_business__media_insights_post_id.f6e59f012e": [], "test.instagram_business_source.dbt_utils_unique_combination_of_columns_stg_instagram_business__media_insights__fivetran_id__post_id__source_relation.0f78b7064e": [], "test.instagram_business_source.not_null_stg_instagram_business__user_history__fivetran_id.726c530904": [], "test.instagram_business_source.not_null_stg_instagram_business__user_history_user_id.72a7df3526": [], "test.instagram_business_source.dbt_utils_unique_combination_of_columns_stg_instagram_business__user_history__fivetran_id__user_id__source_relation.1fc678e6cf": [], "test.social_media_reporting.dbt_utils_unique_combination_of_columns_social_media_reporting__rollup_report_post_id__platform__source_relation.9985a561ef": [], "source.linkedin_pages_source.linkedin_pages.share_statistic": [], "source.linkedin_pages_source.linkedin_pages.ugc_post_share_statistic": [], "source.linkedin_pages_source.linkedin_pages.ugc_post_history": [], "source.linkedin_pages_source.linkedin_pages.ugc_post_share_content_media": [], "source.linkedin_pages_source.linkedin_pages.organization": [], "source.linkedin_pages_source.linkedin_pages.organization_ugc_post": [], "source.twitter_organic_source.twitter_organic.account_history": [], "source.twitter_organic_source.twitter_organic.organic_tweet_report": [], "source.twitter_organic_source.twitter_organic.tweet": [], "source.twitter_organic_source.twitter_organic.twitter_user_history": [], "source.facebook_pages_source.facebook_pages.post_history": [], "source.facebook_pages_source.facebook_pages.page": [], "source.facebook_pages_source.facebook_pages.lifetime_post_metrics_total": [], "source.facebook_pages_source.facebook_pages.daily_page_metrics_total": [], "source.instagram_business_source.instagram_business.media_history": [], "source.instagram_business_source.instagram_business.media_insights": [], "source.instagram_business_source.instagram_business.user_history": []}}